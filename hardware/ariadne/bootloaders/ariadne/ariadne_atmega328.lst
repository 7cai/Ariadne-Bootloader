
ariadne_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .note.gnu.build-id 00000024  00000000  00000000  000000d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .data         0000001c  00800100  00007a7a  00000b72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00000a7a  00007000  00007000  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          00000011  0080011c  0080011c  00000b8e  2**0
                  ALLOC
  4 .stab         00003edc  00000000  00000000  00000b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001476  00000000  00000000  00004a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005ee2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007000 <__vectors>:
    7000:	50 c0       	rjmp	.+160    	; 0x70a2 <__ctors_end>
    7002:	00 00       	nop
    7004:	cb c0       	rjmp	.+406    	; 0x719c <__bad_interrupt>
    7006:	00 00       	nop
    7008:	c9 c0       	rjmp	.+402    	; 0x719c <__bad_interrupt>
    700a:	00 00       	nop
    700c:	c7 c0       	rjmp	.+398    	; 0x719c <__bad_interrupt>
    700e:	00 00       	nop
    7010:	c5 c0       	rjmp	.+394    	; 0x719c <__bad_interrupt>
    7012:	00 00       	nop
    7014:	c3 c0       	rjmp	.+390    	; 0x719c <__bad_interrupt>
    7016:	00 00       	nop
    7018:	c1 c0       	rjmp	.+386    	; 0x719c <__bad_interrupt>
    701a:	00 00       	nop
    701c:	bf c0       	rjmp	.+382    	; 0x719c <__bad_interrupt>
    701e:	00 00       	nop
    7020:	bd c0       	rjmp	.+378    	; 0x719c <__bad_interrupt>
    7022:	00 00       	nop
    7024:	bb c0       	rjmp	.+374    	; 0x719c <__bad_interrupt>
    7026:	00 00       	nop
    7028:	b9 c0       	rjmp	.+370    	; 0x719c <__bad_interrupt>
    702a:	00 00       	nop
    702c:	b7 c0       	rjmp	.+366    	; 0x719c <__bad_interrupt>
    702e:	00 00       	nop
    7030:	b5 c0       	rjmp	.+362    	; 0x719c <__bad_interrupt>
    7032:	00 00       	nop
    7034:	b3 c0       	rjmp	.+358    	; 0x719c <__bad_interrupt>
    7036:	00 00       	nop
    7038:	b1 c0       	rjmp	.+354    	; 0x719c <__bad_interrupt>
    703a:	00 00       	nop
    703c:	af c0       	rjmp	.+350    	; 0x719c <__bad_interrupt>
    703e:	00 00       	nop
    7040:	ad c0       	rjmp	.+346    	; 0x719c <__bad_interrupt>
    7042:	00 00       	nop
    7044:	ab c0       	rjmp	.+342    	; 0x719c <__bad_interrupt>
    7046:	00 00       	nop
    7048:	a9 c0       	rjmp	.+338    	; 0x719c <__bad_interrupt>
    704a:	00 00       	nop
    704c:	a7 c0       	rjmp	.+334    	; 0x719c <__bad_interrupt>
    704e:	00 00       	nop
    7050:	a5 c0       	rjmp	.+330    	; 0x719c <__bad_interrupt>
    7052:	00 00       	nop
    7054:	a3 c0       	rjmp	.+326    	; 0x719c <__bad_interrupt>
    7056:	00 00       	nop
    7058:	a1 c0       	rjmp	.+322    	; 0x719c <__bad_interrupt>
    705a:	00 00       	nop
    705c:	9f c0       	rjmp	.+318    	; 0x719c <__bad_interrupt>
    705e:	00 00       	nop
    7060:	9d c0       	rjmp	.+314    	; 0x719c <__bad_interrupt>
    7062:	00 00       	nop
    7064:	9b c0       	rjmp	.+310    	; 0x719c <__bad_interrupt>
	...

00007068 <tftp_invalid_image_packet>:
    7068:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    7078:	67 65 20 66 69 6c 65 00                             ge file.

00007080 <tftp_unknown_error_packet>:
    7080:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000708b <tftp_full_error_packet>:
    708b:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007095 <tftp_opcode_error_packet>:
    7095:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

000070a2 <__ctors_end>:
    70a2:	11 24       	eor	r1, r1
    70a4:	1f be       	out	0x3f, r1	; 63
    70a6:	cf ef       	ldi	r28, 0xFF	; 255
    70a8:	d8 e0       	ldi	r29, 0x08	; 8
    70aa:	de bf       	out	0x3e, r29	; 62
    70ac:	cd bf       	out	0x3d, r28	; 61

000070ae <__do_copy_data>:
    70ae:	11 e0       	ldi	r17, 0x01	; 1
    70b0:	a0 e0       	ldi	r26, 0x00	; 0
    70b2:	b1 e0       	ldi	r27, 0x01	; 1
    70b4:	ea e7       	ldi	r30, 0x7A	; 122
    70b6:	fa e7       	ldi	r31, 0x7A	; 122
    70b8:	02 c0       	rjmp	.+4      	; 0x70be <__do_copy_data+0x10>
    70ba:	05 90       	lpm	r0, Z+
    70bc:	0d 92       	st	X+, r0
    70be:	ac 31       	cpi	r26, 0x1C	; 28
    70c0:	b1 07       	cpc	r27, r17
    70c2:	d9 f7       	brne	.-10     	; 0x70ba <__do_copy_data+0xc>

000070c4 <__do_clear_bss>:
    70c4:	11 e0       	ldi	r17, 0x01	; 1
    70c6:	ac e1       	ldi	r26, 0x1C	; 28
    70c8:	b1 e0       	ldi	r27, 0x01	; 1
    70ca:	01 c0       	rjmp	.+2      	; 0x70ce <.do_clear_bss_start>

000070cc <.do_clear_bss_loop>:
    70cc:	1d 92       	st	X+, r1

000070ce <.do_clear_bss_start>:
    70ce:	ad 32       	cpi	r26, 0x2D	; 45
    70d0:	b1 07       	cpc	r27, r17
    70d2:	e1 f7       	brne	.-8      	; 0x70cc <.do_clear_bss_loop>
    70d4:	01 d0       	rcall	.+2      	; 0x70d8 <main>
    70d6:	cf c4       	rjmp	.+2462   	; 0x7a76 <_exit>

000070d8 <main>:
    70d8:	38 d3       	rcall	.+1648   	; 0x774a <watchdogDisable>
    70da:	2f ef       	ldi	r18, 0xFF	; 255
    70dc:	85 ea       	ldi	r24, 0xA5	; 165
    70de:	9e e0       	ldi	r25, 0x0E	; 14
    70e0:	21 50       	subi	r18, 0x01	; 1
    70e2:	80 40       	sbci	r24, 0x00	; 0
    70e4:	90 40       	sbci	r25, 0x00	; 0
    70e6:	e1 f7       	brne	.-8      	; 0x70e0 <main+0x8>
    70e8:	00 c0       	rjmp	.+0      	; 0x70ea <main+0x12>
    70ea:	00 00       	nop
    70ec:	11 24       	eor	r1, r1
    70ee:	85 e0       	ldi	r24, 0x05	; 5
    70f0:	80 93 81 00 	sts	0x0081, r24
    70f4:	80 e0       	ldi	r24, 0x00	; 0
    70f6:	90 e0       	ldi	r25, 0x00	; 0
    70f8:	a8 d4       	rcall	.+2384   	; 0x7a4a <__eerd_byte_m328p>
    70fa:	88 23       	and	r24, r24
    70fc:	21 f0       	breq	.+8      	; 0x7106 <main+0x2e>
    70fe:	60 e0       	ldi	r22, 0x00	; 0
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	aa d4       	rcall	.+2388   	; 0x7a5a <__eewr_byte_m328p>
    7106:	81 e0       	ldi	r24, 0x01	; 1
    7108:	90 e0       	ldi	r25, 0x00	; 0
    710a:	9f d4       	rcall	.+2366   	; 0x7a4a <__eerd_byte_m328p>
    710c:	84 30       	cpi	r24, 0x04	; 4
    710e:	21 f0       	breq	.+8      	; 0x7118 <main+0x40>
    7110:	64 e0       	ldi	r22, 0x04	; 4
    7112:	81 e0       	ldi	r24, 0x01	; 1
    7114:	90 e0       	ldi	r25, 0x00	; 0
    7116:	a1 d4       	rcall	.+2370   	; 0x7a5a <__eewr_byte_m328p>
    7118:	2b d3       	rcall	.+1622   	; 0x7770 <serialInit>
    711a:	99 d0       	rcall	.+306    	; 0x724e <netInit>
    711c:	b4 d2       	rcall	.+1384   	; 0x7686 <tftpInit>
    711e:	ef ef       	ldi	r30, 0xFF	; 255
    7120:	f5 ea       	ldi	r31, 0xA5	; 165
    7122:	2e e0       	ldi	r18, 0x0E	; 14
    7124:	e1 50       	subi	r30, 0x01	; 1
    7126:	f0 40       	sbci	r31, 0x00	; 0
    7128:	20 40       	sbci	r18, 0x00	; 0
    712a:	e1 f7       	brne	.-8      	; 0x7124 <main+0x4c>
    712c:	00 c0       	rjmp	.+0      	; 0x712e <main+0x56>
    712e:	00 00       	nop
    7130:	10 92 28 01 	sts	0x0128, r1
    7134:	10 92 29 01 	sts	0x0129, r1
    7138:	13 e0       	ldi	r17, 0x03	; 3
    713a:	c0 e0       	ldi	r28, 0x00	; 0
    713c:	d0 e0       	ldi	r29, 0x00	; 0
    713e:	80 91 28 01 	lds	r24, 0x0128
    7142:	88 23       	and	r24, r24
    7144:	29 f0       	breq	.+10     	; 0x7150 <main+0x78>
    7146:	80 91 29 01 	lds	r24, 0x0129
    714a:	88 23       	and	r24, r24
    714c:	49 f0       	breq	.+18     	; 0x7160 <main+0x88>
    714e:	04 c0       	rjmp	.+8      	; 0x7158 <main+0x80>
    7150:	bd d2       	rcall	.+1402   	; 0x76cc <tftpPoll>
    7152:	81 11       	cpse	r24, r1
    7154:	f8 cf       	rjmp	.-16     	; 0x7146 <main+0x6e>
    7156:	1b c0       	rjmp	.+54     	; 0x718e <main+0xb6>
    7158:	61 d3       	rcall	.+1730   	; 0x781c <timedOut>
    715a:	81 11       	cpse	r24, r1
    715c:	05 c0       	rjmp	.+10     	; 0x7168 <main+0x90>
    715e:	15 c0       	rjmp	.+42     	; 0x718a <main+0xb2>
    7160:	60 d4       	rcall	.+2240   	; 0x7a22 <serialPoll>
    7162:	81 11       	cpse	r24, r1
    7164:	f9 cf       	rjmp	.-14     	; 0x7158 <main+0x80>
    7166:	13 c0       	rjmp	.+38     	; 0x718e <main+0xb6>
    7168:	82 e0       	ldi	r24, 0x02	; 2
    716a:	90 e0       	ldi	r25, 0x00	; 0
    716c:	6e d4       	rcall	.+2268   	; 0x7a4a <__eerd_byte_m328p>
    716e:	8e 3e       	cpi	r24, 0xEE	; 238
    7170:	71 f0       	breq	.+28     	; 0x718e <main+0xb6>
    7172:	80 91 29 01 	lds	r24, 0x0129
    7176:	81 30       	cpi	r24, 0x01	; 1
    7178:	41 f4       	brne	.+16     	; 0x718a <main+0xb2>
    717a:	fe 01       	movw	r30, r28
    717c:	10 93 57 00 	sts	0x0057, r17
    7180:	e8 95       	spm
    7182:	81 d2       	rcall	.+1282   	; 0x7686 <tftpInit>
    7184:	42 d3       	rcall	.+1668   	; 0x780a <resetTick>
    7186:	10 92 29 01 	sts	0x0129, r1
    718a:	1d d3       	rcall	.+1594   	; 0x77c6 <updateLed>
    718c:	d8 cf       	rjmp	.-80     	; 0x713e <main+0x66>
    718e:	e0 91 1c 01 	lds	r30, 0x011C
    7192:	f0 91 1d 01 	lds	r31, 0x011D
    7196:	09 95       	icall
    7198:	80 e0       	ldi	r24, 0x00	; 0
    719a:	90 e0       	ldi	r25, 0x00	; 0

0000719c <__bad_interrupt>:
    719c:	31 cf       	rjmp	.-414    	; 0x7000 <__vectors>

0000719e <netWriteReg>:
	trace(", ");
	tracenum(value);
#endif

	// Send uint8_t to Ethernet controller
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    719e:	20 e5       	ldi	r18, 0x50	; 80
    71a0:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    71a2:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_WRITE;
    71a4:	20 ef       	ldi	r18, 0xF0	; 240
    71a6:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71a8:	0d b4       	in	r0, 0x2d	; 45
    71aa:	07 fe       	sbrs	r0, 7
    71ac:	fd cf       	rjmp	.-6      	; 0x71a8 <netWriteReg+0xa>
	SPDR = address >> 8;
    71ae:	29 2f       	mov	r18, r25
    71b0:	33 27       	eor	r19, r19
    71b2:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71b4:	0d b4       	in	r0, 0x2d	; 45
    71b6:	07 fe       	sbrs	r0, 7
    71b8:	fd cf       	rjmp	.-6      	; 0x71b4 <netWriteReg+0x16>
	SPDR = address & 0xff;
    71ba:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71bc:	0d b4       	in	r0, 0x2d	; 45
    71be:	07 fe       	sbrs	r0, 7
    71c0:	fd cf       	rjmp	.-6      	; 0x71bc <netWriteReg+0x1e>
	SPDR = value;
    71c2:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
    71c4:	0d b4       	in	r0, 0x2d	; 45
    71c6:	07 fe       	sbrs	r0, 7
    71c8:	fd cf       	rjmp	.-6      	; 0x71c4 <netWriteReg+0x26>
	SS_HIGH();
    71ca:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 0; // Turn off SPI
    71cc:	1c bc       	out	0x2c, r1	; 44
    71ce:	08 95       	ret

000071d0 <netReadReg>:
//    tracenum(address);
//#endif

	// Read uint8_t from Ethernet controller
	uint8_t returnValue;
	SPCR = _BV(SPE) | _BV(MSTR);
    71d0:	20 e5       	ldi	r18, 0x50	; 80
    71d2:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    71d4:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_READ;
    71d6:	2f e0       	ldi	r18, 0x0F	; 15
    71d8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71da:	0d b4       	in	r0, 0x2d	; 45
    71dc:	07 fe       	sbrs	r0, 7
    71de:	fd cf       	rjmp	.-6      	; 0x71da <netReadReg+0xa>
	SPDR = address >> 8;
    71e0:	29 2f       	mov	r18, r25
    71e2:	33 27       	eor	r19, r19
    71e4:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71e6:	0d b4       	in	r0, 0x2d	; 45
    71e8:	07 fe       	sbrs	r0, 7
    71ea:	fd cf       	rjmp	.-6      	; 0x71e6 <netReadReg+0x16>
	SPDR = address & 0xff;
    71ec:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71ee:	0d b4       	in	r0, 0x2d	; 45
    71f0:	07 fe       	sbrs	r0, 7
    71f2:	fd cf       	rjmp	.-6      	; 0x71ee <netReadReg+0x1e>
	SPDR = 0;
    71f4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    71f6:	0d b4       	in	r0, 0x2d	; 45
    71f8:	07 fe       	sbrs	r0, 7
    71fa:	fd cf       	rjmp	.-6      	; 0x71f6 <netReadReg+0x26>
	SS_HIGH();
    71fc:	2a 9a       	sbi	0x05, 2	; 5
	returnValue = SPDR;
    71fe:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
    7200:	1c bc       	out	0x2c, r1	; 44
	return(returnValue);
}
    7202:	08 95       	ret

00007204 <netReadWord>:

uint16_t netReadWord(uint16_t address)
{
    7204:	1f 93       	push	r17
    7206:	cf 93       	push	r28
    7208:	df 93       	push	r29
    720a:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((netReadReg(address) << 8) | netReadReg(address + 1));
    720c:	e1 df       	rcall	.-62     	; 0x71d0 <netReadReg>
    720e:	18 2f       	mov	r17, r24
    7210:	ce 01       	movw	r24, r28
    7212:	01 96       	adiw	r24, 0x01	; 1
    7214:	dd df       	rcall	.-70     	; 0x71d0 <netReadReg>
    7216:	21 2f       	mov	r18, r17
    7218:	30 e0       	ldi	r19, 0x00	; 0
    721a:	32 2f       	mov	r19, r18
    721c:	22 27       	eor	r18, r18
    721e:	a9 01       	movw	r20, r18
    7220:	48 2b       	or	r20, r24
}
    7222:	ca 01       	movw	r24, r20
    7224:	df 91       	pop	r29
    7226:	cf 91       	pop	r28
    7228:	1f 91       	pop	r17
    722a:	08 95       	ret

0000722c <netWriteWord>:

void netWriteWord(uint16_t address, uint16_t value)
{
    722c:	0f 93       	push	r16
    722e:	1f 93       	push	r17
    7230:	cf 93       	push	r28
    7232:	df 93       	push	r29
    7234:	8c 01       	movw	r16, r24
    7236:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
    7238:	67 2f       	mov	r22, r23
    723a:	77 27       	eor	r23, r23
    723c:	b0 df       	rcall	.-160    	; 0x719e <netWriteReg>
    723e:	6c 2f       	mov	r22, r28
	netWriteReg(address, value & 0xff);
    7240:	c8 01       	movw	r24, r16
    7242:	01 96       	adiw	r24, 0x01	; 1
    7244:	df 91       	pop	r29
}
    7246:	cf 91       	pop	r28
    7248:	1f 91       	pop	r17
    724a:	0f 91       	pop	r16
    724c:	a8 cf       	rjmp	.-176    	; 0x719e <netWriteReg>

0000724e <netInit>:

void netInit()
{
    724e:	0f 93       	push	r16
    7250:	1f 93       	push	r17
    7252:	cf 93       	push	r28
    7254:	df 93       	push	r29
	uint8_t i;

	// Set up outputs to communicate with W5100 chip
	// Set pins as output
	DDRB = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7256:	8c e2       	ldi	r24, 0x2C	; 44
    7258:	84 b9       	out	0x04, r24	; 4
	// Set pins high
	PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
    725a:	8c e3       	ldi	r24, 0x3C	; 60
    725c:	85 b9       	out	0x05, r24	; 5
	PORTB |= _BV(LED);
#endif

	// Set up SPI
	// Set the Double SPI Speed Bit
	SPSR = (1 << SPI2X);
    725e:	81 e0       	ldi	r24, 0x01	; 1
    7260:	8d bd       	out	0x2d, r24	; 45

	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    7262:	83 e0       	ldi	r24, 0x03	; 3
    7264:	90 e0       	ldi	r25, 0x00	; 0
    7266:	f1 d3       	rcall	.+2018   	; 0x7a4a <__eerd_byte_m328p>
    7268:	85 35       	cpi	r24, 0x55	; 85
    726a:	29 f0       	breq	.+10     	; 0x7276 <netInit+0x28>
    726c:	00 e0       	ldi	r16, 0x00	; 0
    726e:	11 e0       	ldi	r17, 0x01	; 1
    7270:	c0 e0       	ldi	r28, 0x00	; 0
	        && (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    7272:	d0 e0       	ldi	r29, 0x00	; 0
    7274:	13 c0       	rjmp	.+38     	; 0x729c <netInit+0x4e>
    7276:	84 e0       	ldi	r24, 0x04	; 4
    7278:	90 e0       	ldi	r25, 0x00	; 0
    727a:	e7 d3       	rcall	.+1998   	; 0x7a4a <__eerd_byte_m328p>
    727c:	8a 3a       	cpi	r24, 0xAA	; 170
    727e:	b1 f7       	brne	.-20     	; 0x726c <netInit+0x1e>
    7280:	01 e0       	ldi	r16, 0x01	; 1
    7282:	11 e0       	ldi	r17, 0x01	; 1
    7284:	c5 e0       	ldi	r28, 0x05	; 5
    7286:	d0 e0       	ldi	r29, 0x00	; 0
    7288:	ce 01       	movw	r24, r28
    728a:	df d3       	rcall	.+1982   	; 0x7a4a <__eerd_byte_m328p>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
    728c:	f8 01       	movw	r30, r16
    728e:	81 93       	st	Z+, r24
    7290:	8f 01       	movw	r16, r30
    7292:	21 96       	adiw	r28, 0x01	; 1
    7294:	c7 31       	cpi	r28, 0x17	; 23
    7296:	d1 05       	cpc	r29, r1
    7298:	b9 f7       	brne	.-18     	; 0x7288 <netInit+0x3a>
	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
	        && (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
    729a:	e8 cf       	rjmp	.-48     	; 0x726c <netInit+0x1e>
    729c:	f8 01       	movw	r30, r16
    729e:	61 91       	ld	r22, Z+
    72a0:	8f 01       	movw	r16, r30
	}
#endif

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		netWriteReg(i, registerBuffer[i]);
    72a2:	ce 01       	movw	r24, r28
    72a4:	7c df       	rcall	.-264    	; 0x719e <netWriteReg>
    72a6:	21 96       	adiw	r28, 0x01	; 1
    72a8:	cc 31       	cpi	r28, 0x1C	; 28
    72aa:	d1 05       	cpc	r29, r1
    72ac:	b9 f7       	brne	.-18     	; 0x729c <netInit+0x4e>
    72ae:	df 91       	pop	r29
		if(i != 14) putch(0x2E);
	}
#endif

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
    72b0:	cf 91       	pop	r28
    72b2:	1f 91       	pop	r17
    72b4:	0f 91       	pop	r16
		netWriteReg(i, registerBuffer[i]);
#ifdef _VERBOSE
	traceln(" Net: Network init done");
#endif
}
    72b6:	08 95       	ret

000072b8 <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


void sockInit(uint16_t port)
{
    72b8:	cf 93       	push	r28
    72ba:	df 93       	push	r29
    72bc:	ec 01       	movw	r28, r24
	netWriteReg(REG_S3_CR, CR_CLOSE);
    72be:	60 e1       	ldi	r22, 0x10	; 16
    72c0:	81 e0       	ldi	r24, 0x01	; 1
    72c2:	97 e0       	ldi	r25, 0x07	; 7
    72c4:	6c df       	rcall	.-296    	; 0x719e <netWriteReg>
    72c6:	be 01       	movw	r22, r28
	do {
		// Write TFTP Port
		netWriteWord(REG_S3_PORT0, port);
    72c8:	84 e0       	ldi	r24, 0x04	; 4
    72ca:	97 e0       	ldi	r25, 0x07	; 7
    72cc:	af df       	rcall	.-162    	; 0x722c <netWriteWord>
    72ce:	62 e0       	ldi	r22, 0x02	; 2
    72d0:	80 e0       	ldi	r24, 0x00	; 0
		// Write mode
		netWriteReg(REG_S3_MR, MR_UDP);
    72d2:	97 e0       	ldi	r25, 0x07	; 7
    72d4:	64 df       	rcall	.-312    	; 0x719e <netWriteReg>
    72d6:	61 e0       	ldi	r22, 0x01	; 1
    72d8:	81 e0       	ldi	r24, 0x01	; 1
    72da:	97 e0       	ldi	r25, 0x07	; 7
		// Open Socket
		netWriteReg(REG_S3_CR, CR_OPEN);
    72dc:	60 df       	rcall	.-320    	; 0x719e <netWriteReg>
    72de:	83 e0       	ldi	r24, 0x03	; 3
    72e0:	97 e0       	ldi	r25, 0x07	; 7
    72e2:	76 df       	rcall	.-276    	; 0x71d0 <netReadReg>
    72e4:	82 32       	cpi	r24, 0x22	; 34
		// Read Status
		if(netReadReg(REG_S3_SR) != SOCK_UDP)
    72e6:	21 f0       	breq	.+8      	; 0x72f0 <sockInit+0x38>
    72e8:	60 e1       	ldi	r22, 0x10	; 16
    72ea:	81 e0       	ldi	r24, 0x01	; 1
    72ec:	97 e0       	ldi	r25, 0x07	; 7
    72ee:	57 df       	rcall	.-338    	; 0x719e <netWriteReg>
    72f0:	83 e0       	ldi	r24, 0x03	; 3
			// Close Socket if it wasn't initialized correctly
		netWriteReg(REG_S3_CR, CR_CLOSE);
    72f2:	97 e0       	ldi	r25, 0x07	; 7
    72f4:	6d df       	rcall	.-294    	; 0x71d0 <netReadReg>
    72f6:	82 32       	cpi	r24, 0x22	; 34
    72f8:	31 f7       	brne	.-52     	; 0x72c6 <sockInit+0xe>
    72fa:	df 91       	pop	r29
		// If socket correctly opened continue
	} while(netReadReg(REG_S3_SR) != SOCK_UDP);
    72fc:	cf 91       	pop	r28
    72fe:	08 95       	ret

00007300 <processPacket>:
#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
{
    7300:	9f 92       	push	r9
    7302:	af 92       	push	r10
    7304:	bf 92       	push	r11
    7306:	cf 92       	push	r12
    7308:	df 92       	push	r13
    730a:	ef 92       	push	r14
    730c:	ff 92       	push	r15
    730e:	0f 93       	push	r16
    7310:	1f 93       	push	r17
    7312:	cf 93       	push	r28
    7314:	df 93       	push	r29
    7316:	cd b7       	in	r28, 0x3d	; 61
    7318:	de b7       	in	r29, 0x3e	; 62
    731a:	cc 50       	subi	r28, 0x0C	; 12
    731c:	d2 40       	sbci	r29, 0x02	; 2
    731e:	de bf       	out	0x3e, r29	; 62
    7320:	cd bf       	out	0x3d, r28	; 61
	if(packetSize >= 0x800) traceln("Tftp: Overflow");
	//  step();
#endif

	// Read data from chip to buffer
	readPointer = netReadWord(REG_S3_RX_RD0);
    7322:	88 e2       	ldi	r24, 0x28	; 40
    7324:	97 e0       	ldi	r25, 0x07	; 7
    7326:	6e df       	rcall	.-292    	; 0x7204 <netReadWord>
    7328:	00 97       	sbiw	r24, 0x00	; 0
#ifdef _DEBUGMORE_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
    732a:	11 f4       	brne	.+4      	; 0x7330 <processPacket+0x30>
    732c:	80 e0       	ldi	r24, 0x00	; 0
    732e:	98 e7       	ldi	r25, 0x78	; 120
    7330:	8e 01       	movw	r16, r28
    7332:	0f 5f       	subi	r16, 0xFF	; 255
    7334:	1f 4f       	sbci	r17, 0xFF	; 255
    7336:	5e 01       	movw	r10, r28
    7338:	23 ef       	ldi	r18, 0xF3	; 243
    733a:	a2 1a       	sub	r10, r18
    733c:	2d ef       	ldi	r18, 0xFD	; 253
    733e:	b2 0a       	sbc	r11, r18
    7340:	68 01       	movw	r12, r16
    7342:	0a 15       	cp	r16, r10
	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    7344:	1b 05       	cpc	r17, r11
    7346:	89 f0       	breq	.+34     	; 0x736a <processPacket+0x6a>
    7348:	7c 01       	movw	r14, r24
		if((count == TFTP_PACKET_MAX_SIZE - 1) || (count == 0)) {
			traceln("Tftp: Reading from position ");
			tracenum(readPointer);
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
    734a:	ef ef       	ldi	r30, 0xFF	; 255
    734c:	ee 1a       	sub	r14, r30
    734e:	fe 0a       	sbc	r15, r30
    7350:	3f df       	rcall	.-386    	; 0x71d0 <netReadReg>
    7352:	f8 01       	movw	r30, r16
    7354:	81 93       	st	Z+, r24
    7356:	8f 01       	movw	r16, r30
    7358:	e1 14       	cp	r14, r1
    735a:	f0 e8       	ldi	r31, 0x80	; 128
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    735c:	ff 06       	cpc	r15, r31
    735e:	19 f4       	brne	.+6      	; 0x7366 <processPacket+0x66>
    7360:	e1 2c       	mov	r14, r1
    7362:	e8 e7       	ldi	r30, 0x78	; 120
    7364:	fe 2e       	mov	r15, r30
    7366:	c7 01       	movw	r24, r14
    7368:	ec cf       	rjmp	.-40     	; 0x7342 <processPacket+0x42>
    736a:	bc 01       	movw	r22, r24
    736c:	88 e2       	ldi	r24, 0x28	; 40
	}
	netWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
    736e:	97 e0       	ldi	r25, 0x07	; 7
    7370:	5d df       	rcall	.-326    	; 0x722c <netWriteWord>
    7372:	60 e4       	ldi	r22, 0x40	; 64
    7374:	81 e0       	ldi	r24, 0x01	; 1
    7376:	97 e0       	ldi	r25, 0x07	; 7
	netWriteReg(REG_S3_CR, CR_RECV);
    7378:	12 df       	rcall	.-476    	; 0x719e <netWriteReg>
    737a:	81 e0       	ldi	r24, 0x01	; 1
    737c:	97 e0       	ldi	r25, 0x07	; 7
    737e:	28 df       	rcall	.-432    	; 0x71d0 <netReadReg>
    7380:	81 11       	cpse	r24, r1
	while(netReadReg(REG_S3_CR));
    7382:	fb cf       	rjmp	.-10     	; 0x737a <processPacket+0x7a>
    7384:	76 01       	movw	r14, r12
    7386:	0c e0       	ldi	r16, 0x0C	; 12
    7388:	17 e0       	ldi	r17, 0x07	; 7
    738a:	f7 01       	movw	r30, r14
    738c:	61 91       	ld	r22, Z+
    738e:	7f 01       	movw	r14, r30
    7390:	c8 01       	movw	r24, r16
    7392:	05 df       	rcall	.-502    	; 0x719e <netWriteReg>
	traceln("Tftp: Setting return address");
#endif

	// Set up return IP address and port
	uint8_t i;
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);
    7394:	0f 5f       	subi	r16, 0xFF	; 255
    7396:	1f 4f       	sbci	r17, 0xFF	; 255
    7398:	02 31       	cpi	r16, 0x12	; 18
    739a:	f7 e0       	ldi	r31, 0x07	; 7
    739c:	1f 07       	cpc	r17, r31
    739e:	a9 f7       	brne	.-22     	; 0x738a <processPacket+0x8a>
    73a0:	0f 81       	ldd	r16, Y+7	; 0x07
    73a2:	10 e0       	ldi	r17, 0x00	; 0
    73a4:	10 2f       	mov	r17, r16
    73a6:	00 27       	eor	r16, r16
    73a8:	88 85       	ldd	r24, Y+8	; 0x08
    73aa:	08 0f       	add	r16, r24

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    73ac:	11 1d       	adc	r17, r1
    73ae:	89 85       	ldd	r24, Y+9	; 0x09
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	98 2f       	mov	r25, r24
    73b4:	88 27       	eor	r24, r24
    73b6:	2a 85       	ldd	r18, Y+10	; 0x0a
    73b8:	82 0f       	add	r24, r18
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
    73ba:	91 1d       	adc	r25, r1
    73bc:	eb 84       	ldd	r14, Y+11	; 0x0b
    73be:	f1 2c       	mov	r15, r1
    73c0:	fe 2c       	mov	r15, r14
    73c2:	ee 24       	eor	r14, r14
    73c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    73c6:	e2 0e       	add	r14, r18
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
    73c8:	f1 1c       	adc	r15, r1
    73ca:	83 30       	cpi	r24, 0x03	; 3
    73cc:	91 05       	cpc	r25, r1
    73ce:	81 f4       	brne	.+32     	; 0x73f0 <processPacket+0xf0>
    73d0:	29 e3       	ldi	r18, 0x39	; 57
    73d2:	e2 16       	cp	r14, r18
    73d4:	f1 04       	cpc	r15, r1
	tracenum(tftpOpcode);
	trace(" and data length ");
	tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
#endif

	if((tftpOpcode == TFTP_OPCODE_DATA)
    73d6:	98 f5       	brcc	.+102    	; 0x743e <processPacket+0x13e>
    73d8:	80 91 1e 01 	lds	r24, 0x011E
		&& ((tftpBlock > MAX_ADDR/0x200)
    73dc:	90 91 1f 01 	lds	r25, 0x011F
    73e0:	e8 16       	cp	r14, r24
    73e2:	f9 06       	cpc	r15, r25
		|| (tftpBlock < highPacket)
    73e4:	60 f1       	brcs	.+88     	; 0x743e <processPacket+0x13e>
    73e6:	01 96       	adiw	r24, 0x01	; 1
    73e8:	8e 15       	cp	r24, r14
    73ea:	9f 05       	cpc	r25, r15
    73ec:	40 f1       	brcs	.+80     	; 0x743e <processPacket+0x13e>
    73ee:	23 c0       	rjmp	.+70     	; 0x7436 <processPacket+0x136>
    73f0:	05 30       	cpi	r16, 0x05	; 5
		|| (tftpBlock > highPacket+1))) tftpOpcode = TFTP_OPCODE_UKN;
    73f2:	12 40       	sbci	r17, 0x02	; 2
    73f4:	20 f5       	brcc	.+72     	; 0x743e <processPacket+0x13e>
    73f6:	84 30       	cpi	r24, 0x04	; 4
    73f8:	91 05       	cpc	r25, r1
    73fa:	d0 f4       	brcc	.+52     	; 0x7430 <processPacket+0x130>
	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE)) tftpOpcode = TFTP_OPCODE_UKN;
    73fc:	81 30       	cpi	r24, 0x01	; 1
    73fe:	91 05       	cpc	r25, r1
    7400:	31 f1       	breq	.+76     	; 0x744e <processPacket+0x14e>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7402:	02 97       	sbiw	r24, 0x02	; 2
    7404:	e1 f4       	brne	.+56     	; 0x743e <processPacket+0x13e>
    7406:	01 d2       	rcall	.+1026   	; 0x780a <resetTick>
    7408:	6f ef       	ldi	r22, 0xFF	; 255
    740a:	82 e0       	ldi	r24, 0x02	; 2
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	25 d3       	rcall	.+1610   	; 0x7a5a <__eewr_byte_m328p>
    7410:	80 91 26 01 	lds	r24, 0x0126
#endif
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
    7414:	90 91 27 01 	lds	r25, 0x0127
#ifdef _VERBOSE
			traceln("Tftp: Write request");
#endif
			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
    7418:	4f df       	rcall	.-354    	; 0x72b8 <sockInit>
    741a:	10 92 1f 01 	sts	0x011F, r1
    741e:	10 92 1e 01 	sts	0x011E, r1

#ifdef _TFTP_RANDOM_PORT
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    7422:	10 92 21 01 	sts	0x0121, r1
    7426:	10 92 20 01 	sts	0x0120, r1
    742a:	42 e0       	ldi	r20, 0x02	; 2
#else
			tracenum(tftpTransferPort);
#endif
#endif

			lastPacket = highPacket = 0;
    742c:	b4 2e       	mov	r11, r20
    742e:	8e c0       	rjmp	.+284    	; 0x754c <processPacket+0x24c>
    7430:	06 97       	sbiw	r24, 0x06	; 6
    7432:	68 f0       	brcs	.+26     	; 0x744e <processPacket+0x14e>
    7434:	04 c0       	rjmp	.+8      	; 0x743e <processPacket+0x13e>
    7436:	05 30       	cpi	r16, 0x05	; 5
    7438:	82 e0       	ldi	r24, 0x02	; 2
    743a:	18 07       	cpc	r17, r24
			returnCode = ACK; // Send back acknowledge for packet 0
    743c:	50 f0       	brcs	.+20     	; 0x7452 <processPacket+0x152>
    743e:	80 91 26 01 	lds	r24, 0x0126

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7442:	90 91 27 01 	lds	r25, 0x0127
    7446:	38 df       	rcall	.-400    	; 0x72b8 <sockInit>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR/0x200)
		|| (tftpBlock < highPacket)
		|| (tftpBlock > highPacket+1))) tftpOpcode = TFTP_OPCODE_UKN;
	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE)) tftpOpcode = TFTP_OPCODE_UKN;
    7448:	bb 24       	eor	r11, r11
    744a:	b3 94       	inc	r11
    744c:	7f c0       	rjmp	.+254    	; 0x754c <processPacket+0x24c>
    744e:	b1 2c       	mov	r11, r1
#endif

#ifdef _TFTP_RANDOM_PORT
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    7450:	7d c0       	rjmp	.+250    	; 0x754c <processPacket+0x24c>
    7452:	db d1       	rcall	.+950    	; 0x780a <resetTick>
    7454:	04 50       	subi	r16, 0x04	; 4
    7456:	11 09       	sbc	r17, r1
    7458:	f0 92 21 01 	sts	0x0121, r15
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
    745c:	e0 92 20 01 	sts	0x0120, r14
			break;
    7460:	f1 e0       	ldi	r31, 0x01	; 1
		&& ((tftpBlock > MAX_ADDR/0x200)
		|| (tftpBlock < highPacket)
		|| (tftpBlock > highPacket+1))) tftpOpcode = TFTP_OPCODE_UKN;
	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE)) tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
    7462:	ef 1a       	sub	r14, r31
    7464:	f1 08       	sbc	r15, r1
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
    7466:	fe 2c       	mov	r15, r14
    7468:	ee 24       	eor	r14, r14

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
    746a:	ff 0c       	add	r15, r15
    746c:	a7 01       	movw	r20, r14
			lastPacket = tftpBlock;
    746e:	60 e0       	ldi	r22, 0x00	; 0
    7470:	70 e0       	ldi	r23, 0x00	; 0
    7472:	db 01       	movw	r26, r22
    7474:	ca 01       	movw	r24, r20
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
    7476:	80 0f       	add	r24, r16
    7478:	91 1f       	adc	r25, r17
    747a:	a1 1d       	adc	r26, r1
    747c:	b1 1d       	adc	r27, r1
    747e:	81 30       	cpi	r24, 0x01	; 1
    7480:	90 47       	sbci	r25, 0x70	; 112
    7482:	a1 05       	cpc	r26, r1
    7484:	b1 05       	cpc	r27, r1
    7486:	08 f0       	brcs	.+2      	; 0x748a <processPacket+0x18a>
#ifdef _DEBUGMORE_TFTP
			traceln("Tftp: Data for block ");
			tracenum(lastPacket);
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    7488:	5f c0       	rjmp	.+190    	; 0x7548 <processPacket+0x248>
    748a:	01 15       	cp	r16, r1
    748c:	82 e0       	ldi	r24, 0x02	; 2
    748e:	18 07       	cpc	r17, r24
    7490:	18 f4       	brcc	.+6      	; 0x7498 <processPacket+0x198>
    7492:	24 e0       	ldi	r18, 0x04	; 4
    7494:	b2 2e       	mov	r11, r18
    7496:	02 c0       	rjmp	.+4      	; 0x749c <processPacket+0x19c>
    7498:	92 e0       	ldi	r25, 0x02	; 2
    749a:	b9 2e       	mov	r11, r25
    749c:	c8 01       	movw	r24, r16
    749e:	8f 77       	andi	r24, 0x7F	; 127
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
    74a0:	99 27       	eor	r25, r25
    74a2:	89 2b       	or	r24, r25
    74a4:	19 f0       	breq	.+6      	; 0x74ac <processPacket+0x1ac>
    74a6:	0f 5f       	subi	r16, 0xFF	; 255
    74a8:	1f 4f       	sbci	r17, 0xFF	; 255
    74aa:	f8 cf       	rjmp	.-16     	; 0x749c <processPacket+0x19c>
    74ac:	45 2b       	or	r20, r21
				else returnCode = ACK;
    74ae:	46 2b       	or	r20, r22
    74b0:	47 2b       	or	r20, r23

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    74b2:	59 f0       	breq	.+22     	; 0x74ca <processPacket+0x1ca>
    74b4:	de 01       	movw	r26, r28
    74b6:	1d 96       	adiw	r26, 0x0d	; 13
    74b8:	20 e0       	ldi	r18, 0x00	; 0
    74ba:	30 e0       	ldi	r19, 0x00	; 0
    74bc:	61 e0       	ldi	r22, 0x01	; 1
    74be:	73 e0       	ldi	r23, 0x03	; 3
    74c0:	f5 e0       	ldi	r31, 0x05	; 5
#ifdef _DEBUG_TFTP
				traceln("Tftp: Packet length adjusted to ");
				tracenum(packetLength);
#endif
				if(writeAddr == 0) {
    74c2:	af 2e       	mov	r10, r31
    74c4:	81 e1       	ldi	r24, 0x11	; 17
    74c6:	98 2e       	mov	r9, r24
    74c8:	34 c0       	rjmp	.+104    	; 0x7532 <processPacket+0x232>
    74ca:	ce 01       	movw	r24, r28
    74cc:	0d 96       	adiw	r24, 0x0d	; 13
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    74ce:	29 d1       	rcall	.+594    	; 0x7722 <validImage>
    74d0:	81 11       	cpse	r24, r1
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    74d2:	f0 cf       	rjmp	.-32     	; 0x74b4 <processPacket+0x1b4>
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    74d4:	85 e0       	ldi	r24, 0x05	; 5
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    74d6:	b8 2e       	mov	r11, r24
    74d8:	39 c0       	rjmp	.+114    	; 0x754c <processPacket+0x24c>
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    74da:	f6 01       	movw	r30, r12
    74dc:	e2 0f       	add	r30, r18
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    74de:	f3 1f       	adc	r31, r19
				traceln("Tftp: Packet length adjusted to ");
				tracenum(packetLength);
#endif
				if(writeAddr == 0) {
					// First sector - validate
					if(!validImage(pageBase)) {
    74e0:	45 85       	ldd	r20, Z+13	; 0x0d
    74e2:	50 e0       	ldi	r21, 0x00	; 0
    74e4:	54 2f       	mov	r21, r20
    74e6:	44 27       	eor	r20, r20
    74e8:	8c 91       	ld	r24, X
    74ea:	48 2b       	or	r20, r24
						returnCode = INVALID_IMAGE;
    74ec:	f7 01       	movw	r30, r14
    74ee:	0a 01       	movw	r0, r20
    74f0:	60 93 57 00 	sts	0x0057, r22
    74f4:	e8 95       	spm
    74f6:	11 24       	eor	r1, r1
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    74f8:	2e 5f       	subi	r18, 0xFE	; 254
    74fa:	3f 4f       	sbci	r19, 0xFF	; 255
    74fc:	c9 01       	movw	r24, r18
    74fe:	8f 77       	andi	r24, 0x7F	; 127
    7500:	99 27       	eor	r25, r25
    7502:	89 2b       	or	r24, r25
					boot_page_fill(writeAddr + offset, writeValue);
    7504:	91 f4       	brne	.+36     	; 0x752a <processPacket+0x22a>
    7506:	f7 01       	movw	r30, r14
    7508:	ee 57       	subi	r30, 0x7E	; 126
    750a:	f1 09       	sbc	r31, r1
    750c:	70 93 57 00 	sts	0x0057, r23
						tracenum(writeValue);
						trace(" at offset ");
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
    7510:	e8 95       	spm
    7512:	07 b6       	in	r0, 0x37	; 55
					if(offset % SPM_PAGESIZE == 0) {
    7514:	00 fc       	sbrc	r0, 0
    7516:	fd cf       	rjmp	.-6      	; 0x7512 <processPacket+0x212>
    7518:	a0 92 57 00 	sts	0x0057, r10
    751c:	e8 95       	spm
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    751e:	07 b6       	in	r0, 0x37	; 55
    7520:	00 fc       	sbrc	r0, 0
    7522:	fd cf       	rjmp	.-6      	; 0x751e <processPacket+0x21e>
    7524:	90 92 57 00 	sts	0x0057, r9
    7528:	e8 95       	spm
						boot_spm_busy_wait();
    752a:	12 96       	adiw	r26, 0x02	; 2
    752c:	f2 e0       	ldi	r31, 0x02	; 2
    752e:	ef 0e       	add	r14, r31
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7530:	f1 1c       	adc	r15, r1
    7532:	20 17       	cp	r18, r16
    7534:	31 07       	cpc	r19, r17
						boot_spm_busy_wait();
    7536:	88 f2       	brcs	.-94     	; 0x74da <processPacket+0x1da>
    7538:	24 e0       	ldi	r18, 0x04	; 4
    753a:	b2 12       	cpse	r11, r18
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    753c:	07 c0       	rjmp	.+14     	; 0x754c <processPacket+0x24c>
    753e:	6e ee       	ldi	r22, 0xEE	; 238
    7540:	82 e0       	ldi	r24, 0x02	; 2
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	8a d2       	rcall	.+1300   	; 0x7a5a <__eewr_byte_m328p>
    7546:	02 c0       	rjmp	.+4      	; 0x754c <processPacket+0x24c>
    7548:	93 e0       	ldi	r25, 0x03	; 3
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    754a:	b9 2e       	mov	r11, r25
    754c:	8b 2d       	mov	r24, r11
    754e:	c4 5f       	subi	r28, 0xF4	; 244
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
    7550:	dd 4f       	sbci	r29, 0xFD	; 253
    7552:	de bf       	out	0x3e, r29	; 62
    7554:	cd bf       	out	0x3d, r28	; 61
					// Hand over to application
#ifdef _VERBOSE
					traceln("Tftp: Flash is complete");
#endif
					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7556:	df 91       	pop	r29
    7558:	cf 91       	pop	r28
    755a:	1f 91       	pop	r17
    755c:	0f 91       	pop	r16
    755e:	ff 90       	pop	r15
    7560:	ef 90       	pop	r14
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.
#ifdef _VERBOSE
				traceln("Tftp: Flash is full");
#endif
				returnCode = ERROR_FULL;
    7562:	df 90       	pop	r13
    7564:	cf 90       	pop	r12
			returnCode = ERROR_INVALID;
			break;

	}
	return(returnCode);
}
    7566:	bf 90       	pop	r11
    7568:	af 90       	pop	r10
    756a:	9f 90       	pop	r9
    756c:	08 95       	ret

0000756e <sendResponse>:


void sendResponse(uint16_t response)
{
    756e:	bf 92       	push	r11
    7570:	cf 92       	push	r12
    7572:	df 92       	push	r13
    7574:	ef 92       	push	r14
    7576:	ff 92       	push	r15
    7578:	0f 93       	push	r16
    757a:	1f 93       	push	r17
    757c:	cf 93       	push	r28
    757e:	df 93       	push	r29
    7580:	cd b7       	in	r28, 0x3d	; 61
    7582:	de b7       	in	r29, 0x3e	; 62
    7584:	c4 56       	subi	r28, 0x64	; 100
    7586:	d1 09       	sbc	r29, r1
    7588:	de bf       	out	0x3e, r29	; 62
    758a:	cd bf       	out	0x3d, r28	; 61
    758c:	8c 01       	movw	r16, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = netReadWord(REG_S3_TX_WR0) + S3_TX_START;
    758e:	84 e2       	ldi	r24, 0x24	; 36
    7590:	97 e0       	ldi	r25, 0x07	; 7
    7592:	38 de       	rcall	.-912    	; 0x7204 <netReadWord>
    7594:	98 5a       	subi	r25, 0xA8	; 168
    7596:	7c 01       	movw	r14, r24
    7598:	02 30       	cpi	r16, 0x02	; 2
	switch(response) {
    759a:	11 05       	cpc	r17, r1
    759c:	59 f1       	breq	.+86     	; 0x75f4 <sendResponse+0x86>
    759e:	20 f4       	brcc	.+8      	; 0x75a8 <sendResponse+0x3a>
    75a0:	01 30       	cpi	r16, 0x01	; 1
    75a2:	11 05       	cpc	r17, r1
    75a4:	a9 f0       	breq	.+42     	; 0x75d0 <sendResponse+0x62>
    75a6:	06 c0       	rjmp	.+12     	; 0x75b4 <sendResponse+0x46>
    75a8:	03 30       	cpi	r16, 0x03	; 3
    75aa:	11 05       	cpc	r17, r1
    75ac:	d1 f0       	breq	.+52     	; 0x75e2 <sendResponse+0x74>
    75ae:	04 30       	cpi	r16, 0x04	; 4
    75b0:	11 05       	cpc	r17, r1
    75b2:	79 f1       	breq	.+94     	; 0x7612 <sendResponse+0xa4>
    75b4:	4a e0       	ldi	r20, 0x0A	; 10
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    75b6:	50 e0       	ldi	r21, 0x00	; 0
    75b8:	60 e8       	ldi	r22, 0x80	; 128
    75ba:	70 e7       	ldi	r23, 0x70	; 112
    75bc:	ce 01       	movw	r24, r28
    75be:	01 96       	adiw	r24, 0x01	; 1
    75c0:	3b d2       	rcall	.+1142   	; 0x7a38 <memcpy_P>
    75c2:	8a e0       	ldi	r24, 0x0A	; 10
    75c4:	8e 01       	movw	r16, r28
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    75c6:	0f 5f       	subi	r16, 0xFF	; 255
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    75c8:	1f 4f       	sbci	r17, 0xFF	; 255
    75ca:	b8 2e       	mov	r11, r24
    75cc:	b0 0e       	add	r11, r16
    75ce:	3d c0       	rjmp	.+122    	; 0x764a <sendResponse+0xdc>
    75d0:	4c e0       	ldi	r20, 0x0C	; 12
    75d2:	50 e0       	ldi	r21, 0x00	; 0
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    75d4:	65 e9       	ldi	r22, 0x95	; 149
    75d6:	70 e7       	ldi	r23, 0x70	; 112
    75d8:	ce 01       	movw	r24, r28
    75da:	01 96       	adiw	r24, 0x01	; 1
    75dc:	2d d2       	rcall	.+1114   	; 0x7a38 <memcpy_P>
    75de:	8c e0       	ldi	r24, 0x0C	; 12
    75e0:	f1 cf       	rjmp	.-30     	; 0x75c4 <sendResponse+0x56>
    75e2:	49 e0       	ldi	r20, 0x09	; 9
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    75e4:	50 e0       	ldi	r21, 0x00	; 0
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;
    75e6:	6b e8       	ldi	r22, 0x8B	; 139

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    75e8:	70 e7       	ldi	r23, 0x70	; 112
    75ea:	ce 01       	movw	r24, r28
    75ec:	01 96       	adiw	r24, 0x01	; 1
    75ee:	24 d2       	rcall	.+1096   	; 0x7a38 <memcpy_P>
    75f0:	89 e0       	ldi	r24, 0x09	; 9
    75f2:	e8 cf       	rjmp	.-48     	; 0x75c4 <sendResponse+0x56>
    75f4:	80 91 20 01 	lds	r24, 0x0120
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    75f8:	90 91 21 01 	lds	r25, 0x0121
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
    75fc:	20 91 1e 01 	lds	r18, 0x011E
    7600:	30 91 1f 01 	lds	r19, 0x011F
    7604:	28 17       	cp	r18, r24
    7606:	39 07       	cpc	r19, r25
    7608:	20 f4       	brcc	.+8      	; 0x7612 <sendResponse+0xa4>
    760a:	90 93 1f 01 	sts	0x011F, r25
    760e:	80 93 1e 01 	sts	0x011E, r24
    7612:	19 82       	std	Y+1, r1	; 0x01
    7614:	84 e0       	ldi	r24, 0x04	; 4
    7616:	8a 83       	std	Y+2, r24	; 0x02
    7618:	80 91 20 01 	lds	r24, 0x0120
#ifdef _DEBUG_TFTP
			if(response == FINAL_ACK) traceln("Tftp: Sent Final ACK ");
#endif
			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    761c:	90 91 21 01 	lds	r25, 0x0121
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    7620:	9b 83       	std	Y+3, r25	; 0x03
    7622:	8c 83       	std	Y+4, r24	; 0x04
    7624:	84 e0       	ldi	r24, 0x04	; 4
    7626:	ce cf       	rjmp	.-100    	; 0x75c4 <sendResponse+0x56>
    7628:	f8 01       	movw	r30, r16
			*txPtr = lastPacket & 0xff;
    762a:	61 91       	ld	r22, Z+
#endif
		case FINAL_ACK:
#ifdef _DEBUG_TFTP
			if(response == FINAL_ACK) traceln("Tftp: Sent Final ACK ");
#endif
			packetLength = 4;
    762c:	8f 01       	movw	r16, r30
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
			*txPtr = lastPacket & 0xff;
			break;
    762e:	67 01       	movw	r12, r14
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
    7630:	ff ef       	ldi	r31, 0xFF	; 255
    7632:	cf 1a       	sub	r12, r31
    7634:	df 0a       	sbc	r13, r31
    7636:	c7 01       	movw	r24, r14
    7638:	b2 dd       	rcall	.-1180   	; 0x719e <netWriteReg>
    763a:	c1 14       	cp	r12, r1
    763c:	80 e6       	ldi	r24, 0x60	; 96
    763e:	d8 06       	cpc	r13, r24
    7640:	19 f4       	brne	.+6      	; 0x7648 <sendResponse+0xda>
    7642:	c1 2c       	mov	r12, r1
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    7644:	f8 e5       	ldi	r31, 0x58	; 88
    7646:	df 2e       	mov	r13, r31
    7648:	76 01       	movw	r14, r12
    764a:	b0 12       	cpse	r11, r16
    764c:	ed cf       	rjmp	.-38     	; 0x7628 <sendResponse+0xba>
    764e:	b7 01       	movw	r22, r14
    7650:	78 55       	subi	r23, 0x58	; 88
    7652:	84 e2       	ldi	r24, 0x24	; 36
			*txPtr = lastPacket & 0xff;
			break;
	}

	txPtr = txBuffer;
	while(packetLength--) {
    7654:	97 e0       	ldi	r25, 0x07	; 7
    7656:	ea dd       	rcall	.-1068   	; 0x722c <netWriteWord>
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}
	netWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
    7658:	60 e2       	ldi	r22, 0x20	; 32
    765a:	81 e0       	ldi	r24, 0x01	; 1
    765c:	97 e0       	ldi	r25, 0x07	; 7
    765e:	9f dd       	rcall	.-1218   	; 0x719e <netWriteReg>
    7660:	81 e0       	ldi	r24, 0x01	; 1
    7662:	97 e0       	ldi	r25, 0x07	; 7
	netWriteReg(REG_S3_CR, CR_SEND);
    7664:	b5 dd       	rcall	.-1174   	; 0x71d0 <netReadReg>
    7666:	81 11       	cpse	r24, r1
    7668:	fb cf       	rjmp	.-10     	; 0x7660 <sendResponse+0xf2>
    766a:	cc 59       	subi	r28, 0x9C	; 156
    766c:	df 4f       	sbci	r29, 0xFF	; 255
	while(netReadReg(REG_S3_CR));
    766e:	de bf       	out	0x3e, r29	; 62
    7670:	cd bf       	out	0x3d, r28	; 61
    7672:	df 91       	pop	r29
    7674:	cf 91       	pop	r28
    7676:	1f 91       	pop	r17
    7678:	0f 91       	pop	r16
#ifdef _VERBOSE
	traceln("Tftp: Response sent");
#endif
}
    767a:	ff 90       	pop	r15
    767c:	ef 90       	pop	r14
    767e:	df 90       	pop	r13
    7680:	cf 90       	pop	r12
    7682:	bf 90       	pop	r11
    7684:	08 95       	ret

00007686 <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit()
{
    7686:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
    7688:	85 e4       	ldi	r24, 0x45	; 69
    768a:	90 e0       	ldi	r25, 0x00	; 0
    768c:	15 de       	rcall	.-982    	; 0x72b8 <sockInit>
    768e:	87 e1       	ldi	r24, 0x17	; 23

#ifndef _TFTP_RANDOM_PORT
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
    7690:	90 e0       	ldi	r25, 0x00	; 0
    7692:	db d1       	rcall	.+950    	; 0x7a4a <__eerd_byte_m328p>
    7694:	8b 3b       	cpi	r24, 0xBB	; 187
    7696:	91 f4       	brne	.+36     	; 0x76bc <tftpInit+0x36>
    7698:	89 e1       	ldi	r24, 0x19	; 25
    769a:	90 e0       	ldi	r25, 0x00	; 0
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
    769c:	d6 d1       	rcall	.+940    	; 0x7a4a <__eerd_byte_m328p>
    769e:	c8 2f       	mov	r28, r24
    76a0:	88 e1       	ldi	r24, 0x18	; 24
    76a2:	90 e0       	ldi	r25, 0x00	; 0
    76a4:	d2 d1       	rcall	.+932    	; 0x7a4a <__eerd_byte_m328p>
    76a6:	2c 2f       	mov	r18, r28
    76a8:	30 e0       	ldi	r19, 0x00	; 0
    76aa:	32 2f       	mov	r19, r18
    76ac:	22 27       	eor	r18, r18
    76ae:	28 0f       	add	r18, r24
    76b0:	31 1d       	adc	r19, r1
    76b2:	30 93 27 01 	sts	0x0127, r19
    76b6:	20 93 26 01 	sts	0x0126, r18
    76ba:	06 c0       	rjmp	.+12     	; 0x76c8 <tftpInit+0x42>
    76bc:	89 e7       	ldi	r24, 0x79	; 121
    76be:	97 eb       	ldi	r25, 0xB7	; 183
    76c0:	90 93 27 01 	sts	0x0127, r25
	else
		tftpTransferPort = TFTP_STATIC_PORT;
    76c4:	80 93 26 01 	sts	0x0126, r24
    76c8:	cf 91       	pop	r28
    76ca:	08 95       	ret

000076cc <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll()
{
    76cc:	cf 93       	push	r28
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);
    76ce:	86 e2       	ldi	r24, 0x26	; 38
    76d0:	97 e0       	ldi	r25, 0x07	; 7
    76d2:	98 dd       	rcall	.-1232   	; 0x7204 <netReadWord>
    76d4:	89 2b       	or	r24, r25
// 			_delay_ms(400);
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
    76d6:	11 f4       	brne	.+4      	; 0x76dc <tftpPoll+0x10>
    76d8:	81 e0       	ldi	r24, 0x01	; 1
		netWriteReg(REG_S3_CR, CR_CLOSE);
		// Complete
		return(0);
	}
	// Tftp continues
	return(1);
    76da:	21 c0       	rjmp	.+66     	; 0x771e <tftpPoll+0x52>
    76dc:	81 e0       	ldi	r24, 0x01	; 1
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
    76de:	80 93 29 01 	sts	0x0129, r24
    76e2:	82 e0       	ldi	r24, 0x02	; 2

		while((netReadReg(REG_S3_IR) & IR_RECV)) {
    76e4:	97 e0       	ldi	r25, 0x07	; 7
    76e6:	74 dd       	rcall	.-1304   	; 0x71d0 <netReadReg>
    76e8:	82 ff       	sbrs	r24, 2
    76ea:	0e c0       	rjmp	.+28     	; 0x7708 <tftpPoll+0x3c>
    76ec:	64 e0       	ldi	r22, 0x04	; 4
    76ee:	82 e0       	ldi	r24, 0x02	; 2
			netWriteReg(REG_S3_IR, IR_RECV);
    76f0:	97 e0       	ldi	r25, 0x07	; 7
    76f2:	55 dd       	rcall	.-1366   	; 0x719e <netWriteReg>
    76f4:	2f ef       	ldi	r18, 0xFF	; 255
    76f6:	87 e8       	ldi	r24, 0x87	; 135
    76f8:	93 e1       	ldi	r25, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    76fa:	21 50       	subi	r18, 0x01	; 1
    76fc:	80 40       	sbci	r24, 0x00	; 0
    76fe:	90 40       	sbci	r25, 0x00	; 0
    7700:	e1 f7       	brne	.-8      	; 0x76fa <tftpPoll+0x2e>
    7702:	00 c0       	rjmp	.+0      	; 0x7704 <tftpPoll+0x38>
    7704:	00 00       	nop
    7706:	ed cf       	rjmp	.-38     	; 0x76e2 <tftpPoll+0x16>
    7708:	fb dd       	rcall	.-1034   	; 0x7300 <processPacket>
    770a:	c8 2f       	mov	r28, r24
    770c:	90 e0       	ldi	r25, 0x00	; 0
		// Process Packet and get TFTP response code
#ifdef _DEBUG_TFTP
		packetSize = netReadWord(REG_S3_RX_RSR0);
		response = processPacket(packetSize);
#else
		response = processPacket();
    770e:	2f df       	rcall	.-418    	; 0x756e <sendResponse>
    7710:	c4 30       	cpi	r28, 0x04	; 4
    7712:	11 f7       	brne	.-60     	; 0x76d8 <tftpPoll+0xc>
#endif
		// Send the response
		sendResponse(response);
    7714:	60 e1       	ldi	r22, 0x10	; 16
    7716:	81 e0       	ldi	r24, 0x01	; 1
    7718:	97 e0       	ldi	r25, 0x07	; 7
	}
	if(response == FINAL_ACK) {
    771a:	41 dd       	rcall	.-1406   	; 0x719e <netWriteReg>
    771c:	80 e0       	ldi	r24, 0x00	; 0
		netWriteReg(REG_S3_CR, CR_CLOSE);
    771e:	cf 91       	pop	r28
    7720:	08 95       	ret

00007722 <validImage>:
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t* base)
{
    7722:	20 e0       	ldi	r18, 0x00	; 0
    7724:	30 e0       	ldi	r19, 0x00	; 0
    7726:	fc 01       	movw	r30, r24
    7728:	e2 0f       	add	r30, r18
    772a:	f3 1f       	adc	r31, r19
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    772c:	40 81       	ld	r20, Z
    772e:	4c 30       	cpi	r20, 0x0C	; 12
    7730:	51 f4       	brne	.+20     	; 0x7746 <validImage+0x24>
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
		}
		if(base[i + 1] != 0x94) {
    7732:	41 81       	ldd	r20, Z+1	; 0x01
    7734:	44 39       	cpi	r20, 0x94	; 148
    7736:	39 f4       	brne	.+14     	; 0x7746 <validImage+0x24>
    7738:	2c 5f       	subi	r18, 0xFC	; 252
    773a:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    773c:	24 33       	cpi	r18, 0x34	; 52
    773e:	31 05       	cpc	r19, r1
    7740:	91 f7       	brne	.-28     	; 0x7726 <validImage+0x4>
		}
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
    7742:	81 e0       	ldi	r24, 0x01	; 1
}
    7744:	08 95       	ret
			tracenum(i);
			trace(" with ");
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
    7746:	80 e0       	ldi	r24, 0x00	; 0
    7748:	08 95       	ret

0000774a <watchdogDisable>:
 */
uint8_t watchdogDisable(void)
{
	uint8_t mcusr_mirror;

	mcusr_mirror = MCUSR;
    774a:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
    774c:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    774e:	98 e1       	ldi	r25, 0x18	; 24
    7750:	0f b6       	in	r0, 0x3f	; 63
    7752:	f8 94       	cli
    7754:	90 93 60 00 	sts	0x0060, r25
    7758:	10 92 60 00 	sts	0x0060, r1
    775c:	0f be       	out	0x3f, r0	; 63

	return(mcusr_mirror);
}
    775e:	08 95       	ret

00007760 <watchdogReset>:

void watchdogReset(void)
{
	wdt_reset();
    7760:	a8 95       	wdr
    7762:	08 95       	ret

00007764 <watchdogConfig>:
}

void watchdogConfig(uint8_t x)
{
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7764:	e0 e6       	ldi	r30, 0x60	; 96
    7766:	f0 e0       	ldi	r31, 0x00	; 0
    7768:	98 e1       	ldi	r25, 0x18	; 24
    776a:	90 83       	st	Z, r25
	WDTCSR = x;
    776c:	80 83       	st	Z, r24
    776e:	08 95       	ret

00007770 <serialInit>:
#include "pin_defs.h"


void serialInit()
{
	UCSR0A = _BV(U2X0); //Double speed mode USART0
    7770:	82 e0       	ldi	r24, 0x02	; 2
    7772:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7776:	88 e1       	ldi	r24, 0x18	; 24
    7778:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    777c:	86 e0       	ldi	r24, 0x06	; 6
    777e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    7782:	80 e1       	ldi	r24, 0x10	; 16
    7784:	80 93 c4 00 	sts	0x00C4, r24
    7788:	08 95       	ret

0000778a <putch>:
}


void putch(uint8_t c)
{
	while(!(UCSR0A & _BV(UDRE0)));
    778a:	90 91 c0 00 	lds	r25, 0x00C0
    778e:	95 ff       	sbrs	r25, 5
    7790:	fc cf       	rjmp	.-8      	; 0x778a <putch>
	UDR0 = c;
    7792:	80 93 c6 00 	sts	0x00C6, r24
    7796:	08 95       	ret

00007798 <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
    7798:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    779a:	8a 30       	cpi	r24, 0x0A	; 10
    779c:	08 f0       	brcs	.+2      	; 0x77a0 <puthex+0x8>
    779e:	89 5f       	subi	r24, 0xF9	; 249
	while(!(UCSR0A & _BV(UDRE0)));
    77a0:	90 91 c0 00 	lds	r25, 0x00C0
    77a4:	95 ff       	sbrs	r25, 5
    77a6:	fc cf       	rjmp	.-8      	; 0x77a0 <puthex+0x8>
	UDR0 = c + '0';
    77a8:	80 5d       	subi	r24, 0xD0	; 208
    77aa:	80 93 c6 00 	sts	0x00C6, r24
    77ae:	08 95       	ret

000077b0 <getch>:

uint8_t getch(void)
{
	uint8_t ch;

	while(!(UCSR0A & _BV(RXC0)));
    77b0:	80 91 c0 00 	lds	r24, 0x00C0
    77b4:	87 ff       	sbrs	r24, 7
    77b6:	fc cf       	rjmp	.-8      	; 0x77b0 <getch>
	if(!(UCSR0A & _BV(FE0))) {
    77b8:	80 91 c0 00 	lds	r24, 0x00C0
    77bc:	84 ff       	sbrs	r24, 4
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		watchdogReset();
    77be:	d0 df       	rcall	.-96     	; 0x7760 <watchdogReset>
    77c0:	80 91 c6 00 	lds	r24, 0x00C6
	}
	ch = UDR0;
    77c4:	08 95       	ret

000077c6 <updateLed>:
uint16_t tick = 0;


void updateLed(void)
{
	uint16_t nextTimer1 = TCNT1;
    77c6:	80 91 84 00 	lds	r24, 0x0084
    77ca:	90 91 85 00 	lds	r25, 0x0085
	if(nextTimer1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    77ce:	92 ff       	sbrs	r25, 2
    77d0:	05 c0       	rjmp	.+10     	; 0x77dc <updateLed+0x16>
    77d2:	25 b1       	in	r18, 0x05	; 5
    77d4:	30 e2       	ldi	r19, 0x20	; 32
    77d6:	23 27       	eor	r18, r19
    77d8:	25 b9       	out	0x05, r18	; 5
    77da:	01 c0       	rjmp	.+2      	; 0x77de <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    77dc:	2d 98       	cbi	0x05, 5	; 5
	if(nextTimer1 < lastTimer1) {
    77de:	20 91 2a 01 	lds	r18, 0x012A
    77e2:	30 91 2b 01 	lds	r19, 0x012B
    77e6:	82 17       	cp	r24, r18
    77e8:	93 07       	cpc	r25, r19
    77ea:	50 f4       	brcc	.+20     	; 0x7800 <updateLed+0x3a>
		tick++;
    77ec:	20 91 22 01 	lds	r18, 0x0122
    77f0:	30 91 23 01 	lds	r19, 0x0123
    77f4:	2f 5f       	subi	r18, 0xFF	; 255
    77f6:	3f 4f       	sbci	r19, 0xFF	; 255
    77f8:	30 93 23 01 	sts	0x0123, r19
    77fc:	20 93 22 01 	sts	0x0122, r18
		tracenum(nextTimer1);
		traceln(" lTM: ");
		tracenum(lastTimer1);
#endif
	}
	lastTimer1 = nextTimer1;
    7800:	90 93 2b 01 	sts	0x012B, r25
    7804:	80 93 2a 01 	sts	0x012A, r24
    7808:	08 95       	ret

0000780a <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
    780a:	10 92 85 00 	sts	0x0085, r1
    780e:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
    7812:	10 92 23 01 	sts	0x0123, r1
    7816:	10 92 22 01 	sts	0x0122, r1
    781a:	08 95       	ret

0000781c <timedOut>:
}

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
	if (pgm_read_word(0x0000) == 0xFFFF) return(0);
    781c:	e0 e0       	ldi	r30, 0x00	; 0
    781e:	f0 e0       	ldi	r31, 0x00	; 0
    7820:	85 91       	lpm	r24, Z+
    7822:	94 91       	lpm	r25, Z
    7824:	01 96       	adiw	r24, 0x01	; 1
    7826:	41 f0       	breq	.+16     	; 0x7838 <timedOut+0x1c>
	if(tick > TIMEOUT) return(1);
    7828:	81 e0       	ldi	r24, 0x01	; 1
    782a:	20 91 22 01 	lds	r18, 0x0122
    782e:	30 91 23 01 	lds	r19, 0x0123
    7832:	25 30       	cpi	r18, 0x05	; 5
    7834:	31 05       	cpc	r19, r1
    7836:	08 f4       	brcc	.+2      	; 0x783a <timedOut+0x1e>
}

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
	if (pgm_read_word(0x0000) == 0xFFFF) return(0);
    7838:	80 e0       	ldi	r24, 0x00	; 0
	if(tick > TIMEOUT) return(1);
	else return(0);
}
    783a:	08 95       	ret

0000783c <verifySpace>:
uint8_t  length;


void verifySpace()
{
	if(getch() != CRC_EOP) {
    783c:	b9 df       	rcall	.-142    	; 0x77b0 <getch>
    783e:	80 32       	cpi	r24, 0x20	; 32
    7840:	19 f0       	breq	.+6      	; 0x7848 <verifySpace+0xc>
    7842:	88 e0       	ldi	r24, 0x08	; 8
		watchdogConfig(WATCHDOG_16MS);	// shorten WD timeout
    7844:	8f df       	rcall	.-226    	; 0x7764 <watchdogConfig>
    7846:	ff cf       	rjmp	.-2      	; 0x7846 <verifySpace+0xa>
    7848:	84 e1       	ldi	r24, 0x14	; 20
    784a:	9f cf       	rjmp	.-194    	; 0x778a <putch>

0000784c <getNch>:
	putch(STK_INSYNC);
}


void getNch(uint8_t count)
{
    784c:	cf 93       	push	r28
    784e:	c8 2f       	mov	r28, r24
	do getch();
    7850:	af df       	rcall	.-162    	; 0x77b0 <getch>
    7852:	c1 50       	subi	r28, 0x01	; 1
	while(--count);
    7854:	e9 f7       	brne	.-6      	; 0x7850 <getNch+0x4>
    7856:	cf 91       	pop	r28
	verifySpace();
}
    7858:	f1 cf       	rjmp	.-30     	; 0x783c <verifySpace>

0000785a <proccessCommand>:


uint8_t proccessCommand()
{
    785a:	ef 92       	push	r14
    785c:	ff 92       	push	r15
    785e:	0f 93       	push	r16
    7860:	1f 93       	push	r17
    7862:	cf 93       	push	r28
    7864:	df 93       	push	r29
    7866:	cd b7       	in	r28, 0x3d	; 61
    7868:	de b7       	in	r29, 0x3e	; 62
    786a:	c1 50       	subi	r28, 0x01	; 1
    786c:	d1 40       	sbci	r29, 0x01	; 1
    786e:	de bf       	out	0x3e, r29	; 62
    7870:	cd bf       	out	0x3d, r28	; 61
	uint8_t ch;

	ch = getch();
    7872:	9e df       	rcall	.-196    	; 0x77b0 <getch>
    7874:	81 34       	cpi	r24, 0x41	; 65

	if(ch == STK_GET_PARAMETER) {
    7876:	a9 f4       	brne	.+42     	; 0x78a2 <proccessCommand+0x48>
    7878:	9b df       	rcall	.-202    	; 0x77b0 <getch>
		unsigned char which = getch();
    787a:	cf 5f       	subi	r28, 0xFF	; 255
    787c:	de 4f       	sbci	r29, 0xFE	; 254
		verifySpace();
    787e:	88 83       	st	Y, r24
    7880:	c1 50       	subi	r28, 0x01	; 1
    7882:	d1 40       	sbci	r29, 0x01	; 1
    7884:	db df       	rcall	.-74     	; 0x783c <verifySpace>
    7886:	cf 5f       	subi	r28, 0xFF	; 255
    7888:	de 4f       	sbci	r29, 0xFE	; 254
    788a:	88 81       	ld	r24, Y
		if(which == 0x82) {
    788c:	c1 50       	subi	r28, 0x01	; 1
    788e:	d1 40       	sbci	r29, 0x01	; 1
    7890:	82 38       	cpi	r24, 0x82	; 130
    7892:	11 f4       	brne	.+4      	; 0x7898 <proccessCommand+0x3e>
    7894:	84 e0       	ldi	r24, 0x04	; 4
    7896:	03 c0       	rjmp	.+6      	; 0x789e <proccessCommand+0x44>
    7898:	81 38       	cpi	r24, 0x81	; 129
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
    789a:	f9 f0       	breq	.+62     	; 0x78da <proccessCommand+0x80>
    789c:	83 e0       	ldi	r24, 0x03	; 3
		} else if(which == 0x81) {
    789e:	75 df       	rcall	.-278    	; 0x778a <putch>
    78a0:	b2 c0       	rjmp	.+356    	; 0x7a06 <proccessCommand+0x1ac>
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
    78a2:	82 34       	cpi	r24, 0x42	; 66
    78a4:	11 f4       	brne	.+4      	; 0x78aa <proccessCommand+0x50>
    78a6:	84 e1       	ldi	r24, 0x14	; 20
    78a8:	03 c0       	rjmp	.+6      	; 0x78b0 <proccessCommand+0x56>
		}
	} else if(ch == STK_SET_DEVICE) {
    78aa:	85 34       	cpi	r24, 0x45	; 69
    78ac:	19 f4       	brne	.+6      	; 0x78b4 <proccessCommand+0x5a>
		// SET DEVICE is ignored
		getNch(20);
    78ae:	84 e0       	ldi	r24, 0x04	; 4
    78b0:	cd df       	rcall	.-102    	; 0x784c <getNch>
	} else if(ch == STK_SET_DEVICE_EXT) {
    78b2:	a9 c0       	rjmp	.+338    	; 0x7a06 <proccessCommand+0x1ac>
    78b4:	85 35       	cpi	r24, 0x55	; 85
		// SET DEVICE EXT is ignored
		getNch(4);
    78b6:	69 f4       	brne	.+26     	; 0x78d2 <proccessCommand+0x78>
    78b8:	7b df       	rcall	.-266    	; 0x77b0 <getch>
    78ba:	18 2f       	mov	r17, r24
    78bc:	79 df       	rcall	.-270    	; 0x77b0 <getch>
	} else if(ch == STK_LOAD_ADDRESS) {
    78be:	21 2f       	mov	r18, r17
    78c0:	30 e0       	ldi	r19, 0x00	; 0
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    78c2:	38 2b       	or	r19, r24
    78c4:	22 0f       	add	r18, r18
    78c6:	33 1f       	adc	r19, r19
		newAddress = (newAddress & 0xff) | (getch() << 8);
    78c8:	30 93 25 01 	sts	0x0125, r19
    78cc:	20 93 24 01 	sts	0x0124, r18
    78d0:	99 c0       	rjmp	.+306    	; 0x7a04 <proccessCommand+0x1aa>
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    78d2:	86 35       	cpi	r24, 0x56	; 86
    78d4:	21 f4       	brne	.+8      	; 0x78de <proccessCommand+0x84>
		address = newAddress;
    78d6:	84 e0       	ldi	r24, 0x04	; 4
    78d8:	b9 df       	rcall	.-142    	; 0x784c <getNch>
    78da:	80 e0       	ldi	r24, 0x00	; 0
    78dc:	e0 cf       	rjmp	.-64     	; 0x789e <proccessCommand+0x44>
    78de:	84 36       	cpi	r24, 0x64	; 100
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    78e0:	09 f0       	breq	.+2      	; 0x78e4 <proccessCommand+0x8a>
    78e2:	60 c0       	rjmp	.+192    	; 0x79a4 <proccessCommand+0x14a>
		// UNIVERSAL command is ignored
		getNch(4);
    78e4:	65 df       	rcall	.-310    	; 0x77b0 <getch>
    78e6:	64 df       	rcall	.-312    	; 0x77b0 <getch>
    78e8:	80 93 2c 01 	sts	0x012C, r24
		putch(0x00);
    78ec:	61 df       	rcall	.-318    	; 0x77b0 <getch>
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    78ee:	e0 91 24 01 	lds	r30, 0x0124
    78f2:	f0 91 25 01 	lds	r31, 0x0125
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    78f6:	e1 15       	cp	r30, r1
		length = getch();
    78f8:	80 e7       	ldi	r24, 0x70	; 112
    78fa:	f8 07       	cpc	r31, r24
    78fc:	20 f4       	brcc	.+8      	; 0x7906 <proccessCommand+0xac>
    78fe:	83 e0       	ldi	r24, 0x03	; 3
		getch();
    7900:	80 93 57 00 	sts	0x0057, r24

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7904:	e8 95       	spm
    7906:	8e 01       	movw	r16, r28
    7908:	0f 5f       	subi	r16, 0xFF	; 255
    790a:	1f 4f       	sbci	r17, 0xFF	; 255
    790c:	78 01       	movw	r14, r16
    790e:	50 df       	rcall	.-352    	; 0x77b0 <getch>
    7910:	f8 01       	movw	r30, r16
    7912:	81 93       	st	Z+, r24
    7914:	8f 01       	movw	r16, r30
    7916:	80 91 2c 01 	lds	r24, 0x012C
    791a:	81 50       	subi	r24, 0x01	; 1
    791c:	80 93 2c 01 	sts	0x012C, r24
    7920:	81 11       	cpse	r24, r1
    7922:	f5 cf       	rjmp	.-22     	; 0x790e <proccessCommand+0xb4>

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
    7924:	e0 91 24 01 	lds	r30, 0x0124
    7928:	f0 91 25 01 	lds	r31, 0x0125
    792c:	e1 15       	cp	r30, r1
		while(--length);
    792e:	80 e7       	ldi	r24, 0x70	; 112
    7930:	f8 07       	cpc	r31, r24
    7932:	20 f0       	brcs	.+8      	; 0x793c <proccessCommand+0xe2>
    7934:	83 e0       	ldi	r24, 0x03	; 3
    7936:	80 93 57 00 	sts	0x0057, r24
    793a:	e8 95       	spm

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    793c:	7f df       	rcall	.-258    	; 0x783c <verifySpace>
    793e:	07 b6       	in	r0, 0x37	; 55
    7940:	00 fc       	sbrc	r0, 0
    7942:	fd cf       	rjmp	.-6      	; 0x793e <proccessCommand+0xe4>
    7944:	20 91 24 01 	lds	r18, 0x0124
    7948:	30 91 25 01 	lds	r19, 0x0125
    794c:	89 01       	movw	r16, r18
    794e:	02 58       	subi	r16, 0x82	; 130
    7950:	1f 4f       	sbci	r17, 0xFF	; 255
    7952:	c9 01       	movw	r24, r18

		// Read command terminator, start reply
		verifySpace();
    7954:	69 81       	ldd	r22, Y+1	; 0x01
    7956:	a7 01       	movw	r20, r14

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    7958:	42 1b       	sub	r20, r18
    795a:	53 0b       	sbc	r21, r19
    795c:	ff 24       	eor	r15, r15

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
    795e:	f3 94       	inc	r15
    7960:	da 01       	movw	r26, r20
    7962:	a8 0f       	add	r26, r24
    7964:	b9 1f       	adc	r27, r25
    7966:	11 96       	adiw	r26, 0x01	; 1
    7968:	ec 91       	ld	r30, X
    796a:	11 97       	sbiw	r26, 0x01	; 1
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    796c:	70 e0       	ldi	r23, 0x00	; 0
    796e:	7e 2b       	or	r23, r30
    7970:	fc 01       	movw	r30, r24
    7972:	0b 01       	movw	r0, r22
    7974:	f0 92 57 00 	sts	0x0057, r15
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7978:	e8 95       	spm
    797a:	11 24       	eor	r1, r1
    797c:	80 17       	cp	r24, r16
    797e:	91 07       	cpc	r25, r17
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7980:	21 f0       	breq	.+8      	; 0x798a <proccessCommand+0x130>
    7982:	02 96       	adiw	r24, 0x02	; 2
    7984:	12 96       	adiw	r26, 0x02	; 2
    7986:	6c 91       	ld	r22, X
    7988:	eb cf       	rjmp	.-42     	; 0x7960 <proccessCommand+0x106>
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    798a:	85 e0       	ldi	r24, 0x05	; 5
    798c:	f9 01       	movw	r30, r18
    798e:	80 93 57 00 	sts	0x0057, r24
    7992:	e8 95       	spm
    7994:	07 b6       	in	r0, 0x37	; 55
			addrPtr += 2;
		} while(--ch);
    7996:	00 fc       	sbrc	r0, 0
    7998:	fd cf       	rjmp	.-6      	; 0x7994 <proccessCommand+0x13a>
    799a:	81 e1       	ldi	r24, 0x11	; 17
    799c:	80 93 57 00 	sts	0x0057, r24
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    79a0:	e8 95       	spm
    79a2:	31 c0       	rjmp	.+98     	; 0x7a06 <proccessCommand+0x1ac>
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
    79a4:	84 37       	cpi	r24, 0x74	; 116
    79a6:	d1 f4       	brne	.+52     	; 0x79dc <proccessCommand+0x182>
    79a8:	03 df       	rcall	.-506    	; 0x77b0 <getch>
    79aa:	02 df       	rcall	.-508    	; 0x77b0 <getch>
    79ac:	80 93 2c 01 	sts	0x012C, r24
		boot_spm_busy_wait();
    79b0:	ff de       	rcall	.-514    	; 0x77b0 <getch>
    79b2:	44 df       	rcall	.-376    	; 0x783c <verifySpace>

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    79b4:	e0 91 24 01 	lds	r30, 0x0124
    79b8:	f0 91 25 01 	lds	r31, 0x0125
    79bc:	cf 01       	movw	r24, r30
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    79be:	01 96       	adiw	r24, 0x01	; 1
    79c0:	90 93 25 01 	sts	0x0125, r25
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    79c4:	80 93 24 01 	sts	0x0124, r24
		length = getch();
    79c8:	84 91       	lpm	r24, Z
    79ca:	df de       	rcall	.-578    	; 0x778a <putch>
    79cc:	80 91 2c 01 	lds	r24, 0x012C
		getch();
    79d0:	81 50       	subi	r24, 0x01	; 1

		verifySpace();
    79d2:	80 93 2c 01 	sts	0x012C, r24
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    79d6:	81 11       	cpse	r24, r1
    79d8:	ed cf       	rjmp	.-38     	; 0x79b4 <proccessCommand+0x15a>
    79da:	15 c0       	rjmp	.+42     	; 0x7a06 <proccessCommand+0x1ac>
    79dc:	85 37       	cpi	r24, 0x75	; 117
    79de:	39 f4       	brne	.+14     	; 0x79ee <proccessCommand+0x194>
    79e0:	2d df       	rcall	.-422    	; 0x783c <verifySpace>
    79e2:	8e e1       	ldi	r24, 0x1E	; 30
    79e4:	d2 de       	rcall	.-604    	; 0x778a <putch>
    79e6:	85 e9       	ldi	r24, 0x95	; 149
    79e8:	d0 de       	rcall	.-608    	; 0x778a <putch>
    79ea:	8f e0       	ldi	r24, 0x0F	; 15
    79ec:	58 cf       	rjmp	.-336    	; 0x789e <proccessCommand+0x44>
    79ee:	81 35       	cpi	r24, 0x51	; 81
		while(--length);
    79f0:	49 f4       	brne	.+18     	; 0x7a04 <proccessCommand+0x1aa>
    79f2:	24 df       	rcall	.-440    	; 0x783c <verifySpace>
    79f4:	6e ee       	ldi	r22, 0xEE	; 238
    79f6:	82 e0       	ldi	r24, 0x02	; 2
    79f8:	90 e0       	ldi	r25, 0x00	; 0
    79fa:	2f d0       	rcall	.+94     	; 0x7a5a <__eewr_byte_m328p>
    79fc:	80 e1       	ldi	r24, 0x10	; 16
    79fe:	c5 de       	rcall	.-630    	; 0x778a <putch>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	04 c0       	rjmp	.+8      	; 0x7a0c <proccessCommand+0x1b2>
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    7a04:	1b df       	rcall	.-458    	; 0x783c <verifySpace>
    7a06:	80 e1       	ldi	r24, 0x10	; 16
		putch(SIGNATURE_0);
    7a08:	c0 de       	rcall	.-640    	; 0x778a <putch>
    7a0a:	81 e0       	ldi	r24, 0x01	; 1
    7a0c:	cf 5f       	subi	r28, 0xFF	; 255
		putch(SIGNATURE_1);
    7a0e:	de 4f       	sbci	r29, 0xFE	; 254
    7a10:	de bf       	out	0x3e, r29	; 62
    7a12:	cd bf       	out	0x3d, r28	; 61
		putch(SIGNATURE_2);
    7a14:	df 91       	pop	r29
    7a16:	cf 91       	pop	r28
	} else if(ch == STK_LEAVE_PROGMODE) {
    7a18:	1f 91       	pop	r17
    7a1a:	0f 91       	pop	r16
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    7a1c:	ff 90       	pop	r15
    7a1e:	ef 90       	pop	r14
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7a20:	08 95       	ret

00007a22 <serialPoll>:
}


uint8_t serialPoll()
{
	if(UCSR0A & _BV(RXC0)) {
    7a22:	80 91 c0 00 	lds	r24, 0x00C0
    7a26:	87 ff       	sbrs	r24, 7
    7a28:	05 c0       	rjmp	.+10     	; 0x7a34 <serialPoll+0x12>
		resetTick();
    7a2a:	ef de       	rcall	.-546    	; 0x780a <resetTick>
    7a2c:	81 e0       	ldi	r24, 0x01	; 1
		serialFlashing = TRUE;
    7a2e:	80 93 28 01 	sts	0x0128, r24
    7a32:	13 cf       	rjmp	.-474    	; 0x785a <proccessCommand>
		return(proccessCommand());
    7a34:	81 e0       	ldi	r24, 0x01	; 1
    7a36:	08 95       	ret

00007a38 <memcpy_P>:
	}
	return(1);
}
    7a38:	fb 01       	movw	r30, r22
    7a3a:	dc 01       	movw	r26, r24
    7a3c:	02 c0       	rjmp	.+4      	; 0x7a42 <memcpy_P+0xa>
    7a3e:	05 90       	lpm	r0, Z+
    7a40:	0d 92       	st	X+, r0
    7a42:	41 50       	subi	r20, 0x01	; 1
    7a44:	50 40       	sbci	r21, 0x00	; 0
    7a46:	d8 f7       	brcc	.-10     	; 0x7a3e <memcpy_P+0x6>
    7a48:	08 95       	ret

00007a4a <__eerd_byte_m328p>:
    7a4a:	f9 99       	sbic	0x1f, 1	; 31
    7a4c:	fe cf       	rjmp	.-4      	; 0x7a4a <__eerd_byte_m328p>
    7a4e:	92 bd       	out	0x22, r25	; 34
    7a50:	81 bd       	out	0x21, r24	; 33
    7a52:	f8 9a       	sbi	0x1f, 0	; 31
    7a54:	99 27       	eor	r25, r25
    7a56:	80 b5       	in	r24, 0x20	; 32
    7a58:	08 95       	ret

00007a5a <__eewr_byte_m328p>:
    7a5a:	26 2f       	mov	r18, r22

00007a5c <__eewr_r18_m328p>:
    7a5c:	f9 99       	sbic	0x1f, 1	; 31
    7a5e:	fe cf       	rjmp	.-4      	; 0x7a5c <__eewr_r18_m328p>
    7a60:	1f ba       	out	0x1f, r1	; 31
    7a62:	92 bd       	out	0x22, r25	; 34
    7a64:	81 bd       	out	0x21, r24	; 33
    7a66:	20 bd       	out	0x20, r18	; 32
    7a68:	0f b6       	in	r0, 0x3f	; 63
    7a6a:	f8 94       	cli
    7a6c:	fa 9a       	sbi	0x1f, 2	; 31
    7a6e:	f9 9a       	sbi	0x1f, 1	; 31
    7a70:	0f be       	out	0x3f, r0	; 63
    7a72:	01 96       	adiw	r24, 0x01	; 1
    7a74:	08 95       	ret

00007a76 <_exit>:
    7a76:	f8 94       	cli

00007a78 <__stop_program>:
    7a78:	ff cf       	rjmp	.-2      	; 0x7a78 <__stop_program>
