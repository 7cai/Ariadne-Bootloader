
ariadne_atmega328_ethernet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00007a86  00000b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a86  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  0080011c  0080011c  00000b36  2**0
                  ALLOC
  3 .stab         000032ac  00000000  00000000  00000b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001175  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004f59  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007000 <__vectors>:
    7000:	50 c0       	rjmp	.+160    	; 0x70a2 <__ctors_end>
    7002:	00 00       	nop
    7004:	cb c0       	rjmp	.+406    	; 0x719c <__bad_interrupt>
    7006:	00 00       	nop
    7008:	c9 c0       	rjmp	.+402    	; 0x719c <__bad_interrupt>
    700a:	00 00       	nop
    700c:	c7 c0       	rjmp	.+398    	; 0x719c <__bad_interrupt>
    700e:	00 00       	nop
    7010:	c5 c0       	rjmp	.+394    	; 0x719c <__bad_interrupt>
    7012:	00 00       	nop
    7014:	c3 c0       	rjmp	.+390    	; 0x719c <__bad_interrupt>
    7016:	00 00       	nop
    7018:	c1 c0       	rjmp	.+386    	; 0x719c <__bad_interrupt>
    701a:	00 00       	nop
    701c:	bf c0       	rjmp	.+382    	; 0x719c <__bad_interrupt>
    701e:	00 00       	nop
    7020:	bd c0       	rjmp	.+378    	; 0x719c <__bad_interrupt>
    7022:	00 00       	nop
    7024:	bb c0       	rjmp	.+374    	; 0x719c <__bad_interrupt>
    7026:	00 00       	nop
    7028:	b9 c0       	rjmp	.+370    	; 0x719c <__bad_interrupt>
    702a:	00 00       	nop
    702c:	b7 c0       	rjmp	.+366    	; 0x719c <__bad_interrupt>
    702e:	00 00       	nop
    7030:	b5 c0       	rjmp	.+362    	; 0x719c <__bad_interrupt>
    7032:	00 00       	nop
    7034:	b3 c0       	rjmp	.+358    	; 0x719c <__bad_interrupt>
    7036:	00 00       	nop
    7038:	b1 c0       	rjmp	.+354    	; 0x719c <__bad_interrupt>
    703a:	00 00       	nop
    703c:	af c0       	rjmp	.+350    	; 0x719c <__bad_interrupt>
    703e:	00 00       	nop
    7040:	ad c0       	rjmp	.+346    	; 0x719c <__bad_interrupt>
    7042:	00 00       	nop
    7044:	ab c0       	rjmp	.+342    	; 0x719c <__bad_interrupt>
    7046:	00 00       	nop
    7048:	a9 c0       	rjmp	.+338    	; 0x719c <__bad_interrupt>
    704a:	00 00       	nop
    704c:	a7 c0       	rjmp	.+334    	; 0x719c <__bad_interrupt>
    704e:	00 00       	nop
    7050:	a5 c0       	rjmp	.+330    	; 0x719c <__bad_interrupt>
    7052:	00 00       	nop
    7054:	a3 c0       	rjmp	.+326    	; 0x719c <__bad_interrupt>
    7056:	00 00       	nop
    7058:	a1 c0       	rjmp	.+322    	; 0x719c <__bad_interrupt>
    705a:	00 00       	nop
    705c:	9f c0       	rjmp	.+318    	; 0x719c <__bad_interrupt>
    705e:	00 00       	nop
    7060:	9d c0       	rjmp	.+314    	; 0x719c <__bad_interrupt>
    7062:	00 00       	nop
    7064:	9b c0       	rjmp	.+310    	; 0x719c <__bad_interrupt>
	...

00007068 <tftp_invalid_image_packet>:
    7068:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    7078:	67 65 20 66 69 6c 65 00                             ge file.

00007080 <tftp_unknown_error_packet>:
    7080:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000708b <tftp_full_error_packet>:
    708b:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007095 <tftp_opcode_error_packet>:
    7095:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

000070a2 <__ctors_end>:
    70a2:	11 24       	eor	r1, r1
    70a4:	1f be       	out	0x3f, r1	; 63
    70a6:	cf ef       	ldi	r28, 0xFF	; 255
    70a8:	d8 e0       	ldi	r29, 0x08	; 8
    70aa:	de bf       	out	0x3e, r29	; 62
    70ac:	cd bf       	out	0x3d, r28	; 61

000070ae <__do_copy_data>:
    70ae:	11 e0       	ldi	r17, 0x01	; 1
    70b0:	a0 e0       	ldi	r26, 0x00	; 0
    70b2:	b1 e0       	ldi	r27, 0x01	; 1
    70b4:	e6 e8       	ldi	r30, 0x86	; 134
    70b6:	fa e7       	ldi	r31, 0x7A	; 122
    70b8:	02 c0       	rjmp	.+4      	; 0x70be <__do_copy_data+0x10>
    70ba:	05 90       	lpm	r0, Z+
    70bc:	0d 92       	st	X+, r0
    70be:	ac 31       	cpi	r26, 0x1C	; 28
    70c0:	b1 07       	cpc	r27, r17
    70c2:	d9 f7       	brne	.-10     	; 0x70ba <__do_copy_data+0xc>

000070c4 <__do_clear_bss>:
    70c4:	11 e0       	ldi	r17, 0x01	; 1
    70c6:	ac e1       	ldi	r26, 0x1C	; 28
    70c8:	b1 e0       	ldi	r27, 0x01	; 1
    70ca:	01 c0       	rjmp	.+2      	; 0x70ce <.do_clear_bss_start>

000070cc <.do_clear_bss_loop>:
    70cc:	1d 92       	st	X+, r1

000070ce <.do_clear_bss_start>:
    70ce:	ad 32       	cpi	r26, 0x2D	; 45
    70d0:	b1 07       	cpc	r27, r17
    70d2:	e1 f7       	brne	.-8      	; 0x70cc <.do_clear_bss_loop>
    70d4:	01 d0       	rcall	.+2      	; 0x70d8 <main>
    70d6:	d5 c4       	rjmp	.+2474   	; 0x7a82 <_exit>

000070d8 <main>:
    70d8:	43 d3       	rcall	.+1670   	; 0x7760 <watchdogDisable>
    70da:	2f ef       	ldi	r18, 0xFF	; 255
    70dc:	85 ea       	ldi	r24, 0xA5	; 165
    70de:	9e e0       	ldi	r25, 0x0E	; 14
    70e0:	21 50       	subi	r18, 0x01	; 1
    70e2:	80 40       	sbci	r24, 0x00	; 0
    70e4:	90 40       	sbci	r25, 0x00	; 0
    70e6:	e1 f7       	brne	.-8      	; 0x70e0 <main+0x8>
    70e8:	00 c0       	rjmp	.+0      	; 0x70ea <main+0x12>
    70ea:	00 00       	nop
    70ec:	11 24       	eor	r1, r1
    70ee:	85 e0       	ldi	r24, 0x05	; 5
    70f0:	80 93 81 00 	sts	0x0081, r24
    70f4:	80 e0       	ldi	r24, 0x00	; 0
    70f6:	90 e0       	ldi	r25, 0x00	; 0
    70f8:	ae d4       	rcall	.+2396   	; 0x7a56 <__eerd_byte_m328p>
    70fa:	88 23       	and	r24, r24
    70fc:	21 f0       	breq	.+8      	; 0x7106 <main+0x2e>
    70fe:	60 e0       	ldi	r22, 0x00	; 0
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	b0 d4       	rcall	.+2400   	; 0x7a66 <__eewr_byte_m328p>
    7106:	81 e0       	ldi	r24, 0x01	; 1
    7108:	90 e0       	ldi	r25, 0x00	; 0
    710a:	a5 d4       	rcall	.+2378   	; 0x7a56 <__eerd_byte_m328p>
    710c:	84 30       	cpi	r24, 0x04	; 4
    710e:	21 f0       	breq	.+8      	; 0x7118 <main+0x40>
    7110:	64 e0       	ldi	r22, 0x04	; 4
    7112:	81 e0       	ldi	r24, 0x01	; 1
    7114:	90 e0       	ldi	r25, 0x00	; 0
    7116:	a7 d4       	rcall	.+2382   	; 0x7a66 <__eewr_byte_m328p>
    7118:	36 d3       	rcall	.+1644   	; 0x7786 <serialInit>
    711a:	99 d0       	rcall	.+306    	; 0x724e <netInit>
    711c:	bf d2       	rcall	.+1406   	; 0x769c <tftpInit>
    711e:	ef ef       	ldi	r30, 0xFF	; 255
    7120:	f5 ea       	ldi	r31, 0xA5	; 165
    7122:	2e e0       	ldi	r18, 0x0E	; 14
    7124:	e1 50       	subi	r30, 0x01	; 1
    7126:	f0 40       	sbci	r31, 0x00	; 0
    7128:	20 40       	sbci	r18, 0x00	; 0
    712a:	e1 f7       	brne	.-8      	; 0x7124 <main+0x4c>
    712c:	00 c0       	rjmp	.+0      	; 0x712e <main+0x56>
    712e:	00 00       	nop
    7130:	10 92 28 01 	sts	0x0128, r1
    7134:	10 92 29 01 	sts	0x0129, r1
    7138:	13 e0       	ldi	r17, 0x03	; 3
    713a:	c0 e0       	ldi	r28, 0x00	; 0
    713c:	d0 e0       	ldi	r29, 0x00	; 0
    713e:	80 91 28 01 	lds	r24, 0x0128
    7142:	88 23       	and	r24, r24
    7144:	29 f0       	breq	.+10     	; 0x7150 <main+0x78>
    7146:	80 91 29 01 	lds	r24, 0x0129
    714a:	88 23       	and	r24, r24
    714c:	49 f0       	breq	.+18     	; 0x7160 <main+0x88>
    714e:	04 c0       	rjmp	.+8      	; 0x7158 <main+0x80>
    7150:	c8 d2       	rcall	.+1424   	; 0x76e2 <tftpPoll>
    7152:	81 11       	cpse	r24, r1
    7154:	f8 cf       	rjmp	.-16     	; 0x7146 <main+0x6e>
    7156:	1b c0       	rjmp	.+54     	; 0x718e <main+0xb6>
    7158:	6c d3       	rcall	.+1752   	; 0x7832 <timedOut>
    715a:	81 11       	cpse	r24, r1
    715c:	05 c0       	rjmp	.+10     	; 0x7168 <main+0x90>
    715e:	15 c0       	rjmp	.+42     	; 0x718a <main+0xb2>
    7160:	66 d4       	rcall	.+2252   	; 0x7a2e <serialPoll>
    7162:	81 11       	cpse	r24, r1
    7164:	f9 cf       	rjmp	.-14     	; 0x7158 <main+0x80>
    7166:	13 c0       	rjmp	.+38     	; 0x718e <main+0xb6>
    7168:	82 e0       	ldi	r24, 0x02	; 2
    716a:	90 e0       	ldi	r25, 0x00	; 0
    716c:	74 d4       	rcall	.+2280   	; 0x7a56 <__eerd_byte_m328p>
    716e:	8e 3e       	cpi	r24, 0xEE	; 238
    7170:	71 f0       	breq	.+28     	; 0x718e <main+0xb6>
    7172:	80 91 29 01 	lds	r24, 0x0129
    7176:	81 30       	cpi	r24, 0x01	; 1
    7178:	41 f4       	brne	.+16     	; 0x718a <main+0xb2>
    717a:	fe 01       	movw	r30, r28
    717c:	10 93 57 00 	sts	0x0057, r17
    7180:	e8 95       	spm
    7182:	8c d2       	rcall	.+1304   	; 0x769c <tftpInit>
    7184:	4d d3       	rcall	.+1690   	; 0x7820 <resetTick>
    7186:	10 92 29 01 	sts	0x0129, r1
    718a:	28 d3       	rcall	.+1616   	; 0x77dc <updateLed>
    718c:	d8 cf       	rjmp	.-80     	; 0x713e <main+0x66>
    718e:	e0 91 1c 01 	lds	r30, 0x011C
    7192:	f0 91 1d 01 	lds	r31, 0x011D
    7196:	09 95       	icall
    7198:	80 e0       	ldi	r24, 0x00	; 0
    719a:	90 e0       	ldi	r25, 0x00	; 0

0000719c <__bad_interrupt>:
    719c:	31 cf       	rjmp	.-414    	; 0x7000 <__vectors>

0000719e <netWriteReg>:
	trace(", ");
	tracenum(value);
#endif

	// Send uint8_t to Ethernet controller
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    719e:	20 e5       	ldi	r18, 0x50	; 80
    71a0:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    71a2:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_WRITE;
    71a4:	20 ef       	ldi	r18, 0xF0	; 240
    71a6:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71a8:	0d b4       	in	r0, 0x2d	; 45
    71aa:	07 fe       	sbrs	r0, 7
    71ac:	fd cf       	rjmp	.-6      	; 0x71a8 <netWriteReg+0xa>
	SPDR = address >> 8;
    71ae:	29 2f       	mov	r18, r25
    71b0:	33 27       	eor	r19, r19
    71b2:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71b4:	0d b4       	in	r0, 0x2d	; 45
    71b6:	07 fe       	sbrs	r0, 7
    71b8:	fd cf       	rjmp	.-6      	; 0x71b4 <netWriteReg+0x16>
	SPDR = address & 0xff;
    71ba:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71bc:	0d b4       	in	r0, 0x2d	; 45
    71be:	07 fe       	sbrs	r0, 7
    71c0:	fd cf       	rjmp	.-6      	; 0x71bc <netWriteReg+0x1e>
	SPDR = value;
    71c2:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
    71c4:	0d b4       	in	r0, 0x2d	; 45
    71c6:	07 fe       	sbrs	r0, 7
    71c8:	fd cf       	rjmp	.-6      	; 0x71c4 <netWriteReg+0x26>
	SS_HIGH();
    71ca:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 0; // Turn off SPI
    71cc:	1c bc       	out	0x2c, r1	; 44
    71ce:	08 95       	ret

000071d0 <netReadReg>:
//    tracenum(address);
//#endif

	// Read uint8_t from Ethernet controller
	uint8_t returnValue;
	SPCR = _BV(SPE) | _BV(MSTR);
    71d0:	20 e5       	ldi	r18, 0x50	; 80
    71d2:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    71d4:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_READ;
    71d6:	2f e0       	ldi	r18, 0x0F	; 15
    71d8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71da:	0d b4       	in	r0, 0x2d	; 45
    71dc:	07 fe       	sbrs	r0, 7
    71de:	fd cf       	rjmp	.-6      	; 0x71da <netReadReg+0xa>
	SPDR = address >> 8;
    71e0:	29 2f       	mov	r18, r25
    71e2:	33 27       	eor	r19, r19
    71e4:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71e6:	0d b4       	in	r0, 0x2d	; 45
    71e8:	07 fe       	sbrs	r0, 7
    71ea:	fd cf       	rjmp	.-6      	; 0x71e6 <netReadReg+0x16>
	SPDR = address & 0xff;
    71ec:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71ee:	0d b4       	in	r0, 0x2d	; 45
    71f0:	07 fe       	sbrs	r0, 7
    71f2:	fd cf       	rjmp	.-6      	; 0x71ee <netReadReg+0x1e>
	SPDR = 0;
    71f4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    71f6:	0d b4       	in	r0, 0x2d	; 45
    71f8:	07 fe       	sbrs	r0, 7
    71fa:	fd cf       	rjmp	.-6      	; 0x71f6 <netReadReg+0x26>
	SS_HIGH();
    71fc:	2a 9a       	sbi	0x05, 2	; 5
	returnValue = SPDR;
    71fe:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
    7200:	1c bc       	out	0x2c, r1	; 44
	return(returnValue);
}
    7202:	08 95       	ret

00007204 <netReadWord>:

uint16_t netReadWord(uint16_t address)
{
    7204:	1f 93       	push	r17
    7206:	cf 93       	push	r28
    7208:	df 93       	push	r29
    720a:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((netReadReg(address) << 8) | netReadReg(address + 1));
    720c:	e1 df       	rcall	.-62     	; 0x71d0 <netReadReg>
    720e:	18 2f       	mov	r17, r24
    7210:	ce 01       	movw	r24, r28
    7212:	01 96       	adiw	r24, 0x01	; 1
    7214:	dd df       	rcall	.-70     	; 0x71d0 <netReadReg>
    7216:	21 2f       	mov	r18, r17
    7218:	30 e0       	ldi	r19, 0x00	; 0
    721a:	32 2f       	mov	r19, r18
    721c:	22 27       	eor	r18, r18
}
    721e:	a9 01       	movw	r20, r18
    7220:	48 2b       	or	r20, r24
    7222:	ca 01       	movw	r24, r20
    7224:	df 91       	pop	r29
    7226:	cf 91       	pop	r28
    7228:	1f 91       	pop	r17
    722a:	08 95       	ret

0000722c <netWriteWord>:

void netWriteWord(uint16_t address, uint16_t value)
{
    722c:	0f 93       	push	r16
    722e:	1f 93       	push	r17
    7230:	cf 93       	push	r28
    7232:	df 93       	push	r29
    7234:	8c 01       	movw	r16, r24
    7236:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
    7238:	67 2f       	mov	r22, r23
    723a:	77 27       	eor	r23, r23
    723c:	b0 df       	rcall	.-160    	; 0x719e <netWriteReg>
	netWriteReg(address, value & 0xff);
    723e:	6c 2f       	mov	r22, r28
    7240:	c8 01       	movw	r24, r16
    7242:	01 96       	adiw	r24, 0x01	; 1
}
    7244:	df 91       	pop	r29
    7246:	cf 91       	pop	r28
    7248:	1f 91       	pop	r17
    724a:	0f 91       	pop	r16

void netWriteWord(uint16_t address, uint16_t value)
{
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
	netWriteReg(address, value & 0xff);
    724c:	a8 cf       	rjmp	.-176    	; 0x719e <netWriteReg>

0000724e <netInit>:
}

void netInit()
{
    724e:	0f 93       	push	r16
    7250:	1f 93       	push	r17
    7252:	cf 93       	push	r28
    7254:	df 93       	push	r29
	uint8_t i;

	// Set up outputs to communicate with W5100 chip
	// Set pins as output
	DDRB = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7256:	8c e2       	ldi	r24, 0x2C	; 44
    7258:	84 b9       	out	0x04, r24	; 4
	// Set pins high
	PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
    725a:	8c e3       	ldi	r24, 0x3C	; 60
    725c:	85 b9       	out	0x05, r24	; 5
#ifdef _ARDUINO_ETHERNET
	DDRB |= _BV(LED);
    725e:	21 9a       	sbi	0x04, 1	; 4
	PORTB |= _BV(LED);
    7260:	29 9a       	sbi	0x05, 1	; 5
#endif

	// Set up SPI
	// Set the Double SPI Speed Bit
	SPSR = (1 << SPI2X);
    7262:	81 e0       	ldi	r24, 0x01	; 1
    7264:	8d bd       	out	0x2d, r24	; 45

	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    7266:	83 e0       	ldi	r24, 0x03	; 3
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	f5 d3       	rcall	.+2026   	; 0x7a56 <__eerd_byte_m328p>
    726c:	85 35       	cpi	r24, 0x55	; 85
    726e:	29 f0       	breq	.+10     	; 0x727a <netInit+0x2c>
    7270:	00 e0       	ldi	r16, 0x00	; 0
    7272:	11 e0       	ldi	r17, 0x01	; 1
	        && (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    7274:	c0 e0       	ldi	r28, 0x00	; 0
    7276:	d0 e0       	ldi	r29, 0x00	; 0
    7278:	13 c0       	rjmp	.+38     	; 0x72a0 <netInit+0x52>
    727a:	84 e0       	ldi	r24, 0x04	; 4
    727c:	90 e0       	ldi	r25, 0x00	; 0
    727e:	eb d3       	rcall	.+2006   	; 0x7a56 <__eerd_byte_m328p>
    7280:	8a 3a       	cpi	r24, 0xAA	; 170
    7282:	b1 f7       	brne	.-20     	; 0x7270 <netInit+0x22>
    7284:	01 e0       	ldi	r16, 0x01	; 1
    7286:	11 e0       	ldi	r17, 0x01	; 1
    7288:	c5 e0       	ldi	r28, 0x05	; 5
    728a:	d0 e0       	ldi	r29, 0x00	; 0

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
    728c:	ce 01       	movw	r24, r28
    728e:	e3 d3       	rcall	.+1990   	; 0x7a56 <__eerd_byte_m328p>
    7290:	f8 01       	movw	r30, r16
    7292:	81 93       	st	Z+, r24
    7294:	8f 01       	movw	r16, r30
    7296:	21 96       	adiw	r28, 0x01	; 1
	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
	        && (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
    7298:	c7 31       	cpi	r28, 0x17	; 23
    729a:	d1 05       	cpc	r29, r1
    729c:	b9 f7       	brne	.-18     	; 0x728c <netInit+0x3e>
    729e:	e8 cf       	rjmp	.-48     	; 0x7270 <netInit+0x22>
	}
#endif

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		netWriteReg(i, registerBuffer[i]);
    72a0:	f8 01       	movw	r30, r16
    72a2:	61 91       	ld	r22, Z+
    72a4:	8f 01       	movw	r16, r30
    72a6:	ce 01       	movw	r24, r28
    72a8:	7a df       	rcall	.-268    	; 0x719e <netWriteReg>
    72aa:	21 96       	adiw	r28, 0x01	; 1
		if(i != 14) putch(0x2E);
	}
#endif

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
    72ac:	cc 31       	cpi	r28, 0x1C	; 28
    72ae:	d1 05       	cpc	r29, r1
    72b0:	b9 f7       	brne	.-18     	; 0x72a0 <netInit+0x52>
		netWriteReg(i, registerBuffer[i]);
#ifdef _VERBOSE
	traceln(" Net: Network init done");
#endif
}
    72b2:	df 91       	pop	r29
    72b4:	cf 91       	pop	r28
    72b6:	1f 91       	pop	r17
    72b8:	0f 91       	pop	r16
    72ba:	08 95       	ret

000072bc <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


void sockInit(uint16_t port)
{
    72bc:	cf 93       	push	r28
    72be:	df 93       	push	r29
    72c0:	ec 01       	movw	r28, r24
	netWriteReg(REG_S3_CR, CR_CLOSE);
    72c2:	60 e1       	ldi	r22, 0x10	; 16
    72c4:	81 e0       	ldi	r24, 0x01	; 1
    72c6:	97 e0       	ldi	r25, 0x07	; 7
    72c8:	6a df       	rcall	.-300    	; 0x719e <netWriteReg>
	do {
		// Write TFTP Port
		netWriteWord(REG_S3_PORT0, port);
    72ca:	be 01       	movw	r22, r28
    72cc:	84 e0       	ldi	r24, 0x04	; 4
    72ce:	97 e0       	ldi	r25, 0x07	; 7
    72d0:	ad df       	rcall	.-166    	; 0x722c <netWriteWord>
		// Write mode
		netWriteReg(REG_S3_MR, MR_UDP);
    72d2:	62 e0       	ldi	r22, 0x02	; 2
    72d4:	80 e0       	ldi	r24, 0x00	; 0
    72d6:	97 e0       	ldi	r25, 0x07	; 7
    72d8:	62 df       	rcall	.-316    	; 0x719e <netWriteReg>
		// Open Socket
		netWriteReg(REG_S3_CR, CR_OPEN);
    72da:	61 e0       	ldi	r22, 0x01	; 1
    72dc:	81 e0       	ldi	r24, 0x01	; 1
    72de:	97 e0       	ldi	r25, 0x07	; 7
    72e0:	5e df       	rcall	.-324    	; 0x719e <netWriteReg>
		// Read Status
		if(netReadReg(REG_S3_SR) != SOCK_UDP)
    72e2:	83 e0       	ldi	r24, 0x03	; 3
    72e4:	97 e0       	ldi	r25, 0x07	; 7
    72e6:	74 df       	rcall	.-280    	; 0x71d0 <netReadReg>
    72e8:	82 32       	cpi	r24, 0x22	; 34
    72ea:	21 f0       	breq	.+8      	; 0x72f4 <sockInit+0x38>
			// Close Socket if it wasn't initialized correctly
		netWriteReg(REG_S3_CR, CR_CLOSE);
    72ec:	60 e1       	ldi	r22, 0x10	; 16
    72ee:	81 e0       	ldi	r24, 0x01	; 1
    72f0:	97 e0       	ldi	r25, 0x07	; 7
    72f2:	55 df       	rcall	.-342    	; 0x719e <netWriteReg>
		// If socket correctly opened continue
	} while(netReadReg(REG_S3_SR) != SOCK_UDP);
    72f4:	83 e0       	ldi	r24, 0x03	; 3
    72f6:	97 e0       	ldi	r25, 0x07	; 7
    72f8:	6b df       	rcall	.-298    	; 0x71d0 <netReadReg>
    72fa:	82 32       	cpi	r24, 0x22	; 34
    72fc:	31 f7       	brne	.-52     	; 0x72ca <sockInit+0xe>
}
    72fe:	df 91       	pop	r29
    7300:	cf 91       	pop	r28
    7302:	08 95       	ret

00007304 <processPacket>:
#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
{
    7304:	cf 92       	push	r12
    7306:	df 92       	push	r13
    7308:	ef 92       	push	r14
    730a:	ff 92       	push	r15
    730c:	0f 93       	push	r16
    730e:	1f 93       	push	r17
    7310:	cf 93       	push	r28
    7312:	df 93       	push	r29
    7314:	cd b7       	in	r28, 0x3d	; 61
    7316:	de b7       	in	r29, 0x3e	; 62
    7318:	cc 50       	subi	r28, 0x0C	; 12
    731a:	d2 40       	sbci	r29, 0x02	; 2
    731c:	de bf       	out	0x3e, r29	; 62
    731e:	cd bf       	out	0x3d, r28	; 61
	if(packetSize >= 0x800) traceln("Tftp: Overflow");
	//  step();
#endif

	// Read data from chip to buffer
	readPointer = netReadWord(REG_S3_RX_RD0);
    7320:	88 e2       	ldi	r24, 0x28	; 40
    7322:	97 e0       	ldi	r25, 0x07	; 7
    7324:	6f df       	rcall	.-290    	; 0x7204 <netReadWord>
#ifdef _DEBUGMORE_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
    7326:	00 97       	sbiw	r24, 0x00	; 0
    7328:	11 f4       	brne	.+4      	; 0x732e <processPacket+0x2a>
    732a:	80 e0       	ldi	r24, 0x00	; 0
    732c:	98 e7       	ldi	r25, 0x78	; 120
    732e:	8e 01       	movw	r16, r28
    7330:	0f 5f       	subi	r16, 0xFF	; 255
    7332:	1f 4f       	sbci	r17, 0xFF	; 255

#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
    7334:	6e 01       	movw	r12, r28
    7336:	23 ef       	ldi	r18, 0xF3	; 243
    7338:	c2 1a       	sub	r12, r18
    733a:	2d ef       	ldi	r18, 0xFD	; 253
    733c:	d2 0a       	sbc	r13, r18
		if((count == TFTP_PACKET_MAX_SIZE - 1) || (count == 0)) {
			traceln("Tftp: Reading from position ");
			tracenum(readPointer);
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
    733e:	7c 01       	movw	r14, r24
    7340:	ef ef       	ldi	r30, 0xFF	; 255
    7342:	ee 1a       	sub	r14, r30
    7344:	fe 0a       	sbc	r15, r30
    7346:	44 df       	rcall	.-376    	; 0x71d0 <netReadReg>
    7348:	f8 01       	movw	r30, r16
    734a:	81 93       	st	Z+, r24
    734c:	8f 01       	movw	r16, r30
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    734e:	e1 14       	cp	r14, r1
    7350:	f0 e8       	ldi	r31, 0x80	; 128
    7352:	ff 06       	cpc	r15, r31
    7354:	11 f0       	breq	.+4      	; 0x735a <processPacket+0x56>
    7356:	c7 01       	movw	r24, r14
    7358:	02 c0       	rjmp	.+4      	; 0x735e <processPacket+0x5a>
    735a:	80 e0       	ldi	r24, 0x00	; 0
    735c:	98 e7       	ldi	r25, 0x78	; 120
#ifdef _DEBUGMORE_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    735e:	0c 15       	cp	r16, r12
    7360:	1d 05       	cpc	r17, r13
    7362:	69 f7       	brne	.-38     	; 0x733e <processPacket+0x3a>
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
	}
	netWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
    7364:	bc 01       	movw	r22, r24
    7366:	88 e2       	ldi	r24, 0x28	; 40
    7368:	97 e0       	ldi	r25, 0x07	; 7
    736a:	60 df       	rcall	.-320    	; 0x722c <netWriteWord>
	netWriteReg(REG_S3_CR, CR_RECV);
    736c:	60 e4       	ldi	r22, 0x40	; 64
    736e:	81 e0       	ldi	r24, 0x01	; 1
    7370:	97 e0       	ldi	r25, 0x07	; 7
    7372:	15 df       	rcall	.-470    	; 0x719e <netWriteReg>
	while(netReadReg(REG_S3_CR));
    7374:	81 e0       	ldi	r24, 0x01	; 1
    7376:	97 e0       	ldi	r25, 0x07	; 7
    7378:	2b df       	rcall	.-426    	; 0x71d0 <netReadReg>
    737a:	81 11       	cpse	r24, r1
    737c:	fb cf       	rjmp	.-10     	; 0x7374 <processPacket+0x70>
    737e:	ee 24       	eor	r14, r14
    7380:	e3 94       	inc	r14
    7382:	f1 2c       	mov	r15, r1
    7384:	ec 0e       	add	r14, r28
    7386:	fd 1e       	adc	r15, r29
    7388:	0c e0       	ldi	r16, 0x0C	; 12
    738a:	17 e0       	ldi	r17, 0x07	; 7
	traceln("Tftp: Setting return address");
#endif

	// Set up return IP address and port
	uint8_t i;
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);
    738c:	f7 01       	movw	r30, r14
    738e:	61 91       	ld	r22, Z+
    7390:	7f 01       	movw	r14, r30
    7392:	c8 01       	movw	r24, r16
    7394:	04 df       	rcall	.-504    	; 0x719e <netWriteReg>
    7396:	0f 5f       	subi	r16, 0xFF	; 255
    7398:	1f 4f       	sbci	r17, 0xFF	; 255
    739a:	02 31       	cpi	r16, 0x12	; 18
    739c:	f7 e0       	ldi	r31, 0x07	; 7
    739e:	1f 07       	cpc	r17, r31
    73a0:	a9 f7       	brne	.-22     	; 0x738c <processPacket+0x88>

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    73a2:	ef 80       	ldd	r14, Y+7	; 0x07
    73a4:	f1 2c       	mov	r15, r1
    73a6:	fe 2c       	mov	r15, r14
    73a8:	ee 24       	eor	r14, r14
    73aa:	88 85       	ldd	r24, Y+8	; 0x08
    73ac:	e8 0e       	add	r14, r24
    73ae:	f1 1c       	adc	r15, r1
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
    73b0:	89 85       	ldd	r24, Y+9	; 0x09
    73b2:	90 e0       	ldi	r25, 0x00	; 0
    73b4:	98 2f       	mov	r25, r24
    73b6:	88 27       	eor	r24, r24
    73b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    73ba:	82 0f       	add	r24, r18
    73bc:	91 1d       	adc	r25, r1
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
    73be:	0b 85       	ldd	r16, Y+11	; 0x0b
    73c0:	10 e0       	ldi	r17, 0x00	; 0
    73c2:	10 2f       	mov	r17, r16
    73c4:	00 27       	eor	r16, r16
    73c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    73c8:	02 0f       	add	r16, r18
    73ca:	11 1d       	adc	r17, r1
	tracenum(tftpOpcode);
	trace(" and data length ");
	tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
#endif

	if((tftpOpcode == TFTP_OPCODE_DATA)
    73cc:	83 30       	cpi	r24, 0x03	; 3
    73ce:	91 05       	cpc	r25, r1
    73d0:	91 f4       	brne	.+36     	; 0x73f6 <processPacket+0xf2>
		&& ((tftpBlock > MAX_ADDR/0x200)
    73d2:	09 33       	cpi	r16, 0x39	; 57
    73d4:	11 05       	cpc	r17, r1
    73d6:	08 f0       	brcs	.+2      	; 0x73da <processPacket+0xd6>
    73d8:	b1 c0       	rjmp	.+354    	; 0x753c <processPacket+0x238>
		|| (tftpBlock < highPacket)
    73da:	80 91 1e 01 	lds	r24, 0x011E
    73de:	90 91 1f 01 	lds	r25, 0x011F
    73e2:	08 17       	cp	r16, r24
    73e4:	19 07       	cpc	r17, r25
    73e6:	08 f4       	brcc	.+2      	; 0x73ea <processPacket+0xe6>
    73e8:	a9 c0       	rjmp	.+338    	; 0x753c <processPacket+0x238>
		|| (tftpBlock > highPacket+1))) tftpOpcode = TFTP_OPCODE_UKN;
    73ea:	01 96       	adiw	r24, 0x01	; 1
    73ec:	80 17       	cp	r24, r16
    73ee:	91 07       	cpc	r25, r17
    73f0:	08 f4       	brcc	.+2      	; 0x73f4 <processPacket+0xf0>
    73f2:	a4 c0       	rjmp	.+328    	; 0x753c <processPacket+0x238>
    73f4:	b3 c0       	rjmp	.+358    	; 0x755c <processPacket+0x258>
	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE)) tftpOpcode = TFTP_OPCODE_UKN;
    73f6:	25 e0       	ldi	r18, 0x05	; 5
    73f8:	e2 16       	cp	r14, r18
    73fa:	22 e0       	ldi	r18, 0x02	; 2
    73fc:	f2 06       	cpc	r15, r18
    73fe:	08 f0       	brcs	.+2      	; 0x7402 <processPacket+0xfe>
    7400:	9d c0       	rjmp	.+314    	; 0x753c <processPacket+0x238>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7402:	84 30       	cpi	r24, 0x04	; 4
    7404:	91 05       	cpc	r25, r1
    7406:	40 f4       	brcc	.+16     	; 0x7418 <processPacket+0x114>
    7408:	81 30       	cpi	r24, 0x01	; 1
    740a:	91 05       	cpc	r25, r1
    740c:	09 f4       	brne	.+2      	; 0x7410 <processPacket+0x10c>
    740e:	9e c0       	rjmp	.+316    	; 0x754c <processPacket+0x248>
    7410:	02 97       	sbiw	r24, 0x02	; 2
    7412:	09 f0       	breq	.+2      	; 0x7416 <processPacket+0x112>
    7414:	93 c0       	rjmp	.+294    	; 0x753c <processPacket+0x238>
    7416:	04 c0       	rjmp	.+8      	; 0x7420 <processPacket+0x11c>
    7418:	06 97       	sbiw	r24, 0x06	; 6
    741a:	08 f0       	brcs	.+2      	; 0x741e <processPacket+0x11a>
    741c:	8f c0       	rjmp	.+286    	; 0x753c <processPacket+0x238>
    741e:	96 c0       	rjmp	.+300    	; 0x754c <processPacket+0x248>
#endif
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
    7420:	ff d1       	rcall	.+1022   	; 0x7820 <resetTick>
#ifdef _VERBOSE
			traceln("Tftp: Write request");
#endif
			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
    7422:	6f ef       	ldi	r22, 0xFF	; 255
    7424:	82 e0       	ldi	r24, 0x02	; 2
    7426:	90 e0       	ldi	r25, 0x00	; 0
    7428:	1e d3       	rcall	.+1596   	; 0x7a66 <__eewr_byte_m328p>

#ifdef _TFTP_RANDOM_PORT
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    742a:	80 91 26 01 	lds	r24, 0x0126
    742e:	90 91 27 01 	lds	r25, 0x0127
    7432:	44 df       	rcall	.-376    	; 0x72bc <sockInit>
#else
			tracenum(tftpTransferPort);
#endif
#endif

			lastPacket = highPacket = 0;
    7434:	10 92 1f 01 	sts	0x011F, r1
    7438:	10 92 1e 01 	sts	0x011E, r1
    743c:	10 92 21 01 	sts	0x0121, r1
    7440:	10 92 20 01 	sts	0x0120, r1
			returnCode = ACK; // Send back acknowledge for packet 0
    7444:	12 e0       	ldi	r17, 0x02	; 2
    7446:	d1 2e       	mov	r13, r17
			break;
    7448:	8f c0       	rjmp	.+286    	; 0x7568 <processPacket+0x264>

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
    744a:	ea d1       	rcall	.+980    	; 0x7820 <resetTick>

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
    744c:	84 e0       	ldi	r24, 0x04	; 4
    744e:	e8 1a       	sub	r14, r24
    7450:	f1 08       	sbc	r15, r1
			lastPacket = tftpBlock;
    7452:	10 93 21 01 	sts	0x0121, r17
    7456:	00 93 20 01 	sts	0x0120, r16
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
    745a:	01 50       	subi	r16, 0x01	; 1
    745c:	11 09       	sbc	r17, r1
    745e:	10 2f       	mov	r17, r16
    7460:	00 27       	eor	r16, r16
    7462:	11 0f       	add	r17, r17
    7464:	a8 01       	movw	r20, r16
    7466:	60 e0       	ldi	r22, 0x00	; 0
    7468:	70 e0       	ldi	r23, 0x00	; 0
#ifdef _DEBUGMORE_TFTP
			traceln("Tftp: Data for block ");
			tracenum(lastPacket);
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    746a:	db 01       	movw	r26, r22
    746c:	ca 01       	movw	r24, r20
    746e:	8e 0d       	add	r24, r14
    7470:	9f 1d       	adc	r25, r15
    7472:	a1 1d       	adc	r26, r1
    7474:	b1 1d       	adc	r27, r1
    7476:	81 30       	cpi	r24, 0x01	; 1
    7478:	90 47       	sbci	r25, 0x70	; 112
    747a:	a1 05       	cpc	r26, r1
    747c:	b1 05       	cpc	r27, r1
    747e:	08 f0       	brcs	.+2      	; 0x7482 <processPacket+0x17e>
    7480:	67 c0       	rjmp	.+206    	; 0x7550 <processPacket+0x24c>
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
    7482:	e1 14       	cp	r14, r1
    7484:	f2 e0       	ldi	r31, 0x02	; 2
    7486:	ff 06       	cpc	r15, r31
    7488:	18 f4       	brcc	.+6      	; 0x7490 <processPacket+0x18c>
    748a:	a4 e0       	ldi	r26, 0x04	; 4
    748c:	da 2e       	mov	r13, r26
    748e:	06 c0       	rjmp	.+12     	; 0x749c <processPacket+0x198>
				else returnCode = ACK;
    7490:	f2 e0       	ldi	r31, 0x02	; 2
    7492:	df 2e       	mov	r13, r31
    7494:	03 c0       	rjmp	.+6      	; 0x749c <processPacket+0x198>

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    7496:	2f ef       	ldi	r18, 0xFF	; 255
    7498:	e2 1a       	sub	r14, r18
    749a:	f2 0a       	sbc	r15, r18
    749c:	c7 01       	movw	r24, r14
    749e:	8f 77       	andi	r24, 0x7F	; 127
    74a0:	99 27       	eor	r25, r25
    74a2:	89 2b       	or	r24, r25
    74a4:	c1 f7       	brne	.-16     	; 0x7496 <processPacket+0x192>
#ifdef _DEBUG_TFTP
				traceln("Tftp: Packet length adjusted to ");
				tracenum(packetLength);
#endif
				if(writeAddr == 0) {
    74a6:	45 2b       	or	r20, r21
    74a8:	46 2b       	or	r20, r22
    74aa:	47 2b       	or	r20, r23
    74ac:	31 f4       	brne	.+12     	; 0x74ba <processPacket+0x1b6>
					// First sector - validate
					if(!validImage(pageBase)) {
    74ae:	ce 01       	movw	r24, r28
    74b0:	0d 96       	adiw	r24, 0x0d	; 13
    74b2:	42 d1       	rcall	.+644    	; 0x7738 <validImage>
    74b4:	88 23       	and	r24, r24
    74b6:	09 f4       	brne	.+2      	; 0x74ba <processPacket+0x1b6>
    74b8:	4e c0       	rjmp	.+156    	; 0x7556 <processPacket+0x252>
#ifdef _DEBUG_TFTP
				traceln("Tftp: Writing data from address ");
				tracenum(writeAddr);
#endif

				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
    74ba:	de 01       	movw	r26, r28
    74bc:	1d 96       	adiw	r26, 0x0d	; 13
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    74be:	20 e0       	ldi	r18, 0x00	; 0
    74c0:	30 e0       	ldi	r19, 0x00	; 0
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    74c2:	81 e0       	ldi	r24, 0x01	; 1
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    74c4:	93 e0       	ldi	r25, 0x03	; 3
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    74c6:	65 e0       	ldi	r22, 0x05	; 5
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    74c8:	71 e1       	ldi	r23, 0x11	; 17
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    74ca:	2d c0       	rjmp	.+90     	; 0x7526 <processPacket+0x222>

#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
    74cc:	e1 e0       	ldi	r30, 0x01	; 1
    74ce:	f0 e0       	ldi	r31, 0x00	; 0
    74d0:	ec 0f       	add	r30, r28
    74d2:	fd 1f       	adc	r31, r29
    74d4:	e2 0f       	add	r30, r18
    74d6:	f3 1f       	adc	r31, r19
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    74d8:	45 85       	ldd	r20, Z+13	; 0x0d
    74da:	50 e0       	ldi	r21, 0x00	; 0
    74dc:	54 2f       	mov	r21, r20
    74de:	44 27       	eor	r20, r20
    74e0:	ec 91       	ld	r30, X
    74e2:	4e 2b       	or	r20, r30
					boot_page_fill(writeAddr + offset, writeValue);
    74e4:	f8 01       	movw	r30, r16
    74e6:	0a 01       	movw	r0, r20
    74e8:	80 93 57 00 	sts	0x0057, r24
    74ec:	e8 95       	spm
    74ee:	11 24       	eor	r1, r1
						tracenum(writeValue);
						trace(" at offset ");
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
    74f0:	2e 5f       	subi	r18, 0xFE	; 254
    74f2:	3f 4f       	sbci	r19, 0xFF	; 255
					if(offset % SPM_PAGESIZE == 0) {
    74f4:	a9 01       	movw	r20, r18
    74f6:	4f 77       	andi	r20, 0x7F	; 127
    74f8:	55 27       	eor	r21, r21
    74fa:	45 2b       	or	r20, r21
    74fc:	89 f4       	brne	.+34     	; 0x7520 <processPacket+0x21c>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    74fe:	ee 57       	subi	r30, 0x7E	; 126
    7500:	f1 09       	sbc	r31, r1
    7502:	90 93 57 00 	sts	0x0057, r25
    7506:	e8 95       	spm
						boot_spm_busy_wait();
    7508:	07 b6       	in	r0, 0x37	; 55
    750a:	00 fc       	sbrc	r0, 0
    750c:	fd cf       	rjmp	.-6      	; 0x7508 <processPacket+0x204>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    750e:	60 93 57 00 	sts	0x0057, r22
    7512:	e8 95       	spm
						boot_spm_busy_wait();
    7514:	07 b6       	in	r0, 0x37	; 55
    7516:	00 fc       	sbrc	r0, 0
    7518:	fd cf       	rjmp	.-6      	; 0x7514 <processPacket+0x210>
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
    751a:	70 93 57 00 	sts	0x0057, r23
    751e:	e8 95       	spm
    7520:	12 96       	adiw	r26, 0x02	; 2
    7522:	0e 5f       	subi	r16, 0xFE	; 254
    7524:	1f 4f       	sbci	r17, 0xFF	; 255
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    7526:	2e 15       	cp	r18, r14
    7528:	3f 05       	cpc	r19, r15
    752a:	80 f2       	brcs	.-96     	; 0x74cc <processPacket+0x1c8>
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
    752c:	f4 e0       	ldi	r31, 0x04	; 4
    752e:	df 12       	cpse	r13, r31
    7530:	1b c0       	rjmp	.+54     	; 0x7568 <processPacket+0x264>
					// Hand over to application
#ifdef _VERBOSE
					traceln("Tftp: Flash is complete");
#endif
					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7532:	6e ee       	ldi	r22, 0xEE	; 238
    7534:	82 e0       	ldi	r24, 0x02	; 2
    7536:	90 e0       	ldi	r25, 0x00	; 0
    7538:	96 d2       	rcall	.+1324   	; 0x7a66 <__eewr_byte_m328p>
    753a:	16 c0       	rjmp	.+44     	; 0x7568 <processPacket+0x264>
#endif

#ifdef _TFTP_RANDOM_PORT
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
    753c:	80 91 26 01 	lds	r24, 0x0126
    7540:	90 91 27 01 	lds	r25, 0x0127
    7544:	bb de       	rcall	.-650    	; 0x72bc <sockInit>
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
    7546:	dd 24       	eor	r13, r13
    7548:	d3 94       	inc	r13
			break;
    754a:	0e c0       	rjmp	.+28     	; 0x7568 <processPacket+0x264>
		&& ((tftpBlock > MAX_ADDR/0x200)
		|| (tftpBlock < highPacket)
		|| (tftpBlock > highPacket+1))) tftpOpcode = TFTP_OPCODE_UKN;
	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE)) tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
    754c:	d1 2c       	mov	r13, r1
    754e:	0c c0       	rjmp	.+24     	; 0x7568 <processPacket+0x264>
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.
#ifdef _VERBOSE
				traceln("Tftp: Flash is full");
#endif
				returnCode = ERROR_FULL;
    7550:	93 e0       	ldi	r25, 0x03	; 3
    7552:	d9 2e       	mov	r13, r25
    7554:	09 c0       	rjmp	.+18     	; 0x7568 <processPacket+0x264>
				tracenum(packetLength);
#endif
				if(writeAddr == 0) {
					// First sector - validate
					if(!validImage(pageBase)) {
						returnCode = INVALID_IMAGE;
    7556:	85 e0       	ldi	r24, 0x05	; 5
    7558:	d8 2e       	mov	r13, r24
    755a:	06 c0       	rjmp	.+12     	; 0x7568 <processPacket+0x264>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR/0x200)
		|| (tftpBlock < highPacket)
		|| (tftpBlock > highPacket+1))) tftpOpcode = TFTP_OPCODE_UKN;
	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE)) tftpOpcode = TFTP_OPCODE_UKN;
    755c:	25 e0       	ldi	r18, 0x05	; 5
    755e:	e2 16       	cp	r14, r18
    7560:	22 e0       	ldi	r18, 0x02	; 2
    7562:	f2 06       	cpc	r15, r18
    7564:	58 f7       	brcc	.-42     	; 0x753c <processPacket+0x238>
    7566:	71 cf       	rjmp	.-286    	; 0x744a <processPacket+0x146>
			returnCode = ERROR_INVALID;
			break;

	}
	return(returnCode);
}
    7568:	8d 2d       	mov	r24, r13
    756a:	c4 5f       	subi	r28, 0xF4	; 244
    756c:	dd 4f       	sbci	r29, 0xFD	; 253
    756e:	de bf       	out	0x3e, r29	; 62
    7570:	cd bf       	out	0x3d, r28	; 61
    7572:	df 91       	pop	r29
    7574:	cf 91       	pop	r28
    7576:	1f 91       	pop	r17
    7578:	0f 91       	pop	r16
    757a:	ff 90       	pop	r15
    757c:	ef 90       	pop	r14
    757e:	df 90       	pop	r13
    7580:	cf 90       	pop	r12
    7582:	08 95       	ret

00007584 <sendResponse>:


void sendResponse(uint16_t response)
{
    7584:	bf 92       	push	r11
    7586:	cf 92       	push	r12
    7588:	df 92       	push	r13
    758a:	ef 92       	push	r14
    758c:	ff 92       	push	r15
    758e:	0f 93       	push	r16
    7590:	1f 93       	push	r17
    7592:	cf 93       	push	r28
    7594:	df 93       	push	r29
    7596:	cd b7       	in	r28, 0x3d	; 61
    7598:	de b7       	in	r29, 0x3e	; 62
    759a:	c4 56       	subi	r28, 0x64	; 100
    759c:	d1 09       	sbc	r29, r1
    759e:	de bf       	out	0x3e, r29	; 62
    75a0:	cd bf       	out	0x3d, r28	; 61
    75a2:	8c 01       	movw	r16, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = netReadWord(REG_S3_TX_WR0) + S3_TX_START;
    75a4:	84 e2       	ldi	r24, 0x24	; 36
    75a6:	97 e0       	ldi	r25, 0x07	; 7
    75a8:	2d de       	rcall	.-934    	; 0x7204 <netReadWord>
    75aa:	98 5a       	subi	r25, 0xA8	; 168
    75ac:	7c 01       	movw	r14, r24
	switch(response) {
    75ae:	02 30       	cpi	r16, 0x02	; 2
    75b0:	11 05       	cpc	r17, r1
    75b2:	59 f1       	breq	.+86     	; 0x760a <sendResponse+0x86>
    75b4:	20 f4       	brcc	.+8      	; 0x75be <sendResponse+0x3a>
    75b6:	01 30       	cpi	r16, 0x01	; 1
    75b8:	11 05       	cpc	r17, r1
    75ba:	39 f4       	brne	.+14     	; 0x75ca <sendResponse+0x46>
    75bc:	14 c0       	rjmp	.+40     	; 0x75e6 <sendResponse+0x62>
    75be:	03 30       	cpi	r16, 0x03	; 3
    75c0:	11 05       	cpc	r17, r1
    75c2:	d1 f0       	breq	.+52     	; 0x75f8 <sendResponse+0x74>
    75c4:	04 30       	cpi	r16, 0x04	; 4
    75c6:	11 05       	cpc	r17, r1
    75c8:	79 f1       	breq	.+94     	; 0x7628 <sendResponse+0xa4>
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    75ca:	4a e0       	ldi	r20, 0x0A	; 10
    75cc:	50 e0       	ldi	r21, 0x00	; 0
    75ce:	60 e8       	ldi	r22, 0x80	; 128
    75d0:	70 e7       	ldi	r23, 0x70	; 112
    75d2:	ce 01       	movw	r24, r28
    75d4:	01 96       	adiw	r24, 0x01	; 1
    75d6:	36 d2       	rcall	.+1132   	; 0x7a44 <memcpy_P>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    75d8:	8a e0       	ldi	r24, 0x0A	; 10
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    75da:	8e 01       	movw	r16, r28
    75dc:	0f 5f       	subi	r16, 0xFF	; 255
    75de:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	return(returnCode);
}


void sendResponse(uint16_t response)
    75e0:	b8 2e       	mov	r11, r24
    75e2:	b0 0e       	add	r11, r16
    75e4:	3d c0       	rjmp	.+122    	; 0x7660 <sendResponse+0xdc>
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    75e6:	4c e0       	ldi	r20, 0x0C	; 12
    75e8:	50 e0       	ldi	r21, 0x00	; 0
    75ea:	65 e9       	ldi	r22, 0x95	; 149
    75ec:	70 e7       	ldi	r23, 0x70	; 112
    75ee:	ce 01       	movw	r24, r28
    75f0:	01 96       	adiw	r24, 0x01	; 1
    75f2:	28 d2       	rcall	.+1104   	; 0x7a44 <memcpy_P>
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    75f4:	8c e0       	ldi	r24, 0x0C	; 12
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;
    75f6:	f1 cf       	rjmp	.-30     	; 0x75da <sendResponse+0x56>

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    75f8:	49 e0       	ldi	r20, 0x09	; 9
    75fa:	50 e0       	ldi	r21, 0x00	; 0
    75fc:	6b e8       	ldi	r22, 0x8B	; 139
    75fe:	70 e7       	ldi	r23, 0x70	; 112
    7600:	ce 01       	movw	r24, r28
    7602:	01 96       	adiw	r24, 0x01	; 1
    7604:	1f d2       	rcall	.+1086   	; 0x7a44 <memcpy_P>
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    7606:	89 e0       	ldi	r24, 0x09	; 9
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
			break;
    7608:	e8 cf       	rjmp	.-48     	; 0x75da <sendResponse+0x56>

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
    760a:	80 91 20 01 	lds	r24, 0x0120
    760e:	90 91 21 01 	lds	r25, 0x0121
    7612:	20 91 1e 01 	lds	r18, 0x011E
    7616:	30 91 1f 01 	lds	r19, 0x011F
    761a:	28 17       	cp	r18, r24
    761c:	39 07       	cpc	r19, r25
    761e:	20 f4       	brcc	.+8      	; 0x7628 <sendResponse+0xa4>
    7620:	90 93 1f 01 	sts	0x011F, r25
    7624:	80 93 1e 01 	sts	0x011E, r24
		case FINAL_ACK:
#ifdef _DEBUG_TFTP
			if(response == FINAL_ACK) traceln("Tftp: Sent Final ACK ");
#endif
			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
    7628:	19 82       	std	Y+1, r1	; 0x01
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    762a:	84 e0       	ldi	r24, 0x04	; 4
    762c:	8a 83       	std	Y+2, r24	; 0x02
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    762e:	80 91 20 01 	lds	r24, 0x0120
    7632:	90 91 21 01 	lds	r25, 0x0121
    7636:	9b 83       	std	Y+3, r25	; 0x03
			*txPtr = lastPacket & 0xff;
    7638:	8c 83       	std	Y+4, r24	; 0x04
#endif
		case FINAL_ACK:
#ifdef _DEBUG_TFTP
			if(response == FINAL_ACK) traceln("Tftp: Sent Final ACK ");
#endif
			packetLength = 4;
    763a:	84 e0       	ldi	r24, 0x04	; 4
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
			*txPtr = lastPacket & 0xff;
			break;
    763c:	ce cf       	rjmp	.-100    	; 0x75da <sendResponse+0x56>
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
    763e:	f8 01       	movw	r30, r16
    7640:	61 91       	ld	r22, Z+
    7642:	8f 01       	movw	r16, r30
    7644:	67 01       	movw	r12, r14
    7646:	ff ef       	ldi	r31, 0xFF	; 255
    7648:	cf 1a       	sub	r12, r31
    764a:	df 0a       	sbc	r13, r31
    764c:	c7 01       	movw	r24, r14
    764e:	a7 dd       	rcall	.-1202   	; 0x719e <netWriteReg>
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    7650:	c1 14       	cp	r12, r1
    7652:	80 e6       	ldi	r24, 0x60	; 96
    7654:	d8 06       	cpc	r13, r24
    7656:	19 f4       	brne	.+6      	; 0x765e <sendResponse+0xda>
    7658:	c1 2c       	mov	r12, r1
    765a:	58 e5       	ldi	r21, 0x58	; 88
    765c:	d5 2e       	mov	r13, r21
    765e:	76 01       	movw	r14, r12
			*txPtr = lastPacket & 0xff;
			break;
	}

	txPtr = txBuffer;
	while(packetLength--) {
    7660:	b0 12       	cpse	r11, r16
    7662:	ed cf       	rjmp	.-38     	; 0x763e <sendResponse+0xba>
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}
	netWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
    7664:	b7 01       	movw	r22, r14
    7666:	78 55       	subi	r23, 0x58	; 88
    7668:	84 e2       	ldi	r24, 0x24	; 36
    766a:	97 e0       	ldi	r25, 0x07	; 7
    766c:	df dd       	rcall	.-1090   	; 0x722c <netWriteWord>
	netWriteReg(REG_S3_CR, CR_SEND);
    766e:	60 e2       	ldi	r22, 0x20	; 32
    7670:	81 e0       	ldi	r24, 0x01	; 1
    7672:	97 e0       	ldi	r25, 0x07	; 7
    7674:	94 dd       	rcall	.-1240   	; 0x719e <netWriteReg>
	while(netReadReg(REG_S3_CR));
    7676:	81 e0       	ldi	r24, 0x01	; 1
    7678:	97 e0       	ldi	r25, 0x07	; 7
    767a:	aa dd       	rcall	.-1196   	; 0x71d0 <netReadReg>
    767c:	81 11       	cpse	r24, r1
    767e:	fb cf       	rjmp	.-10     	; 0x7676 <sendResponse+0xf2>
#ifdef _VERBOSE
	traceln("Tftp: Response sent");
#endif
}
    7680:	cc 59       	subi	r28, 0x9C	; 156
    7682:	df 4f       	sbci	r29, 0xFF	; 255
    7684:	de bf       	out	0x3e, r29	; 62
    7686:	cd bf       	out	0x3d, r28	; 61
    7688:	df 91       	pop	r29
    768a:	cf 91       	pop	r28
    768c:	1f 91       	pop	r17
    768e:	0f 91       	pop	r16
    7690:	ff 90       	pop	r15
    7692:	ef 90       	pop	r14
    7694:	df 90       	pop	r13
    7696:	cf 90       	pop	r12
    7698:	bf 90       	pop	r11
    769a:	08 95       	ret

0000769c <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit()
{
    769c:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
    769e:	85 e4       	ldi	r24, 0x45	; 69
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	0c de       	rcall	.-1000   	; 0x72bc <sockInit>

#ifndef _TFTP_RANDOM_PORT
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
    76a4:	87 e1       	ldi	r24, 0x17	; 23
    76a6:	90 e0       	ldi	r25, 0x00	; 0
    76a8:	d6 d1       	rcall	.+940    	; 0x7a56 <__eerd_byte_m328p>
    76aa:	8b 3b       	cpi	r24, 0xBB	; 187
    76ac:	91 f4       	brne	.+36     	; 0x76d2 <tftpInit+0x36>
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
    76ae:	89 e1       	ldi	r24, 0x19	; 25
    76b0:	90 e0       	ldi	r25, 0x00	; 0
    76b2:	d1 d1       	rcall	.+930    	; 0x7a56 <__eerd_byte_m328p>
    76b4:	c8 2f       	mov	r28, r24
    76b6:	88 e1       	ldi	r24, 0x18	; 24
    76b8:	90 e0       	ldi	r25, 0x00	; 0
    76ba:	cd d1       	rcall	.+922    	; 0x7a56 <__eerd_byte_m328p>
    76bc:	2c 2f       	mov	r18, r28
    76be:	30 e0       	ldi	r19, 0x00	; 0
    76c0:	32 2f       	mov	r19, r18
    76c2:	22 27       	eor	r18, r18
    76c4:	28 0f       	add	r18, r24
    76c6:	31 1d       	adc	r19, r1
    76c8:	30 93 27 01 	sts	0x0127, r19
    76cc:	20 93 26 01 	sts	0x0126, r18
    76d0:	06 c0       	rjmp	.+12     	; 0x76de <tftpInit+0x42>
	else
		tftpTransferPort = TFTP_STATIC_PORT;
    76d2:	89 e7       	ldi	r24, 0x79	; 121
    76d4:	97 eb       	ldi	r25, 0xB7	; 183
    76d6:	90 93 27 01 	sts	0x0127, r25
    76da:	80 93 26 01 	sts	0x0126, r24
#ifndef _TFTP_RANDOM_PORT
	traceln("\t   Port: ");
	tracenum(tftpTransferPort);
#endif
#endif
}
    76de:	cf 91       	pop	r28
    76e0:	08 95       	ret

000076e2 <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll()
{
    76e2:	cf 93       	push	r28
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);
    76e4:	86 e2       	ldi	r24, 0x26	; 38
    76e6:	97 e0       	ldi	r25, 0x07	; 7
    76e8:	8d dd       	rcall	.-1254   	; 0x7204 <netReadWord>
// 			_delay_ms(400);
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
    76ea:	89 2b       	or	r24, r25
    76ec:	11 f4       	brne	.+4      	; 0x76f2 <tftpPoll+0x10>
		netWriteReg(REG_S3_CR, CR_CLOSE);
		// Complete
		return(0);
	}
	// Tftp continues
	return(1);
    76ee:	81 e0       	ldi	r24, 0x01	; 1
    76f0:	21 c0       	rjmp	.+66     	; 0x7734 <tftpPoll+0x52>
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
    76f2:	81 e0       	ldi	r24, 0x01	; 1
    76f4:	80 93 29 01 	sts	0x0129, r24

		while((netReadReg(REG_S3_IR) & IR_RECV)) {
    76f8:	0d c0       	rjmp	.+26     	; 0x7714 <tftpPoll+0x32>
			netWriteReg(REG_S3_IR, IR_RECV);
    76fa:	64 e0       	ldi	r22, 0x04	; 4
    76fc:	82 e0       	ldi	r24, 0x02	; 2
    76fe:	97 e0       	ldi	r25, 0x07	; 7
    7700:	4e dd       	rcall	.-1380   	; 0x719e <netWriteReg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7702:	2f ef       	ldi	r18, 0xFF	; 255
    7704:	87 e8       	ldi	r24, 0x87	; 135
    7706:	93 e1       	ldi	r25, 0x13	; 19
    7708:	21 50       	subi	r18, 0x01	; 1
    770a:	80 40       	sbci	r24, 0x00	; 0
    770c:	90 40       	sbci	r25, 0x00	; 0
    770e:	e1 f7       	brne	.-8      	; 0x7708 <tftpPoll+0x26>
    7710:	00 c0       	rjmp	.+0      	; 0x7712 <tftpPoll+0x30>
    7712:	00 00       	nop
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;

		while((netReadReg(REG_S3_IR) & IR_RECV)) {
    7714:	82 e0       	ldi	r24, 0x02	; 2
    7716:	97 e0       	ldi	r25, 0x07	; 7
    7718:	5b dd       	rcall	.-1354   	; 0x71d0 <netReadReg>
    771a:	82 fd       	sbrc	r24, 2
    771c:	ee cf       	rjmp	.-36     	; 0x76fa <tftpPoll+0x18>
		// Process Packet and get TFTP response code
#ifdef _DEBUG_TFTP
		packetSize = netReadWord(REG_S3_RX_RSR0);
		response = processPacket(packetSize);
#else
		response = processPacket();
    771e:	f2 dd       	rcall	.-1052   	; 0x7304 <processPacket>
    7720:	c8 2f       	mov	r28, r24
#endif
		// Send the response
		sendResponse(response);
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	2f df       	rcall	.-418    	; 0x7584 <sendResponse>
	}
	if(response == FINAL_ACK) {
    7726:	c4 30       	cpi	r28, 0x04	; 4
    7728:	11 f7       	brne	.-60     	; 0x76ee <tftpPoll+0xc>
		netWriteReg(REG_S3_CR, CR_CLOSE);
    772a:	60 e1       	ldi	r22, 0x10	; 16
    772c:	81 e0       	ldi	r24, 0x01	; 1
    772e:	97 e0       	ldi	r25, 0x07	; 7
    7730:	36 dd       	rcall	.-1428   	; 0x719e <netWriteReg>
		// Complete
		return(0);
    7732:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Tftp continues
	return(1);
}
    7734:	cf 91       	pop	r28
    7736:	08 95       	ret

00007738 <validImage>:
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t* base)
{
    7738:	20 e0       	ldi	r18, 0x00	; 0
    773a:	30 e0       	ldi	r19, 0x00	; 0
#include "validate.h"
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t* base)
    773c:	fc 01       	movw	r30, r24
    773e:	e2 0f       	add	r30, r18
    7740:	f3 1f       	adc	r31, r19
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    7742:	40 81       	ld	r20, Z
    7744:	4c 30       	cpi	r20, 0x0C	; 12
    7746:	51 f4       	brne	.+20     	; 0x775c <validImage+0x24>
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
		}
		if(base[i + 1] != 0x94) {
    7748:	41 81       	ldd	r20, Z+1	; 0x01
    774a:	44 39       	cpi	r20, 0x94	; 148
    774c:	39 f4       	brne	.+14     	; 0x775c <validImage+0x24>
    774e:	2c 5f       	subi	r18, 0xFC	; 252
    7750:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    7752:	24 33       	cpi	r18, 0x34	; 52
    7754:	31 05       	cpc	r19, r1
    7756:	91 f7       	brne	.-28     	; 0x773c <validImage+0x4>
		}
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
    7758:	81 e0       	ldi	r24, 0x01	; 1
    775a:	08 95       	ret
			tracenum(i);
			trace(" with ");
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
    775c:	80 e0       	ldi	r24, 0x00	; 0
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
}
    775e:	08 95       	ret

00007760 <watchdogDisable>:
 */
uint8_t watchdogDisable(void)
{
	uint8_t mcusr_mirror;

	mcusr_mirror = MCUSR;
    7760:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
    7762:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    7764:	98 e1       	ldi	r25, 0x18	; 24
    7766:	0f b6       	in	r0, 0x3f	; 63
    7768:	f8 94       	cli
    776a:	90 93 60 00 	sts	0x0060, r25
    776e:	10 92 60 00 	sts	0x0060, r1
    7772:	0f be       	out	0x3f, r0	; 63

	return(mcusr_mirror);
}
    7774:	08 95       	ret

00007776 <watchdogReset>:

void watchdogReset(void)
{
	wdt_reset();
    7776:	a8 95       	wdr
    7778:	08 95       	ret

0000777a <watchdogConfig>:
}

void watchdogConfig(uint8_t x)
{
	WDTCSR = _BV(WDCE) | _BV(WDE);
    777a:	e0 e6       	ldi	r30, 0x60	; 96
    777c:	f0 e0       	ldi	r31, 0x00	; 0
    777e:	98 e1       	ldi	r25, 0x18	; 24
    7780:	90 83       	st	Z, r25
	WDTCSR = x;
    7782:	80 83       	st	Z, r24
    7784:	08 95       	ret

00007786 <serialInit>:
#include "pin_defs.h"


void serialInit()
{
	UCSR0A = _BV(U2X0); //Double speed mode USART0
    7786:	82 e0       	ldi	r24, 0x02	; 2
    7788:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    778c:	88 e1       	ldi	r24, 0x18	; 24
    778e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7792:	86 e0       	ldi	r24, 0x06	; 6
    7794:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    7798:	80 e1       	ldi	r24, 0x10	; 16
    779a:	80 93 c4 00 	sts	0x00C4, r24
    779e:	08 95       	ret

000077a0 <putch>:
}


void putch(uint8_t c)
{
	while(!(UCSR0A & _BV(UDRE0)));
    77a0:	90 91 c0 00 	lds	r25, 0x00C0
    77a4:	95 ff       	sbrs	r25, 5
    77a6:	fc cf       	rjmp	.-8      	; 0x77a0 <putch>
	UDR0 = c;
    77a8:	80 93 c6 00 	sts	0x00C6, r24
    77ac:	08 95       	ret

000077ae <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
    77ae:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    77b0:	8a 30       	cpi	r24, 0x0A	; 10
    77b2:	08 f0       	brcs	.+2      	; 0x77b6 <puthex+0x8>
    77b4:	89 5f       	subi	r24, 0xF9	; 249
	while(!(UCSR0A & _BV(UDRE0)));
    77b6:	90 91 c0 00 	lds	r25, 0x00C0
    77ba:	95 ff       	sbrs	r25, 5
    77bc:	fc cf       	rjmp	.-8      	; 0x77b6 <puthex+0x8>
	UDR0 = c + '0';
    77be:	80 5d       	subi	r24, 0xD0	; 208
    77c0:	80 93 c6 00 	sts	0x00C6, r24
    77c4:	08 95       	ret

000077c6 <getch>:

uint8_t getch(void)
{
	uint8_t ch;

	while(!(UCSR0A & _BV(RXC0)));
    77c6:	80 91 c0 00 	lds	r24, 0x00C0
    77ca:	87 ff       	sbrs	r24, 7
    77cc:	fc cf       	rjmp	.-8      	; 0x77c6 <getch>
	if(!(UCSR0A & _BV(FE0))) {
    77ce:	80 91 c0 00 	lds	r24, 0x00C0
    77d2:	84 ff       	sbrs	r24, 4
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		watchdogReset();
    77d4:	d0 df       	rcall	.-96     	; 0x7776 <watchdogReset>
	}
	ch = UDR0;
    77d6:	80 91 c6 00 	lds	r24, 0x00C6

	return ch;
}
    77da:	08 95       	ret

000077dc <updateLed>:
uint16_t tick = 0;


void updateLed(void)
{
	uint16_t nextTimer1 = TCNT1;
    77dc:	80 91 84 00 	lds	r24, 0x0084
    77e0:	90 91 85 00 	lds	r25, 0x0085
	if(nextTimer1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    77e4:	92 ff       	sbrs	r25, 2
    77e6:	05 c0       	rjmp	.+10     	; 0x77f2 <updateLed+0x16>
    77e8:	25 b1       	in	r18, 0x05	; 5
    77ea:	32 e0       	ldi	r19, 0x02	; 2
    77ec:	23 27       	eor	r18, r19
    77ee:	25 b9       	out	0x05, r18	; 5
    77f0:	01 c0       	rjmp	.+2      	; 0x77f4 <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    77f2:	29 98       	cbi	0x05, 1	; 5
	if(nextTimer1 < lastTimer1) {
    77f4:	20 91 2a 01 	lds	r18, 0x012A
    77f8:	30 91 2b 01 	lds	r19, 0x012B
    77fc:	82 17       	cp	r24, r18
    77fe:	93 07       	cpc	r25, r19
    7800:	50 f4       	brcc	.+20     	; 0x7816 <updateLed+0x3a>
		tick++;
    7802:	20 91 22 01 	lds	r18, 0x0122
    7806:	30 91 23 01 	lds	r19, 0x0123
    780a:	2f 5f       	subi	r18, 0xFF	; 255
    780c:	3f 4f       	sbci	r19, 0xFF	; 255
    780e:	30 93 23 01 	sts	0x0123, r19
    7812:	20 93 22 01 	sts	0x0122, r18
		tracenum(nextTimer1);
		traceln(" lTM: ");
		tracenum(lastTimer1);
#endif
	}
	lastTimer1 = nextTimer1;
    7816:	90 93 2b 01 	sts	0x012B, r25
    781a:	80 93 2a 01 	sts	0x012A, r24
    781e:	08 95       	ret

00007820 <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
    7820:	10 92 85 00 	sts	0x0085, r1
    7824:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
    7828:	10 92 23 01 	sts	0x0123, r1
    782c:	10 92 22 01 	sts	0x0122, r1
    7830:	08 95       	ret

00007832 <timedOut>:
}

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
	if (pgm_read_word(0x0000) == 0xFFFF) return(0);
    7832:	e0 e0       	ldi	r30, 0x00	; 0
    7834:	f0 e0       	ldi	r31, 0x00	; 0
    7836:	85 91       	lpm	r24, Z+
    7838:	94 91       	lpm	r25, Z
    783a:	01 96       	adiw	r24, 0x01	; 1
    783c:	41 f0       	breq	.+16     	; 0x784e <timedOut+0x1c>
	if(tick > TIMEOUT) return(1);
    783e:	81 e0       	ldi	r24, 0x01	; 1
    7840:	20 91 22 01 	lds	r18, 0x0122
    7844:	30 91 23 01 	lds	r19, 0x0123
    7848:	25 30       	cpi	r18, 0x05	; 5
    784a:	31 05       	cpc	r19, r1
    784c:	08 f4       	brcc	.+2      	; 0x7850 <timedOut+0x1e>
}

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
	if (pgm_read_word(0x0000) == 0xFFFF) return(0);
    784e:	80 e0       	ldi	r24, 0x00	; 0
	if(tick > TIMEOUT) return(1);
	else return(0);
}
    7850:	08 95       	ret

00007852 <verifySpace>:
uint8_t  length;


void verifySpace()
{
	if(getch() != CRC_EOP) {
    7852:	b9 df       	rcall	.-142    	; 0x77c6 <getch>
    7854:	80 32       	cpi	r24, 0x20	; 32
    7856:	19 f0       	breq	.+6      	; 0x785e <verifySpace+0xc>
		watchdogConfig(WATCHDOG_16MS);	// shorten WD timeout
    7858:	88 e0       	ldi	r24, 0x08	; 8
    785a:	8f df       	rcall	.-226    	; 0x777a <watchdogConfig>
    785c:	ff cf       	rjmp	.-2      	; 0x785c <verifySpace+0xa>
		while(1)						// and busy-loop so that WD causes
			;							// a reset and app start.
	}
	putch(STK_INSYNC);
    785e:	84 e1       	ldi	r24, 0x14	; 20
    7860:	9f cf       	rjmp	.-194    	; 0x77a0 <putch>

00007862 <getNch>:
}


void getNch(uint8_t count)
{
    7862:	cf 93       	push	r28
    7864:	c8 2f       	mov	r28, r24
	do getch();
    7866:	af df       	rcall	.-162    	; 0x77c6 <getch>
	while(--count);
    7868:	c1 50       	subi	r28, 0x01	; 1
    786a:	e9 f7       	brne	.-6      	; 0x7866 <getNch+0x4>
	verifySpace();
}
    786c:	cf 91       	pop	r28

void getNch(uint8_t count)
{
	do getch();
	while(--count);
	verifySpace();
    786e:	f1 cf       	rjmp	.-30     	; 0x7852 <verifySpace>

00007870 <proccessCommand>:
}


uint8_t proccessCommand()
{
    7870:	0f 93       	push	r16
    7872:	1f 93       	push	r17
    7874:	cf 93       	push	r28
    7876:	df 93       	push	r29
    7878:	cd b7       	in	r28, 0x3d	; 61
    787a:	de b7       	in	r29, 0x3e	; 62
    787c:	c1 50       	subi	r28, 0x01	; 1
    787e:	d1 40       	sbci	r29, 0x01	; 1
    7880:	de bf       	out	0x3e, r29	; 62
    7882:	cd bf       	out	0x3d, r28	; 61
	uint8_t ch;

	ch = getch();
    7884:	a0 df       	rcall	.-192    	; 0x77c6 <getch>

	if(ch == STK_GET_PARAMETER) {
    7886:	81 34       	cpi	r24, 0x41	; 65
    7888:	b1 f4       	brne	.+44     	; 0x78b6 <proccessCommand+0x46>
		unsigned char which = getch();
    788a:	9d df       	rcall	.-198    	; 0x77c6 <getch>
		verifySpace();
    788c:	cf 5f       	subi	r28, 0xFF	; 255
    788e:	de 4f       	sbci	r29, 0xFE	; 254
    7890:	88 83       	st	Y, r24
    7892:	c1 50       	subi	r28, 0x01	; 1
    7894:	d1 40       	sbci	r29, 0x01	; 1
    7896:	dd df       	rcall	.-70     	; 0x7852 <verifySpace>
		if(which == 0x82) {
    7898:	cf 5f       	subi	r28, 0xFF	; 255
    789a:	de 4f       	sbci	r29, 0xFE	; 254
    789c:	88 81       	ld	r24, Y
    789e:	c1 50       	subi	r28, 0x01	; 1
    78a0:	d1 40       	sbci	r29, 0x01	; 1
    78a2:	82 38       	cpi	r24, 0x82	; 130
    78a4:	11 f4       	brne	.+4      	; 0x78aa <proccessCommand+0x3a>
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(ARIADNE_MINVER);
    78a6:	84 e0       	ldi	r24, 0x04	; 4
    78a8:	04 c0       	rjmp	.+8      	; 0x78b2 <proccessCommand+0x42>
		} else if(which == 0x81) {
    78aa:	81 38       	cpi	r24, 0x81	; 129
    78ac:	09 f4       	brne	.+2      	; 0x78b0 <proccessCommand+0x40>
    78ae:	1f c0       	rjmp	.+62     	; 0x78ee <proccessCommand+0x7e>
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
    78b0:	83 e0       	ldi	r24, 0x03	; 3
    78b2:	76 df       	rcall	.-276    	; 0x77a0 <putch>
    78b4:	b0 c0       	rjmp	.+352    	; 0x7a16 <proccessCommand+0x1a6>
		}
	} else if(ch == STK_SET_DEVICE) {
    78b6:	82 34       	cpi	r24, 0x42	; 66
    78b8:	11 f4       	brne	.+4      	; 0x78be <proccessCommand+0x4e>
		// SET DEVICE is ignored
		getNch(20);
    78ba:	84 e1       	ldi	r24, 0x14	; 20
    78bc:	03 c0       	rjmp	.+6      	; 0x78c4 <proccessCommand+0x54>
	} else if(ch == STK_SET_DEVICE_EXT) {
    78be:	85 34       	cpi	r24, 0x45	; 69
    78c0:	19 f4       	brne	.+6      	; 0x78c8 <proccessCommand+0x58>
		// SET DEVICE EXT is ignored
		getNch(4);
    78c2:	84 e0       	ldi	r24, 0x04	; 4
    78c4:	ce df       	rcall	.-100    	; 0x7862 <getNch>
    78c6:	a7 c0       	rjmp	.+334    	; 0x7a16 <proccessCommand+0x1a6>
	} else if(ch == STK_LOAD_ADDRESS) {
    78c8:	85 35       	cpi	r24, 0x55	; 85
    78ca:	69 f4       	brne	.+26     	; 0x78e6 <proccessCommand+0x76>
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    78cc:	7c df       	rcall	.-264    	; 0x77c6 <getch>
    78ce:	18 2f       	mov	r17, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
    78d0:	7a df       	rcall	.-268    	; 0x77c6 <getch>
    78d2:	21 2f       	mov	r18, r17
    78d4:	30 e0       	ldi	r19, 0x00	; 0
    78d6:	38 2b       	or	r19, r24
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    78d8:	22 0f       	add	r18, r18
    78da:	33 1f       	adc	r19, r19
		address = newAddress;
    78dc:	30 93 25 01 	sts	0x0125, r19
    78e0:	20 93 24 01 	sts	0x0124, r18
    78e4:	97 c0       	rjmp	.+302    	; 0x7a14 <proccessCommand+0x1a4>
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    78e6:	86 35       	cpi	r24, 0x56	; 86
    78e8:	21 f4       	brne	.+8      	; 0x78f2 <proccessCommand+0x82>
		// UNIVERSAL command is ignored
		getNch(4);
    78ea:	84 e0       	ldi	r24, 0x04	; 4
    78ec:	ba df       	rcall	.-140    	; 0x7862 <getNch>
		putch(0x00);
    78ee:	80 e0       	ldi	r24, 0x00	; 0
    78f0:	e0 cf       	rjmp	.-64     	; 0x78b2 <proccessCommand+0x42>
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    78f2:	84 36       	cpi	r24, 0x64	; 100
    78f4:	09 f0       	breq	.+2      	; 0x78f8 <proccessCommand+0x88>
    78f6:	5e c0       	rjmp	.+188    	; 0x79b4 <proccessCommand+0x144>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t  buff[256];
		uint8_t* bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    78f8:	66 df       	rcall	.-308    	; 0x77c6 <getch>
		length = getch();
    78fa:	65 df       	rcall	.-310    	; 0x77c6 <getch>
    78fc:	80 93 2c 01 	sts	0x012C, r24
		getch();
    7900:	62 df       	rcall	.-316    	; 0x77c6 <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7902:	e0 91 24 01 	lds	r30, 0x0124
    7906:	f0 91 25 01 	lds	r31, 0x0125
    790a:	e1 15       	cp	r30, r1
    790c:	80 e7       	ldi	r24, 0x70	; 112
    790e:	f8 07       	cpc	r31, r24
    7910:	20 f4       	brcc	.+8      	; 0x791a <proccessCommand+0xaa>
    7912:	83 e0       	ldi	r24, 0x03	; 3
    7914:	80 93 57 00 	sts	0x0057, r24
    7918:	e8 95       	spm
    791a:	8e 01       	movw	r16, r28
    791c:	0f 5f       	subi	r16, 0xFF	; 255
    791e:	1f 4f       	sbci	r17, 0xFF	; 255

		// While that is going on, read in page contents
		bufPtr = buff;
		do* bufPtr++ = getch();
    7920:	52 df       	rcall	.-348    	; 0x77c6 <getch>
    7922:	f8 01       	movw	r30, r16
    7924:	81 93       	st	Z+, r24
    7926:	8f 01       	movw	r16, r30
		while(--length);
    7928:	80 91 2c 01 	lds	r24, 0x012C
    792c:	81 50       	subi	r24, 0x01	; 1
    792e:	80 93 2c 01 	sts	0x012C, r24
    7932:	81 11       	cpse	r24, r1
    7934:	f5 cf       	rjmp	.-22     	; 0x7920 <proccessCommand+0xb0>

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) boot_page_erase((uint16_t)(void*)address);
    7936:	e0 91 24 01 	lds	r30, 0x0124
    793a:	f0 91 25 01 	lds	r31, 0x0125
    793e:	e1 15       	cp	r30, r1
    7940:	80 e7       	ldi	r24, 0x70	; 112
    7942:	f8 07       	cpc	r31, r24
    7944:	20 f0       	brcs	.+8      	; 0x794e <proccessCommand+0xde>
    7946:	83 e0       	ldi	r24, 0x03	; 3
    7948:	80 93 57 00 	sts	0x0057, r24
    794c:	e8 95       	spm

		// Read command terminator, start reply
		verifySpace();
    794e:	81 df       	rcall	.-254    	; 0x7852 <verifySpace>

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    7950:	07 b6       	in	r0, 0x37	; 55
    7952:	00 fc       	sbrc	r0, 0
    7954:	fd cf       	rjmp	.-6      	; 0x7950 <proccessCommand+0xe0>

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void*)address;
    7956:	40 91 24 01 	lds	r20, 0x0124
    795a:	50 91 25 01 	lds	r21, 0x0125
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    795e:	29 81       	ldd	r18, Y+1	; 0x01
    7960:	80 e0       	ldi	r24, 0x00	; 0
    7962:	90 e0       	ldi	r25, 0x00	; 0
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7964:	61 e0       	ldi	r22, 0x01	; 1
	while(--count);
	verifySpace();
}


uint8_t proccessCommand()
    7966:	a1 e0       	ldi	r26, 0x01	; 1
    7968:	b0 e0       	ldi	r27, 0x00	; 0
    796a:	ac 0f       	add	r26, r28
    796c:	bd 1f       	adc	r27, r29
    796e:	a8 0f       	add	r26, r24
    7970:	b9 1f       	adc	r27, r25
    7972:	fc 01       	movw	r30, r24
    7974:	e4 0f       	add	r30, r20
    7976:	f5 1f       	adc	r31, r21
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7978:	11 96       	adiw	r26, 0x01	; 1
    797a:	7c 91       	ld	r23, X
    797c:	11 97       	sbiw	r26, 0x01	; 1
    797e:	30 e0       	ldi	r19, 0x00	; 0
    7980:	37 2b       	or	r19, r23
			boot_page_fill((uint16_t)(void*)addrPtr, a);
    7982:	09 01       	movw	r0, r18
    7984:	60 93 57 00 	sts	0x0057, r22
    7988:	e8 95       	spm
    798a:	11 24       	eor	r1, r1
			addrPtr += 2;
		} while(--ch);
    798c:	8e 37       	cpi	r24, 0x7E	; 126
    798e:	91 05       	cpc	r25, r1
    7990:	21 f0       	breq	.+8      	; 0x799a <proccessCommand+0x12a>
		addrPtr = (uint16_t)(void*)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
    7992:	12 96       	adiw	r26, 0x02	; 2
    7994:	2c 91       	ld	r18, X
    7996:	02 96       	adiw	r24, 0x02	; 2
    7998:	e6 cf       	rjmp	.-52     	; 0x7966 <proccessCommand+0xf6>
			boot_page_fill((uint16_t)(void*)addrPtr, a);
			addrPtr += 2;
		} while(--ch);

		// Write from programming buffer
		boot_page_write((uint16_t)(void*)address);
    799a:	85 e0       	ldi	r24, 0x05	; 5
    799c:	fa 01       	movw	r30, r20
    799e:	80 93 57 00 	sts	0x0057, r24
    79a2:	e8 95       	spm
		boot_spm_busy_wait();
    79a4:	07 b6       	in	r0, 0x37	; 55
    79a6:	00 fc       	sbrc	r0, 0
    79a8:	fd cf       	rjmp	.-6      	; 0x79a4 <proccessCommand+0x134>

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    79aa:	81 e1       	ldi	r24, 0x11	; 17
    79ac:	80 93 57 00 	sts	0x0057, r24
    79b0:	e8 95       	spm
    79b2:	31 c0       	rjmp	.+98     	; 0x7a16 <proccessCommand+0x1a6>
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    79b4:	84 37       	cpi	r24, 0x74	; 116
    79b6:	d1 f4       	brne	.+52     	; 0x79ec <proccessCommand+0x17c>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    79b8:	06 df       	rcall	.-500    	; 0x77c6 <getch>
		length = getch();
    79ba:	05 df       	rcall	.-502    	; 0x77c6 <getch>
    79bc:	80 93 2c 01 	sts	0x012C, r24
		getch();
    79c0:	02 df       	rcall	.-508    	; 0x77c6 <getch>

		verifySpace();
    79c2:	47 df       	rcall	.-370    	; 0x7852 <verifySpace>
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    79c4:	e0 91 24 01 	lds	r30, 0x0124
    79c8:	f0 91 25 01 	lds	r31, 0x0125
    79cc:	cf 01       	movw	r24, r30
    79ce:	01 96       	adiw	r24, 0x01	; 1
    79d0:	90 93 25 01 	sts	0x0125, r25
    79d4:	80 93 24 01 	sts	0x0124, r24
    79d8:	84 91       	lpm	r24, Z
    79da:	e2 de       	rcall	.-572    	; 0x77a0 <putch>
		while(--length);
    79dc:	80 91 2c 01 	lds	r24, 0x012C
    79e0:	81 50       	subi	r24, 0x01	; 1
    79e2:	80 93 2c 01 	sts	0x012C, r24
    79e6:	81 11       	cpse	r24, r1
    79e8:	ed cf       	rjmp	.-38     	; 0x79c4 <proccessCommand+0x154>
    79ea:	15 c0       	rjmp	.+42     	; 0x7a16 <proccessCommand+0x1a6>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    79ec:	85 37       	cpi	r24, 0x75	; 117
    79ee:	39 f4       	brne	.+14     	; 0x79fe <proccessCommand+0x18e>
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    79f0:	30 df       	rcall	.-416    	; 0x7852 <verifySpace>
		putch(SIGNATURE_0);
    79f2:	8e e1       	ldi	r24, 0x1E	; 30
    79f4:	d5 de       	rcall	.-598    	; 0x77a0 <putch>
		putch(SIGNATURE_1);
    79f6:	85 e9       	ldi	r24, 0x95	; 149
    79f8:	d3 de       	rcall	.-602    	; 0x77a0 <putch>
		putch(SIGNATURE_2);
    79fa:	8f e0       	ldi	r24, 0x0F	; 15
    79fc:	5a cf       	rjmp	.-332    	; 0x78b2 <proccessCommand+0x42>
	} else if(ch == STK_LEAVE_PROGMODE) {
    79fe:	81 35       	cpi	r24, 0x51	; 81
    7a00:	49 f4       	brne	.+18     	; 0x7a14 <proccessCommand+0x1a4>
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    7a02:	27 df       	rcall	.-434    	; 0x7852 <verifySpace>
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7a04:	6e ee       	ldi	r22, 0xEE	; 238
    7a06:	82 e0       	ldi	r24, 0x02	; 2
    7a08:	90 e0       	ldi	r25, 0x00	; 0
    7a0a:	2d d0       	rcall	.+90     	; 0x7a66 <__eewr_byte_m328p>
		putch(STK_OK);
    7a0c:	80 e1       	ldi	r24, 0x10	; 16
    7a0e:	c8 de       	rcall	.-624    	; 0x77a0 <putch>
		return(0);
    7a10:	80 e0       	ldi	r24, 0x00	; 0
    7a12:	04 c0       	rjmp	.+8      	; 0x7a1c <proccessCommand+0x1ac>
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
    7a14:	1e df       	rcall	.-452    	; 0x7852 <verifySpace>
	}
	putch(STK_OK);
    7a16:	80 e1       	ldi	r24, 0x10	; 16
    7a18:	c3 de       	rcall	.-634    	; 0x77a0 <putch>
	return(1);
    7a1a:	81 e0       	ldi	r24, 0x01	; 1
}
    7a1c:	cf 5f       	subi	r28, 0xFF	; 255
    7a1e:	de 4f       	sbci	r29, 0xFE	; 254
    7a20:	de bf       	out	0x3e, r29	; 62
    7a22:	cd bf       	out	0x3d, r28	; 61
    7a24:	df 91       	pop	r29
    7a26:	cf 91       	pop	r28
    7a28:	1f 91       	pop	r17
    7a2a:	0f 91       	pop	r16
    7a2c:	08 95       	ret

00007a2e <serialPoll>:


uint8_t serialPoll()
{
	if(UCSR0A & _BV(RXC0)) {
    7a2e:	80 91 c0 00 	lds	r24, 0x00C0
    7a32:	87 ff       	sbrs	r24, 7
    7a34:	05 c0       	rjmp	.+10     	; 0x7a40 <serialPoll+0x12>
		resetTick();
    7a36:	f4 de       	rcall	.-536    	; 0x7820 <resetTick>
		serialFlashing = TRUE;
    7a38:	81 e0       	ldi	r24, 0x01	; 1
    7a3a:	80 93 28 01 	sts	0x0128, r24
		return(proccessCommand());
    7a3e:	18 cf       	rjmp	.-464    	; 0x7870 <proccessCommand>
	}
	return(1);
}
    7a40:	81 e0       	ldi	r24, 0x01	; 1
    7a42:	08 95       	ret

00007a44 <memcpy_P>:
    7a44:	fb 01       	movw	r30, r22
    7a46:	dc 01       	movw	r26, r24
    7a48:	02 c0       	rjmp	.+4      	; 0x7a4e <memcpy_P+0xa>
    7a4a:	05 90       	lpm	r0, Z+
    7a4c:	0d 92       	st	X+, r0
    7a4e:	41 50       	subi	r20, 0x01	; 1
    7a50:	50 40       	sbci	r21, 0x00	; 0
    7a52:	d8 f7       	brcc	.-10     	; 0x7a4a <memcpy_P+0x6>
    7a54:	08 95       	ret

00007a56 <__eerd_byte_m328p>:
    7a56:	f9 99       	sbic	0x1f, 1	; 31
    7a58:	fe cf       	rjmp	.-4      	; 0x7a56 <__eerd_byte_m328p>
    7a5a:	92 bd       	out	0x22, r25	; 34
    7a5c:	81 bd       	out	0x21, r24	; 33
    7a5e:	f8 9a       	sbi	0x1f, 0	; 31
    7a60:	99 27       	eor	r25, r25
    7a62:	80 b5       	in	r24, 0x20	; 32
    7a64:	08 95       	ret

00007a66 <__eewr_byte_m328p>:
    7a66:	26 2f       	mov	r18, r22

00007a68 <__eewr_r18_m328p>:
    7a68:	f9 99       	sbic	0x1f, 1	; 31
    7a6a:	fe cf       	rjmp	.-4      	; 0x7a68 <__eewr_r18_m328p>
    7a6c:	1f ba       	out	0x1f, r1	; 31
    7a6e:	92 bd       	out	0x22, r25	; 34
    7a70:	81 bd       	out	0x21, r24	; 33
    7a72:	20 bd       	out	0x20, r18	; 32
    7a74:	0f b6       	in	r0, 0x3f	; 63
    7a76:	f8 94       	cli
    7a78:	fa 9a       	sbi	0x1f, 2	; 31
    7a7a:	f9 9a       	sbi	0x1f, 1	; 31
    7a7c:	0f be       	out	0x3f, r0	; 63
    7a7e:	01 96       	adiw	r24, 0x01	; 1
    7a80:	08 95       	ret

00007a82 <_exit>:
    7a82:	f8 94       	cli

00007a84 <__stop_program>:
    7a84:	ff cf       	rjmp	.-2      	; 0x7a84 <__stop_program>
