
ariadne_atmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .note.gnu.build-id 00000024  00000000  00000000  000000d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .data         0000001c  00800200  0003e95a  00000a52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         0000095a  0003e000  0003e000  000000f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .bss          0000000e  0080021c  0080021c  00000a6e  2**0
                  ALLOC
  4 .stab         00003da4  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00001686  00000000  00000000  00004814  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005e9a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	8e c0       	rjmp	.+284    	; 0x3e11e <__ctors_end>
   3e002:	00 00       	nop
   3e004:	0b c1       	rjmp	.+534    	; 0x3e21c <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	09 c1       	rjmp	.+530    	; 0x3e21c <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	07 c1       	rjmp	.+526    	; 0x3e21c <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	05 c1       	rjmp	.+522    	; 0x3e21c <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	03 c1       	rjmp	.+518    	; 0x3e21c <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	01 c1       	rjmp	.+514    	; 0x3e21c <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	ff c0       	rjmp	.+510    	; 0x3e21c <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	fd c0       	rjmp	.+506    	; 0x3e21c <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	fb c0       	rjmp	.+502    	; 0x3e21c <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	f9 c0       	rjmp	.+498    	; 0x3e21c <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	f7 c0       	rjmp	.+494    	; 0x3e21c <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	f5 c0       	rjmp	.+490    	; 0x3e21c <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	f3 c0       	rjmp	.+486    	; 0x3e21c <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	f1 c0       	rjmp	.+482    	; 0x3e21c <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	ef c0       	rjmp	.+478    	; 0x3e21c <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	ed c0       	rjmp	.+474    	; 0x3e21c <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	eb c0       	rjmp	.+470    	; 0x3e21c <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	e9 c0       	rjmp	.+466    	; 0x3e21c <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	e7 c0       	rjmp	.+462    	; 0x3e21c <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	e5 c0       	rjmp	.+458    	; 0x3e21c <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	e3 c0       	rjmp	.+454    	; 0x3e21c <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	e1 c0       	rjmp	.+450    	; 0x3e21c <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	df c0       	rjmp	.+446    	; 0x3e21c <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	dd c0       	rjmp	.+442    	; 0x3e21c <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	db c0       	rjmp	.+438    	; 0x3e21c <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	d9 c0       	rjmp	.+434    	; 0x3e21c <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	d7 c0       	rjmp	.+430    	; 0x3e21c <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	d5 c0       	rjmp	.+426    	; 0x3e21c <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	d3 c0       	rjmp	.+422    	; 0x3e21c <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	d1 c0       	rjmp	.+418    	; 0x3e21c <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	cf c0       	rjmp	.+414    	; 0x3e21c <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	cd c0       	rjmp	.+410    	; 0x3e21c <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	cb c0       	rjmp	.+406    	; 0x3e21c <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	c9 c0       	rjmp	.+402    	; 0x3e21c <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	c7 c0       	rjmp	.+398    	; 0x3e21c <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	c5 c0       	rjmp	.+394    	; 0x3e21c <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	c3 c0       	rjmp	.+390    	; 0x3e21c <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	c1 c0       	rjmp	.+386    	; 0x3e21c <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	bf c0       	rjmp	.+382    	; 0x3e21c <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	bd c0       	rjmp	.+378    	; 0x3e21c <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	bb c0       	rjmp	.+374    	; 0x3e21c <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	b9 c0       	rjmp	.+370    	; 0x3e21c <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	b7 c0       	rjmp	.+366    	; 0x3e21c <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	b5 c0       	rjmp	.+362    	; 0x3e21c <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	b3 c0       	rjmp	.+358    	; 0x3e21c <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	b1 c0       	rjmp	.+354    	; 0x3e21c <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	af c0       	rjmp	.+350    	; 0x3e21c <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	ad c0       	rjmp	.+346    	; 0x3e21c <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	ab c0       	rjmp	.+342    	; 0x3e21c <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	a9 c0       	rjmp	.+338    	; 0x3e21c <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	a7 c0       	rjmp	.+334    	; 0x3e21c <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	a5 c0       	rjmp	.+330    	; 0x3e21c <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	a3 c0       	rjmp	.+326    	; 0x3e21c <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	a1 c0       	rjmp	.+322    	; 0x3e21c <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	9f c0       	rjmp	.+318    	; 0x3e21c <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	9d c0       	rjmp	.+314    	; 0x3e21c <__bad_interrupt>
	...

0003e0e4 <tftp_invalid_image_packet>:
   3e0e4:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
   3e0f4:	67 65 20 66 69 6c 65 00                             ge file.

0003e0fc <tftp_unknown_error_packet>:
   3e0fc:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0003e107 <tftp_full_error_packet>:
   3e107:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0003e111 <tftp_opcode_error_packet>:
   3e111:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0003e11e <__ctors_end>:
   3e11e:	11 24       	eor	r1, r1
   3e120:	1f be       	out	0x3f, r1	; 63
   3e122:	cf ef       	ldi	r28, 0xFF	; 255
   3e124:	d1 e2       	ldi	r29, 0x21	; 33
   3e126:	de bf       	out	0x3e, r29	; 62
   3e128:	cd bf       	out	0x3d, r28	; 61
   3e12a:	01 e0       	ldi	r16, 0x01	; 1
   3e12c:	0c bf       	out	0x3c, r16	; 60

0003e12e <__do_copy_data>:
   3e12e:	12 e0       	ldi	r17, 0x02	; 2
   3e130:	a0 e0       	ldi	r26, 0x00	; 0
   3e132:	b2 e0       	ldi	r27, 0x02	; 2
   3e134:	ea e5       	ldi	r30, 0x5A	; 90
   3e136:	f9 ee       	ldi	r31, 0xE9	; 233
   3e138:	03 e0       	ldi	r16, 0x03	; 3
   3e13a:	0b bf       	out	0x3b, r16	; 59
   3e13c:	02 c0       	rjmp	.+4      	; 0x3e142 <__do_copy_data+0x14>
   3e13e:	07 90       	elpm	r0, Z+
   3e140:	0d 92       	st	X+, r0
   3e142:	ac 31       	cpi	r26, 0x1C	; 28
   3e144:	b1 07       	cpc	r27, r17
   3e146:	d9 f7       	brne	.-10     	; 0x3e13e <__do_copy_data+0x10>

0003e148 <__do_clear_bss>:
   3e148:	12 e0       	ldi	r17, 0x02	; 2
   3e14a:	ac e1       	ldi	r26, 0x1C	; 28
   3e14c:	b2 e0       	ldi	r27, 0x02	; 2
   3e14e:	01 c0       	rjmp	.+2      	; 0x3e152 <.do_clear_bss_start>

0003e150 <.do_clear_bss_loop>:
   3e150:	1d 92       	st	X+, r1

0003e152 <.do_clear_bss_start>:
   3e152:	aa 32       	cpi	r26, 0x2A	; 42
   3e154:	b1 07       	cpc	r27, r17
   3e156:	e1 f7       	brne	.-8      	; 0x3e150 <.do_clear_bss_loop>
   3e158:	01 d0       	rcall	.+2      	; 0x3e15c <main>
   3e15a:	fd c3       	rjmp	.+2042   	; 0x3e956 <_exit>

0003e15c <main>:
   3e15c:	56 d3       	rcall	.+1708   	; 0x3e80a <watchdogDisable>
   3e15e:	2f ef       	ldi	r18, 0xFF	; 255
   3e160:	85 ea       	ldi	r24, 0xA5	; 165
   3e162:	9e e0       	ldi	r25, 0x0E	; 14
   3e164:	21 50       	subi	r18, 0x01	; 1
   3e166:	80 40       	sbci	r24, 0x00	; 0
   3e168:	90 40       	sbci	r25, 0x00	; 0
   3e16a:	e1 f7       	brne	.-8      	; 0x3e164 <main+0x8>
   3e16c:	00 c0       	rjmp	.+0      	; 0x3e16e <main+0x12>
   3e16e:	00 00       	nop
   3e170:	11 24       	eor	r1, r1
   3e172:	85 e0       	ldi	r24, 0x05	; 5
   3e174:	80 93 81 00 	sts	0x0081, r24
   3e178:	80 e0       	ldi	r24, 0x00	; 0
   3e17a:	90 e0       	ldi	r25, 0x00	; 0
   3e17c:	d6 d3       	rcall	.+1964   	; 0x3e92a <__eerd_byte_m2560>
   3e17e:	88 23       	and	r24, r24
   3e180:	21 f0       	breq	.+8      	; 0x3e18a <main+0x2e>
   3e182:	60 e0       	ldi	r22, 0x00	; 0
   3e184:	80 e0       	ldi	r24, 0x00	; 0
   3e186:	90 e0       	ldi	r25, 0x00	; 0
   3e188:	d8 d3       	rcall	.+1968   	; 0x3e93a <__eewr_byte_m2560>
   3e18a:	81 e0       	ldi	r24, 0x01	; 1
   3e18c:	90 e0       	ldi	r25, 0x00	; 0
   3e18e:	cd d3       	rcall	.+1946   	; 0x3e92a <__eerd_byte_m2560>
   3e190:	84 30       	cpi	r24, 0x04	; 4
   3e192:	21 f0       	breq	.+8      	; 0x3e19c <main+0x40>
   3e194:	64 e0       	ldi	r22, 0x04	; 4
   3e196:	81 e0       	ldi	r24, 0x01	; 1
   3e198:	90 e0       	ldi	r25, 0x00	; 0
   3e19a:	cf d3       	rcall	.+1950   	; 0x3e93a <__eewr_byte_m2560>
   3e19c:	49 d3       	rcall	.+1682   	; 0x3e830 <serialInit>
   3e19e:	97 d0       	rcall	.+302    	; 0x3e2ce <netInit>
   3e1a0:	49 d2       	rcall	.+1170   	; 0x3e634 <tftpInit>
   3e1a2:	2f ef       	ldi	r18, 0xFF	; 255
   3e1a4:	85 ea       	ldi	r24, 0xA5	; 165
   3e1a6:	9e e0       	ldi	r25, 0x0E	; 14
   3e1a8:	21 50       	subi	r18, 0x01	; 1
   3e1aa:	80 40       	sbci	r24, 0x00	; 0
   3e1ac:	90 40       	sbci	r25, 0x00	; 0
   3e1ae:	e1 f7       	brne	.-8      	; 0x3e1a8 <main+0x4c>
   3e1b0:	00 c0       	rjmp	.+0      	; 0x3e1b2 <main+0x56>
   3e1b2:	00 00       	nop
   3e1b4:	10 92 28 02 	sts	0x0228, r1
   3e1b8:	10 92 29 02 	sts	0x0229, r1
   3e1bc:	c3 e0       	ldi	r28, 0x03	; 3
   3e1be:	c1 2c       	mov	r12, r1
   3e1c0:	d1 2c       	mov	r13, r1
   3e1c2:	76 01       	movw	r14, r12
   3e1c4:	80 91 28 02 	lds	r24, 0x0228
   3e1c8:	88 23       	and	r24, r24
   3e1ca:	29 f0       	breq	.+10     	; 0x3e1d6 <main+0x7a>
   3e1cc:	80 91 29 02 	lds	r24, 0x0229
   3e1d0:	88 23       	and	r24, r24
   3e1d2:	29 f0       	breq	.+10     	; 0x3e1de <main+0x82>
   3e1d4:	1a c0       	rjmp	.+52     	; 0x3e20a <main+0xae>
   3e1d6:	51 d2       	rcall	.+1186   	; 0x3e67a <tftpPoll>
   3e1d8:	81 11       	cpse	r24, r1
   3e1da:	f8 cf       	rjmp	.-16     	; 0x3e1cc <main+0x70>
   3e1dc:	18 c0       	rjmp	.+48     	; 0x3e20e <main+0xb2>
   3e1de:	8c d3       	rcall	.+1816   	; 0x3e8f8 <timedOut>
   3e1e0:	88 23       	and	r24, r24
   3e1e2:	99 f0       	breq	.+38     	; 0x3e20a <main+0xae>
   3e1e4:	82 e0       	ldi	r24, 0x02	; 2
   3e1e6:	90 e0       	ldi	r25, 0x00	; 0
   3e1e8:	a0 d3       	rcall	.+1856   	; 0x3e92a <__eerd_byte_m2560>
   3e1ea:	8e 3e       	cpi	r24, 0xEE	; 238
   3e1ec:	81 f0       	breq	.+32     	; 0x3e20e <main+0xb2>
   3e1ee:	80 91 29 02 	lds	r24, 0x0229
   3e1f2:	81 30       	cpi	r24, 0x01	; 1
   3e1f4:	51 f4       	brne	.+20     	; 0x3e20a <main+0xae>
   3e1f6:	f6 01       	movw	r30, r12
   3e1f8:	e0 92 5b 00 	sts	0x005B, r14
   3e1fc:	c0 93 57 00 	sts	0x0057, r28
   3e200:	e8 95       	spm
   3e202:	18 d2       	rcall	.+1072   	; 0x3e634 <tftpInit>
   3e204:	70 d3       	rcall	.+1760   	; 0x3e8e6 <resetTick>
   3e206:	10 92 29 02 	sts	0x0229, r1
   3e20a:	4c d3       	rcall	.+1688   	; 0x3e8a4 <updateLed>
   3e20c:	db cf       	rjmp	.-74     	; 0x3e1c4 <main+0x68>
   3e20e:	e0 91 1c 02 	lds	r30, 0x021C
   3e212:	f0 91 1d 02 	lds	r31, 0x021D
   3e216:	19 95       	eicall
   3e218:	80 e0       	ldi	r24, 0x00	; 0
   3e21a:	90 e0       	ldi	r25, 0x00	; 0

0003e21c <__bad_interrupt>:
   3e21c:	f1 ce       	rjmp	.-542    	; 0x3e000 <__vectors>

0003e21e <netWriteReg>:
	trace(", ");
	tracenum(value);
#endif

	// Send uint8_t to Ethernet controller
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   3e21e:	20 e5       	ldi	r18, 0x50	; 80
   3e220:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3e222:	2c 98       	cbi	0x05, 4	; 5
	SPDR = SPI_WRITE;
   3e224:	20 ef       	ldi	r18, 0xF0	; 240
   3e226:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e228:	0d b4       	in	r0, 0x2d	; 45
   3e22a:	07 fe       	sbrs	r0, 7
   3e22c:	fd cf       	rjmp	.-6      	; 0x3e228 <netWriteReg+0xa>
	SPDR = address >> 8;
   3e22e:	29 2f       	mov	r18, r25
   3e230:	33 27       	eor	r19, r19
   3e232:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e234:	0d b4       	in	r0, 0x2d	; 45
   3e236:	07 fe       	sbrs	r0, 7
   3e238:	fd cf       	rjmp	.-6      	; 0x3e234 <netWriteReg+0x16>
	SPDR = address & 0xff;
   3e23a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3e23c:	0d b4       	in	r0, 0x2d	; 45
   3e23e:	07 fe       	sbrs	r0, 7
   3e240:	fd cf       	rjmp	.-6      	; 0x3e23c <netWriteReg+0x1e>
	SPDR = value;
   3e242:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
   3e244:	0d b4       	in	r0, 0x2d	; 45
   3e246:	07 fe       	sbrs	r0, 7
   3e248:	fd cf       	rjmp	.-6      	; 0x3e244 <netWriteReg+0x26>
	SS_HIGH();
   3e24a:	2c 9a       	sbi	0x05, 4	; 5
	SPCR = 0; // Turn off SPI
   3e24c:	1c bc       	out	0x2c, r1	; 44
   3e24e:	08 95       	ret

0003e250 <netReadReg>:
//    tracenum(address);
//#endif

	// Read uint8_t from Ethernet controller
	uint8_t returnValue;
	SPCR = _BV(SPE) | _BV(MSTR);
   3e250:	20 e5       	ldi	r18, 0x50	; 80
   3e252:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3e254:	2c 98       	cbi	0x05, 4	; 5
	SPDR = SPI_READ;
   3e256:	2f e0       	ldi	r18, 0x0F	; 15
   3e258:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e25a:	0d b4       	in	r0, 0x2d	; 45
   3e25c:	07 fe       	sbrs	r0, 7
   3e25e:	fd cf       	rjmp	.-6      	; 0x3e25a <netReadReg+0xa>
	SPDR = address >> 8;
   3e260:	29 2f       	mov	r18, r25
   3e262:	33 27       	eor	r19, r19
   3e264:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e266:	0d b4       	in	r0, 0x2d	; 45
   3e268:	07 fe       	sbrs	r0, 7
   3e26a:	fd cf       	rjmp	.-6      	; 0x3e266 <netReadReg+0x16>
	SPDR = address & 0xff;
   3e26c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3e26e:	0d b4       	in	r0, 0x2d	; 45
   3e270:	07 fe       	sbrs	r0, 7
   3e272:	fd cf       	rjmp	.-6      	; 0x3e26e <netReadReg+0x1e>
	SPDR = 0;
   3e274:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
   3e276:	0d b4       	in	r0, 0x2d	; 45
   3e278:	07 fe       	sbrs	r0, 7
   3e27a:	fd cf       	rjmp	.-6      	; 0x3e276 <netReadReg+0x26>
	SS_HIGH();
   3e27c:	2c 9a       	sbi	0x05, 4	; 5
	returnValue = SPDR;
   3e27e:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
   3e280:	1c bc       	out	0x2c, r1	; 44
	return(returnValue);
}
   3e282:	08 95       	ret

0003e284 <netReadWord>:

uint16_t netReadWord(uint16_t address)
{
   3e284:	1f 93       	push	r17
   3e286:	cf 93       	push	r28
   3e288:	df 93       	push	r29
   3e28a:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((netReadReg(address) << 8) | netReadReg(address + 1));
   3e28c:	e1 df       	rcall	.-62     	; 0x3e250 <netReadReg>
   3e28e:	18 2f       	mov	r17, r24
   3e290:	ce 01       	movw	r24, r28
   3e292:	01 96       	adiw	r24, 0x01	; 1
   3e294:	dd df       	rcall	.-70     	; 0x3e250 <netReadReg>
   3e296:	21 2f       	mov	r18, r17
   3e298:	30 e0       	ldi	r19, 0x00	; 0
   3e29a:	32 2f       	mov	r19, r18
   3e29c:	22 27       	eor	r18, r18
   3e29e:	a9 01       	movw	r20, r18
   3e2a0:	48 2b       	or	r20, r24
}
   3e2a2:	ca 01       	movw	r24, r20
   3e2a4:	df 91       	pop	r29
   3e2a6:	cf 91       	pop	r28
   3e2a8:	1f 91       	pop	r17
   3e2aa:	08 95       	ret

0003e2ac <netWriteWord>:

void netWriteWord(uint16_t address, uint16_t value)
{
   3e2ac:	0f 93       	push	r16
   3e2ae:	1f 93       	push	r17
   3e2b0:	cf 93       	push	r28
   3e2b2:	df 93       	push	r29
   3e2b4:	8c 01       	movw	r16, r24
   3e2b6:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
   3e2b8:	67 2f       	mov	r22, r23
   3e2ba:	77 27       	eor	r23, r23
   3e2bc:	b0 df       	rcall	.-160    	; 0x3e21e <netWriteReg>
   3e2be:	6c 2f       	mov	r22, r28
	netWriteReg(address, value & 0xff);
   3e2c0:	c8 01       	movw	r24, r16
   3e2c2:	01 96       	adiw	r24, 0x01	; 1
   3e2c4:	df 91       	pop	r29
}
   3e2c6:	cf 91       	pop	r28
   3e2c8:	1f 91       	pop	r17
   3e2ca:	0f 91       	pop	r16
   3e2cc:	a8 cf       	rjmp	.-176    	; 0x3e21e <netWriteReg>

0003e2ce <netInit>:

void netInit(void)
{
   3e2ce:	0f 93       	push	r16
   3e2d0:	1f 93       	push	r17
   3e2d2:	cf 93       	push	r28
   3e2d4:	df 93       	push	r29
	uint8_t i;

	// Set up outputs to communicate with W5100 chip
	// Set pins as output
	DDRB = _BV(SCK) | _BV(MOSI) | _BV(SS);
   3e2d6:	80 eb       	ldi	r24, 0xB0	; 176
   3e2d8:	84 b9       	out	0x04, r24	; 4
	// Set pins high
	PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   3e2da:	80 ef       	ldi	r24, 0xF0	; 240
   3e2dc:	85 b9       	out	0x05, r24	; 5
	PORTB |= _BV(LED);
#endif

	// Set up SPI
	// Set the Double SPI Speed Bit
	SPSR = (1 << SPI2X);
   3e2de:	81 e0       	ldi	r24, 0x01	; 1
   3e2e0:	8d bd       	out	0x2d, r24	; 45

	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   3e2e2:	83 e0       	ldi	r24, 0x03	; 3
   3e2e4:	90 e0       	ldi	r25, 0x00	; 0
   3e2e6:	21 d3       	rcall	.+1602   	; 0x3e92a <__eerd_byte_m2560>
   3e2e8:	85 35       	cpi	r24, 0x55	; 85
   3e2ea:	29 f0       	breq	.+10     	; 0x3e2f6 <netInit+0x28>
   3e2ec:	00 e0       	ldi	r16, 0x00	; 0
   3e2ee:	12 e0       	ldi	r17, 0x02	; 2
   3e2f0:	c0 e0       	ldi	r28, 0x00	; 0
	        && (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   3e2f2:	d0 e0       	ldi	r29, 0x00	; 0
   3e2f4:	13 c0       	rjmp	.+38     	; 0x3e31c <netInit+0x4e>
   3e2f6:	84 e0       	ldi	r24, 0x04	; 4
   3e2f8:	90 e0       	ldi	r25, 0x00	; 0
   3e2fa:	17 d3       	rcall	.+1582   	; 0x3e92a <__eerd_byte_m2560>
   3e2fc:	8a 3a       	cpi	r24, 0xAA	; 170
   3e2fe:	b1 f7       	brne	.-20     	; 0x3e2ec <netInit+0x1e>
   3e300:	01 e0       	ldi	r16, 0x01	; 1
   3e302:	12 e0       	ldi	r17, 0x02	; 2
   3e304:	c5 e0       	ldi	r28, 0x05	; 5
   3e306:	d0 e0       	ldi	r29, 0x00	; 0
   3e308:	ce 01       	movw	r24, r28
   3e30a:	0f d3       	rcall	.+1566   	; 0x3e92a <__eerd_byte_m2560>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   3e30c:	f8 01       	movw	r30, r16
   3e30e:	81 93       	st	Z+, r24
   3e310:	8f 01       	movw	r16, r30
   3e312:	21 96       	adiw	r28, 0x01	; 1
   3e314:	c7 31       	cpi	r28, 0x17	; 23
   3e316:	d1 05       	cpc	r29, r1
   3e318:	b9 f7       	brne	.-18     	; 0x3e308 <netInit+0x3a>
	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
	        && (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   3e31a:	e8 cf       	rjmp	.-48     	; 0x3e2ec <netInit+0x1e>
   3e31c:	f8 01       	movw	r30, r16
   3e31e:	61 91       	ld	r22, Z+
   3e320:	8f 01       	movw	r16, r30
	}
#endif

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		netWriteReg(i, registerBuffer[i]);
   3e322:	ce 01       	movw	r24, r28
   3e324:	7c df       	rcall	.-264    	; 0x3e21e <netWriteReg>
   3e326:	21 96       	adiw	r28, 0x01	; 1
   3e328:	cc 31       	cpi	r28, 0x1C	; 28
   3e32a:	d1 05       	cpc	r29, r1
   3e32c:	b9 f7       	brne	.-18     	; 0x3e31c <netInit+0x4e>
   3e32e:	df 91       	pop	r29
		if(i != 14) putch(0x2E);
	}
#endif

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
   3e330:	cf 91       	pop	r28
   3e332:	1f 91       	pop	r17
   3e334:	0f 91       	pop	r16
		netWriteReg(i, registerBuffer[i]);
#ifdef _VERBOSE
	traceln(" Net: Network init done");
#endif
}
   3e336:	08 95       	ret

0003e338 <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   3e338:	cf 93       	push	r28
   3e33a:	df 93       	push	r29
   3e33c:	ec 01       	movw	r28, r24
	netWriteReg(REG_S3_CR, CR_CLOSE);
   3e33e:	60 e1       	ldi	r22, 0x10	; 16
   3e340:	81 e0       	ldi	r24, 0x01	; 1
   3e342:	97 e0       	ldi	r25, 0x07	; 7
   3e344:	6c df       	rcall	.-296    	; 0x3e21e <netWriteReg>
   3e346:	be 01       	movw	r22, r28

	do {
		// Write TFTP Port
		netWriteWord(REG_S3_PORT0, port);
   3e348:	84 e0       	ldi	r24, 0x04	; 4
   3e34a:	97 e0       	ldi	r25, 0x07	; 7
   3e34c:	af df       	rcall	.-162    	; 0x3e2ac <netWriteWord>
   3e34e:	62 e0       	ldi	r22, 0x02	; 2
   3e350:	80 e0       	ldi	r24, 0x00	; 0
		// Write mode
		netWriteReg(REG_S3_MR, MR_UDP);
   3e352:	97 e0       	ldi	r25, 0x07	; 7
   3e354:	64 df       	rcall	.-312    	; 0x3e21e <netWriteReg>
   3e356:	61 e0       	ldi	r22, 0x01	; 1
   3e358:	81 e0       	ldi	r24, 0x01	; 1
   3e35a:	97 e0       	ldi	r25, 0x07	; 7
		// Open Socket
		netWriteReg(REG_S3_CR, CR_OPEN);
   3e35c:	60 df       	rcall	.-320    	; 0x3e21e <netWriteReg>
   3e35e:	83 e0       	ldi	r24, 0x03	; 3
   3e360:	97 e0       	ldi	r25, 0x07	; 7
   3e362:	76 df       	rcall	.-276    	; 0x3e250 <netReadReg>
   3e364:	82 32       	cpi	r24, 0x22	; 34

		// Read Status
		if(netReadReg(REG_S3_SR) != SOCK_UDP)
   3e366:	21 f0       	breq	.+8      	; 0x3e370 <sockInit+0x38>
   3e368:	60 e1       	ldi	r22, 0x10	; 16
   3e36a:	81 e0       	ldi	r24, 0x01	; 1
   3e36c:	97 e0       	ldi	r25, 0x07	; 7
   3e36e:	57 df       	rcall	.-338    	; 0x3e21e <netWriteReg>
   3e370:	83 e0       	ldi	r24, 0x03	; 3
			// Close Socket if it wasn't initialized correctly
			netWriteReg(REG_S3_CR, CR_CLOSE);
   3e372:	97 e0       	ldi	r25, 0x07	; 7
   3e374:	6d df       	rcall	.-294    	; 0x3e250 <netReadReg>
   3e376:	82 32       	cpi	r24, 0x22	; 34
   3e378:	31 f7       	brne	.-52     	; 0x3e346 <sockInit+0xe>
   3e37a:	df 91       	pop	r29

		// If socket correctly opened continue
	} while(netReadReg(REG_S3_SR) != SOCK_UDP);
   3e37c:	cf 91       	pop	r28
   3e37e:	08 95       	ret

0003e380 <processPacket>:
#ifdef _DEBUG_TFTP
static uint8_t processPacket(uint16_t packetSize)
{
#else
static uint8_t processPacket(void)
{
   3e380:	2f 92       	push	r2
   3e382:	3f 92       	push	r3
   3e384:	4f 92       	push	r4
   3e386:	5f 92       	push	r5
   3e388:	6f 92       	push	r6
   3e38a:	7f 92       	push	r7
   3e38c:	8f 92       	push	r8
   3e38e:	9f 92       	push	r9
   3e390:	af 92       	push	r10
   3e392:	bf 92       	push	r11
   3e394:	cf 92       	push	r12
   3e396:	df 92       	push	r13
   3e398:	ef 92       	push	r14
   3e39a:	ff 92       	push	r15
   3e39c:	0f 93       	push	r16
   3e39e:	1f 93       	push	r17
   3e3a0:	cf 93       	push	r28
   3e3a2:	df 93       	push	r29
   3e3a4:	cd b7       	in	r28, 0x3d	; 61
   3e3a6:	de b7       	in	r29, 0x3e	; 62
   3e3a8:	cd 50       	subi	r28, 0x0D	; 13
   3e3aa:	d2 40       	sbci	r29, 0x02	; 2
   3e3ac:	de bf       	out	0x3e, r29	; 62
   3e3ae:	cd bf       	out	0x3d, r28	; 61

	//  step();
#endif

	// Read data from chip to buffer
	readPointer = netReadWord(REG_S3_RX_RD0);
   3e3b0:	88 e2       	ldi	r24, 0x28	; 40
   3e3b2:	97 e0       	ldi	r25, 0x07	; 7
   3e3b4:	67 df       	rcall	.-306    	; 0x3e284 <netReadWord>
   3e3b6:	00 97       	sbiw	r24, 0x00	; 0
#ifdef _DEBUGMORE_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif

	if(readPointer == 0) readPointer += S3_RX_START;
   3e3b8:	11 f4       	brne	.+4      	; 0x3e3be <processPacket+0x3e>
   3e3ba:	80 e0       	ldi	r24, 0x00	; 0
   3e3bc:	98 e7       	ldi	r25, 0x78	; 120
   3e3be:	8e 01       	movw	r16, r28
   3e3c0:	0f 5f       	subi	r16, 0xFF	; 255
   3e3c2:	1f 4f       	sbci	r17, 0xFF	; 255
   3e3c4:	6e 01       	movw	r12, r28
   3e3c6:	23 ef       	ldi	r18, 0xF3	; 243
   3e3c8:	c2 1a       	sub	r12, r18
   3e3ca:	2d ef       	ldi	r18, 0xFD	; 253
   3e3cc:	d2 0a       	sbc	r13, r18
   3e3ce:	58 01       	movw	r10, r16
   3e3d0:	0c 15       	cp	r16, r12

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   3e3d2:	1d 05       	cpc	r17, r13
   3e3d4:	89 f0       	breq	.+34     	; 0x3e3f8 <processPacket+0x78>
   3e3d6:	7c 01       	movw	r14, r24
			traceln("Tftp: Reading from position ");
			tracenum(readPointer);
		}
#endif

		*bufPtr++ = netReadReg(readPointer++);
   3e3d8:	ef ef       	ldi	r30, 0xFF	; 255
   3e3da:	ee 1a       	sub	r14, r30
   3e3dc:	fe 0a       	sbc	r15, r30
   3e3de:	38 df       	rcall	.-400    	; 0x3e250 <netReadReg>
   3e3e0:	f8 01       	movw	r30, r16
   3e3e2:	81 93       	st	Z+, r24
   3e3e4:	8f 01       	movw	r16, r30
   3e3e6:	e1 14       	cp	r14, r1
   3e3e8:	f0 e8       	ldi	r31, 0x80	; 128

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
   3e3ea:	ff 06       	cpc	r15, r31
   3e3ec:	19 f4       	brne	.+6      	; 0x3e3f4 <processPacket+0x74>
   3e3ee:	e1 2c       	mov	r14, r1
   3e3f0:	68 e7       	ldi	r22, 0x78	; 120
   3e3f2:	f6 2e       	mov	r15, r22
   3e3f4:	c7 01       	movw	r24, r14
   3e3f6:	ec cf       	rjmp	.-40     	; 0x3e3d0 <processPacket+0x50>
   3e3f8:	bc 01       	movw	r22, r24
   3e3fa:	88 e2       	ldi	r24, 0x28	; 40
	}

	netWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
   3e3fc:	97 e0       	ldi	r25, 0x07	; 7
   3e3fe:	56 df       	rcall	.-340    	; 0x3e2ac <netWriteWord>
   3e400:	60 e4       	ldi	r22, 0x40	; 64
   3e402:	81 e0       	ldi	r24, 0x01	; 1
   3e404:	97 e0       	ldi	r25, 0x07	; 7
	netWriteReg(REG_S3_CR, CR_RECV);
   3e406:	0b df       	rcall	.-490    	; 0x3e21e <netWriteReg>
   3e408:	81 e0       	ldi	r24, 0x01	; 1
   3e40a:	97 e0       	ldi	r25, 0x07	; 7
   3e40c:	21 df       	rcall	.-446    	; 0x3e250 <netReadReg>
   3e40e:	81 11       	cpse	r24, r1

	while(netReadReg(REG_S3_CR));
   3e410:	fb cf       	rjmp	.-10     	; 0x3e408 <processPacket+0x88>
   3e412:	75 01       	movw	r14, r10
   3e414:	0c e0       	ldi	r16, 0x0C	; 12
   3e416:	17 e0       	ldi	r17, 0x07	; 7
   3e418:	f7 01       	movw	r30, r14
   3e41a:	61 91       	ld	r22, Z+
   3e41c:	7f 01       	movw	r14, r30
   3e41e:	c8 01       	movw	r24, r16
   3e420:	fe de       	rcall	.-516    	; 0x3e21e <netWriteReg>
#endif

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);
   3e422:	0f 5f       	subi	r16, 0xFF	; 255
   3e424:	1f 4f       	sbci	r17, 0xFF	; 255
   3e426:	02 31       	cpi	r16, 0x12	; 18
   3e428:	f7 e0       	ldi	r31, 0x07	; 7
   3e42a:	1f 07       	cpc	r17, r31
   3e42c:	a9 f7       	brne	.-22     	; 0x3e418 <processPacket+0x98>
   3e42e:	0f 81       	ldd	r16, Y+7	; 0x07
   3e430:	10 e0       	ldi	r17, 0x00	; 0
   3e432:	10 2f       	mov	r17, r16
   3e434:	00 27       	eor	r16, r16
   3e436:	88 85       	ldd	r24, Y+8	; 0x08
   3e438:	08 0f       	add	r16, r24

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   3e43a:	11 1d       	adc	r17, r1
   3e43c:	89 85       	ldd	r24, Y+9	; 0x09
   3e43e:	90 e0       	ldi	r25, 0x00	; 0
   3e440:	98 2f       	mov	r25, r24
   3e442:	88 27       	eor	r24, r24
   3e444:	2a 85       	ldd	r18, Y+10	; 0x0a
   3e446:	82 0f       	add	r24, r18
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
   3e448:	91 1d       	adc	r25, r1
   3e44a:	eb 84       	ldd	r14, Y+11	; 0x0b
   3e44c:	f1 2c       	mov	r15, r1
   3e44e:	fe 2c       	mov	r15, r14
   3e450:	ee 24       	eor	r14, r14
   3e452:	2c 85       	ldd	r18, Y+12	; 0x0c
   3e454:	e2 0e       	add	r14, r18
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
   3e456:	f1 1c       	adc	r15, r1
   3e458:	83 30       	cpi	r24, 0x03	; 3
   3e45a:	91 05       	cpc	r25, r1
   3e45c:	89 f4       	brne	.+34     	; 0x3e480 <processPacket+0x100>
   3e45e:	29 ef       	ldi	r18, 0xF9	; 249
   3e460:	e2 16       	cp	r14, r18
   3e462:	21 e0       	ldi	r18, 0x01	; 1
	tracenum(tftpOpcode);
	trace(" and data length ");
	tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
#endif

	if((tftpOpcode == TFTP_OPCODE_DATA)
   3e464:	f2 06       	cpc	r15, r18
   3e466:	90 f5       	brcc	.+100    	; 0x3e4cc <processPacket+0x14c>
   3e468:	80 91 1e 02 	lds	r24, 0x021E
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   3e46c:	90 91 1f 02 	lds	r25, 0x021F
   3e470:	e8 16       	cp	r14, r24
   3e472:	f9 06       	cpc	r15, r25
   3e474:	58 f1       	brcs	.+86     	; 0x3e4cc <processPacket+0x14c>
   3e476:	01 96       	adiw	r24, 0x01	; 1
   3e478:	8e 15       	cp	r24, r14
   3e47a:	9f 05       	cpc	r25, r15
   3e47c:	38 f1       	brcs	.+78     	; 0x3e4cc <processPacket+0x14c>
   3e47e:	22 c0       	rjmp	.+68     	; 0x3e4c4 <processPacket+0x144>
   3e480:	05 30       	cpi	r16, 0x05	; 5
   3e482:	12 40       	sbci	r17, 0x02	; 2
   3e484:	18 f5       	brcc	.+70     	; 0x3e4cc <processPacket+0x14c>
   3e486:	84 30       	cpi	r24, 0x04	; 4
   3e488:	91 05       	cpc	r25, r1
   3e48a:	c8 f4       	brcc	.+50     	; 0x3e4be <processPacket+0x13e>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3e48c:	81 30       	cpi	r24, 0x01	; 1
   3e48e:	91 05       	cpc	r25, r1
   3e490:	21 f1       	breq	.+72     	; 0x3e4da <processPacket+0x15a>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3e492:	02 97       	sbiw	r24, 0x02	; 2
   3e494:	d9 f4       	brne	.+54     	; 0x3e4cc <processPacket+0x14c>
   3e496:	27 d2       	rcall	.+1102   	; 0x3e8e6 <resetTick>
   3e498:	6f ef       	ldi	r22, 0xFF	; 255
   3e49a:	82 e0       	ldi	r24, 0x02	; 2
   3e49c:	90 e0       	ldi	r25, 0x00	; 0
   3e49e:	4d d2       	rcall	.+1178   	; 0x3e93a <__eewr_byte_m2560>
   3e4a0:	80 91 26 02 	lds	r24, 0x0226
#endif
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   3e4a4:	90 91 27 02 	lds	r25, 0x0227
#ifdef _VERBOSE
			traceln("Tftp: Write request");
#endif
			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   3e4a8:	47 df       	rcall	.-370    	; 0x3e338 <sockInit>
   3e4aa:	10 92 1f 02 	sts	0x021F, r1
   3e4ae:	10 92 1e 02 	sts	0x021E, r1

#ifdef _TFTP_RANDOM_PORT
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3e4b2:	10 92 21 02 	sts	0x0221, r1
   3e4b6:	10 92 20 02 	sts	0x0220, r1
   3e4ba:	22 e0       	ldi	r18, 0x02	; 2
#else
			tracenum(tftpTransferPort);
#endif
#endif

			lastPacket = highPacket = 0;
   3e4bc:	1f c0       	rjmp	.+62     	; 0x3e4fc <processPacket+0x17c>
   3e4be:	06 97       	sbiw	r24, 0x06	; 6
   3e4c0:	60 f0       	brcs	.+24     	; 0x3e4da <processPacket+0x15a>
   3e4c2:	04 c0       	rjmp	.+8      	; 0x3e4cc <processPacket+0x14c>
   3e4c4:	05 30       	cpi	r16, 0x05	; 5
   3e4c6:	82 e0       	ldi	r24, 0x02	; 2
   3e4c8:	18 07       	cpc	r17, r24
   3e4ca:	f0 f0       	brcs	.+60     	; 0x3e508 <processPacket+0x188>
			returnCode = ACK; // Send back acknowledge for packet 0
   3e4cc:	80 91 26 02 	lds	r24, 0x0226

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3e4d0:	90 91 27 02 	lds	r25, 0x0227
   3e4d4:	31 df       	rcall	.-414    	; 0x3e338 <sockInit>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3e4d6:	21 e0       	ldi	r18, 0x01	; 1
   3e4d8:	11 c0       	rjmp	.+34     	; 0x3e4fc <processPacket+0x17c>
   3e4da:	c3 5f       	subi	r28, 0xF3	; 243
   3e4dc:	dd 4f       	sbci	r29, 0xFD	; 253
#endif

#ifdef _TFTP_RANDOM_PORT
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3e4de:	18 82       	st	Y, r1
   3e4e0:	cd 50       	subi	r28, 0x0D	; 13
   3e4e2:	d2 40       	sbci	r29, 0x02	; 2
   3e4e4:	8b c0       	rjmp	.+278    	; 0x3e5fc <processPacket+0x27c>
   3e4e6:	c1 14       	cp	r12, r1
   3e4e8:	d1 04       	cpc	r13, r1
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
   3e4ea:	e1 04       	cpc	r14, r1
   3e4ec:	f1 04       	cpc	r15, r1
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   3e4ee:	69 f5       	brne	.+90     	; 0x3e54a <processPacket+0x1ca>
   3e4f0:	ce 01       	movw	r24, r28
   3e4f2:	0d 96       	adiw	r24, 0x0d	; 13
   3e4f4:	76 d1       	rcall	.+748    	; 0x3e7e2 <validImage>
   3e4f6:	81 11       	cpse	r24, r1
   3e4f8:	28 c0       	rjmp	.+80     	; 0x3e54a <processPacket+0x1ca>
#ifdef _DEBUG_TFTP
				traceln("Tftp: Packet length adjusted to ");
				tracenum(packetLength);
#endif

				if(writeAddr == 0) {
   3e4fa:	25 e0       	ldi	r18, 0x05	; 5
   3e4fc:	c3 5f       	subi	r28, 0xF3	; 243
   3e4fe:	dd 4f       	sbci	r29, 0xFD	; 253
   3e500:	28 83       	st	Y, r18
   3e502:	cd 50       	subi	r28, 0x0D	; 13
					// First sector - validate
					if(!validImage(pageBase)) {
   3e504:	d2 40       	sbci	r29, 0x02	; 2
   3e506:	7a c0       	rjmp	.+244    	; 0x3e5fc <processPacket+0x27c>
   3e508:	ee d1       	rcall	.+988    	; 0x3e8e6 <resetTick>
   3e50a:	04 50       	subi	r16, 0x04	; 4
   3e50c:	11 09       	sbc	r17, r1
   3e50e:	f0 92 21 02 	sts	0x0221, r15
						returnCode = INVALID_IMAGE;
   3e512:	e0 92 20 02 	sts	0x0220, r14
   3e516:	67 01       	movw	r12, r14
   3e518:	81 e0       	ldi	r24, 0x01	; 1
   3e51a:	c8 1a       	sub	r12, r24
   3e51c:	d1 08       	sbc	r13, r1
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   3e51e:	dc 2c       	mov	r13, r12
   3e520:	cc 24       	eor	r12, r12

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
   3e522:	dd 0c       	add	r13, r13
   3e524:	e1 2c       	mov	r14, r1
			lastPacket = tftpBlock;
   3e526:	f1 2c       	mov	r15, r1
   3e528:	01 15       	cp	r16, r1
   3e52a:	e2 e0       	ldi	r30, 0x02	; 2
   3e52c:	1e 07       	cpc	r17, r30
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
   3e52e:	10 f4       	brcc	.+4      	; 0x3e534 <processPacket+0x1b4>
   3e530:	24 e0       	ldi	r18, 0x04	; 4
   3e532:	01 c0       	rjmp	.+2      	; 0x3e536 <processPacket+0x1b6>
   3e534:	22 e0       	ldi	r18, 0x02	; 2
   3e536:	c3 5f       	subi	r28, 0xF3	; 243
   3e538:	dd 4f       	sbci	r29, 0xFD	; 253
   3e53a:	28 83       	st	Y, r18
   3e53c:	cd 50       	subi	r28, 0x0D	; 13
   3e53e:	d2 40       	sbci	r29, 0x02	; 2
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   3e540:	00 23       	and	r16, r16
   3e542:	89 f2       	breq	.-94     	; 0x3e4e6 <processPacket+0x166>
   3e544:	0f 5f       	subi	r16, 0xFF	; 255
   3e546:	1f 4f       	sbci	r17, 0xFF	; 255
   3e548:	fb cf       	rjmp	.-10     	; 0x3e540 <processPacket+0x1c0>
   3e54a:	de 01       	movw	r26, r28
				else returnCode = ACK;
   3e54c:	1d 96       	adiw	r26, 0x0d	; 13
   3e54e:	20 e0       	ldi	r18, 0x00	; 0
   3e550:	30 e0       	ldi	r19, 0x00	; 0
   3e552:	99 24       	eor	r9, r9
   3e554:	93 94       	inc	r9
   3e556:	26 01       	movw	r4, r12

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   3e558:	37 01       	movw	r6, r14
   3e55a:	81 e0       	ldi	r24, 0x01	; 1
   3e55c:	58 1a       	sub	r5, r24
   3e55e:	61 08       	sbc	r6, r1
   3e560:	71 08       	sbc	r7, r1
   3e562:	f3 e0       	ldi	r31, 0x03	; 3
   3e564:	8f 2e       	mov	r8, r31
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e566:	85 e0       	ldi	r24, 0x05	; 5
   3e568:	38 2e       	mov	r3, r24
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3e56a:	91 e1       	ldi	r25, 0x11	; 17
   3e56c:	29 2e       	mov	r2, r25

#endif
					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3e56e:	37 c0       	rjmp	.+110    	; 0x3e5de <processPacket+0x25e>
   3e570:	c7 01       	movw	r24, r14
   3e572:	b6 01       	movw	r22, r12
   3e574:	62 0f       	add	r22, r18
   3e576:	73 1f       	adc	r23, r19
   3e578:	81 1d       	adc	r24, r1
   3e57a:	91 1d       	adc	r25, r1
   3e57c:	f5 01       	movw	r30, r10
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3e57e:	e2 0f       	add	r30, r18
   3e580:	f3 1f       	adc	r31, r19
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3e582:	45 85       	ldd	r20, Z+13	; 0x0d
   3e584:	50 e0       	ldi	r21, 0x00	; 0
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e586:	54 2f       	mov	r21, r20
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3e588:	44 27       	eor	r20, r20
   3e58a:	ec 91       	ld	r30, X
   3e58c:	4e 2b       	or	r20, r30
   3e58e:	0a 01       	movw	r0, r20
   3e590:	fb 01       	movw	r30, r22
   3e592:	80 93 5b 00 	sts	0x005B, r24
   3e596:	90 92 57 00 	sts	0x0057, r9
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   3e59a:	e8 95       	spm
   3e59c:	11 24       	eor	r1, r1
   3e59e:	2e 5f       	subi	r18, 0xFE	; 254
   3e5a0:	3f 4f       	sbci	r19, 0xFF	; 255
   3e5a2:	21 11       	cpse	r18, r1
   3e5a4:	1b c0       	rjmp	.+54     	; 0x3e5dc <processPacket+0x25c>
					boot_page_fill(writeAddr + offset, writeValue);
   3e5a6:	b3 01       	movw	r22, r6
   3e5a8:	a2 01       	movw	r20, r4
   3e5aa:	42 0f       	add	r20, r18
   3e5ac:	53 1f       	adc	r21, r19
   3e5ae:	61 1d       	adc	r22, r1
   3e5b0:	71 1d       	adc	r23, r1
   3e5b2:	fa 01       	movw	r30, r20
   3e5b4:	60 93 5b 00 	sts	0x005B, r22
						trace(" at offset ");
						tracenum(writeAddr + offset);
					}

#endif
					offset += 2;
   3e5b8:	80 92 57 00 	sts	0x0057, r8

					if(offset % SPM_PAGESIZE == 0) {
   3e5bc:	e8 95       	spm
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3e5be:	07 b6       	in	r0, 0x37	; 55
   3e5c0:	00 fc       	sbrc	r0, 0
   3e5c2:	fd cf       	rjmp	.-6      	; 0x3e5be <processPacket+0x23e>
   3e5c4:	fa 01       	movw	r30, r20
   3e5c6:	60 93 5b 00 	sts	0x005B, r22
   3e5ca:	30 92 57 00 	sts	0x0057, r3
   3e5ce:	e8 95       	spm
   3e5d0:	07 b6       	in	r0, 0x37	; 55
   3e5d2:	00 fc       	sbrc	r0, 0
   3e5d4:	fd cf       	rjmp	.-6      	; 0x3e5d0 <processPacket+0x250>
						boot_spm_busy_wait();
   3e5d6:	20 92 57 00 	sts	0x0057, r2
   3e5da:	e8 95       	spm
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3e5dc:	12 96       	adiw	r26, 0x02	; 2
   3e5de:	20 17       	cp	r18, r16
   3e5e0:	31 07       	cpc	r19, r17
   3e5e2:	08 f4       	brcc	.+2      	; 0x3e5e6 <processPacket+0x266>
   3e5e4:	c5 cf       	rjmp	.-118    	; 0x3e570 <processPacket+0x1f0>
   3e5e6:	c3 5f       	subi	r28, 0xF3	; 243
						boot_spm_busy_wait();
   3e5e8:	dd 4f       	sbci	r29, 0xFD	; 253
   3e5ea:	28 81       	ld	r18, Y
   3e5ec:	cd 50       	subi	r28, 0x0D	; 13
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3e5ee:	d2 40       	sbci	r29, 0x02	; 2
   3e5f0:	24 30       	cpi	r18, 0x04	; 4
   3e5f2:	21 f4       	brne	.+8      	; 0x3e5fc <processPacket+0x27c>
   3e5f4:	6e ee       	ldi	r22, 0xEE	; 238
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e5f6:	82 e0       	ldi	r24, 0x02	; 2
   3e5f8:	90 e0       	ldi	r25, 0x00	; 0
   3e5fa:	9f d1       	rcall	.+830    	; 0x3e93a <__eewr_byte_m2560>
   3e5fc:	c3 5f       	subi	r28, 0xF3	; 243
						boot_rww_enable();
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   3e5fe:	dd 4f       	sbci	r29, 0xFD	; 253
   3e600:	88 81       	ld	r24, Y
   3e602:	cd 50       	subi	r28, 0x0D	; 13
   3e604:	d2 40       	sbci	r29, 0x02	; 2
   3e606:	c3 5f       	subi	r28, 0xF3	; 243
   3e608:	dd 4f       	sbci	r29, 0xFD	; 253
   3e60a:	de bf       	out	0x3e, r29	; 62
					// Hand over to application
#ifdef _VERBOSE
					traceln("Tftp: Flash is complete");
#endif
					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3e60c:	cd bf       	out	0x3d, r28	; 61
   3e60e:	df 91       	pop	r29
   3e610:	cf 91       	pop	r28
   3e612:	1f 91       	pop	r17
   3e614:	0f 91       	pop	r16
			break;

	}

	return(returnCode);
}
   3e616:	ff 90       	pop	r15
   3e618:	ef 90       	pop	r14
   3e61a:	df 90       	pop	r13
   3e61c:	cf 90       	pop	r12
   3e61e:	bf 90       	pop	r11
   3e620:	af 90       	pop	r10
   3e622:	9f 90       	pop	r9
   3e624:	8f 90       	pop	r8
   3e626:	7f 90       	pop	r7
   3e628:	6f 90       	pop	r6
   3e62a:	5f 90       	pop	r5
   3e62c:	4f 90       	pop	r4
   3e62e:	3f 90       	pop	r3
   3e630:	2f 90       	pop	r2
   3e632:	08 95       	ret

0003e634 <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
   3e634:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
   3e636:	85 e4       	ldi	r24, 0x45	; 69
   3e638:	90 e0       	ldi	r25, 0x00	; 0
   3e63a:	7e de       	rcall	.-772    	; 0x3e338 <sockInit>
   3e63c:	87 e1       	ldi	r24, 0x17	; 23

#ifndef _TFTP_RANDOM_PORT
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   3e63e:	90 e0       	ldi	r25, 0x00	; 0
   3e640:	74 d1       	rcall	.+744    	; 0x3e92a <__eerd_byte_m2560>
   3e642:	8b 3b       	cpi	r24, 0xBB	; 187
   3e644:	91 f4       	brne	.+36     	; 0x3e66a <tftpInit+0x36>
   3e646:	89 e1       	ldi	r24, 0x19	; 25
   3e648:	90 e0       	ldi	r25, 0x00	; 0
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   3e64a:	6f d1       	rcall	.+734    	; 0x3e92a <__eerd_byte_m2560>
   3e64c:	c8 2f       	mov	r28, r24
   3e64e:	88 e1       	ldi	r24, 0x18	; 24
   3e650:	90 e0       	ldi	r25, 0x00	; 0
   3e652:	6b d1       	rcall	.+726    	; 0x3e92a <__eerd_byte_m2560>
   3e654:	2c 2f       	mov	r18, r28
   3e656:	30 e0       	ldi	r19, 0x00	; 0
   3e658:	32 2f       	mov	r19, r18
   3e65a:	22 27       	eor	r18, r18
   3e65c:	28 0f       	add	r18, r24
   3e65e:	31 1d       	adc	r19, r1
   3e660:	30 93 27 02 	sts	0x0227, r19
   3e664:	20 93 26 02 	sts	0x0226, r18
   3e668:	06 c0       	rjmp	.+12     	; 0x3e676 <tftpInit+0x42>
   3e66a:	89 e7       	ldi	r24, 0x79	; 121
   3e66c:	97 eb       	ldi	r25, 0xB7	; 183
   3e66e:	90 93 27 02 	sts	0x0227, r25
	else
		tftpTransferPort = TFTP_STATIC_PORT;
   3e672:	80 93 26 02 	sts	0x0226, r24
   3e676:	cf 91       	pop	r28
   3e678:	08 95       	ret

0003e67a <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   3e67a:	af 92       	push	r10
   3e67c:	bf 92       	push	r11
   3e67e:	cf 92       	push	r12
   3e680:	df 92       	push	r13
   3e682:	ef 92       	push	r14
   3e684:	ff 92       	push	r15
   3e686:	0f 93       	push	r16
   3e688:	1f 93       	push	r17
   3e68a:	cf 93       	push	r28
   3e68c:	df 93       	push	r29
   3e68e:	cd b7       	in	r28, 0x3d	; 61
   3e690:	de b7       	in	r29, 0x3e	; 62
   3e692:	c4 56       	subi	r28, 0x64	; 100
   3e694:	d1 09       	sbc	r29, r1
   3e696:	de bf       	out	0x3e, r29	; 62
   3e698:	cd bf       	out	0x3d, r28	; 61
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);
   3e69a:	86 e2       	ldi	r24, 0x26	; 38
   3e69c:	97 e0       	ldi	r25, 0x07	; 7
   3e69e:	f2 dd       	rcall	.-1052   	; 0x3e284 <netReadWord>
   3e6a0:	89 2b       	or	r24, r25
// 			_delay_ms(400);
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   3e6a2:	11 f4       	brne	.+4      	; 0x3e6a8 <tftpPoll+0x2e>
   3e6a4:	81 e0       	ldi	r24, 0x01	; 1
		// Complete
		return(0);
	}

	// Tftp continues
	return(1);
   3e6a6:	8e c0       	rjmp	.+284    	; 0x3e7c4 <tftpPoll+0x14a>
   3e6a8:	81 e0       	ldi	r24, 0x01	; 1
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
   3e6aa:	80 93 29 02 	sts	0x0229, r24
   3e6ae:	82 e0       	ldi	r24, 0x02	; 2

		while((netReadReg(REG_S3_IR) & IR_RECV)) {
   3e6b0:	97 e0       	ldi	r25, 0x07	; 7
   3e6b2:	ce dd       	rcall	.-1124   	; 0x3e250 <netReadReg>
   3e6b4:	82 ff       	sbrs	r24, 2
   3e6b6:	0e c0       	rjmp	.+28     	; 0x3e6d4 <tftpPoll+0x5a>
   3e6b8:	64 e0       	ldi	r22, 0x04	; 4
   3e6ba:	82 e0       	ldi	r24, 0x02	; 2
			netWriteReg(REG_S3_IR, IR_RECV);
   3e6bc:	97 e0       	ldi	r25, 0x07	; 7
   3e6be:	af dd       	rcall	.-1186   	; 0x3e21e <netWriteReg>
   3e6c0:	2f ef       	ldi	r18, 0xFF	; 255
   3e6c2:	37 e8       	ldi	r19, 0x87	; 135
   3e6c4:	83 e1       	ldi	r24, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e6c6:	21 50       	subi	r18, 0x01	; 1
   3e6c8:	30 40       	sbci	r19, 0x00	; 0
   3e6ca:	80 40       	sbci	r24, 0x00	; 0
   3e6cc:	e1 f7       	brne	.-8      	; 0x3e6c6 <tftpPoll+0x4c>
   3e6ce:	00 c0       	rjmp	.+0      	; 0x3e6d0 <tftpPoll+0x56>
   3e6d0:	00 00       	nop
   3e6d2:	ed cf       	rjmp	.-38     	; 0x3e6ae <tftpPoll+0x34>
   3e6d4:	55 de       	rcall	.-854    	; 0x3e380 <processPacket>
   3e6d6:	b8 2e       	mov	r11, r24
   3e6d8:	84 e2       	ldi	r24, 0x24	; 36
		// Process Packet and get TFTP response code
#ifdef _DEBUG_TFTP
		packetSize = netReadWord(REG_S3_RX_RSR0);
		response = processPacket(packetSize);
#else
		response = processPacket();
   3e6da:	97 e0       	ldi	r25, 0x07	; 7
   3e6dc:	d3 dd       	rcall	.-1114   	; 0x3e284 <netReadWord>
   3e6de:	8c 01       	movw	r16, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = netReadWord(REG_S3_TX_WR0) + S3_TX_START;
   3e6e0:	18 5a       	subi	r17, 0xA8	; 168
   3e6e2:	92 e0       	ldi	r25, 0x02	; 2
   3e6e4:	b9 16       	cp	r11, r25
   3e6e6:	61 f1       	breq	.+88     	; 0x3e740 <tftpPoll+0xc6>
   3e6e8:	9b 15       	cp	r25, r11
   3e6ea:	20 f0       	brcs	.+8      	; 0x3e6f4 <tftpPoll+0x7a>

	switch(response) {
   3e6ec:	e1 e0       	ldi	r30, 0x01	; 1
   3e6ee:	be 16       	cp	r11, r30
   3e6f0:	a9 f0       	breq	.+42     	; 0x3e71c <tftpPoll+0xa2>
   3e6f2:	06 c0       	rjmp	.+12     	; 0x3e700 <tftpPoll+0x86>
   3e6f4:	f3 e0       	ldi	r31, 0x03	; 3
   3e6f6:	bf 16       	cp	r11, r31
   3e6f8:	d1 f0       	breq	.+52     	; 0x3e72e <tftpPoll+0xb4>
   3e6fa:	24 e0       	ldi	r18, 0x04	; 4
   3e6fc:	b2 16       	cp	r11, r18
   3e6fe:	79 f1       	breq	.+94     	; 0x3e75e <tftpPoll+0xe4>
   3e700:	4a e0       	ldi	r20, 0x0A	; 10
   3e702:	50 e0       	ldi	r21, 0x00	; 0
   3e704:	6c ef       	ldi	r22, 0xFC	; 252
   3e706:	70 ee       	ldi	r23, 0xE0	; 224
   3e708:	ce 01       	movw	r24, r28
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
   3e70a:	01 96       	adiw	r24, 0x01	; 1
   3e70c:	05 d1       	rcall	.+522    	; 0x3e918 <memcpy_P>
   3e70e:	8a e0       	ldi	r24, 0x0A	; 10
   3e710:	fe 01       	movw	r30, r28
   3e712:	31 96       	adiw	r30, 0x01	; 1
   3e714:	7f 01       	movw	r14, r30
   3e716:	a8 2e       	mov	r10, r24
   3e718:	ae 0e       	add	r10, r30
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   3e71a:	3c c0       	rjmp	.+120    	; 0x3e794 <tftpPoll+0x11a>
	txPtr = txBuffer;

	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3e71c:	4c e0       	ldi	r20, 0x0C	; 12
   3e71e:	50 e0       	ldi	r21, 0x00	; 0
   3e720:	61 e1       	ldi	r22, 0x11	; 17
   3e722:	71 ee       	ldi	r23, 0xE1	; 225
   3e724:	ce 01       	movw	r24, r28
   3e726:	01 96       	adiw	r24, 0x01	; 1
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
   3e728:	f7 d0       	rcall	.+494    	; 0x3e918 <memcpy_P>
   3e72a:	8c e0       	ldi	r24, 0x0C	; 12
   3e72c:	f1 cf       	rjmp	.-30     	; 0x3e710 <tftpPoll+0x96>
   3e72e:	49 e0       	ldi	r20, 0x09	; 9
   3e730:	50 e0       	ldi	r21, 0x00	; 0
   3e732:	67 e0       	ldi	r22, 0x07	; 7
   3e734:	71 ee       	ldi	r23, 0xE1	; 225
   3e736:	ce 01       	movw	r24, r28
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   3e738:	01 96       	adiw	r24, 0x01	; 1
   3e73a:	ee d0       	rcall	.+476    	; 0x3e918 <memcpy_P>
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
   3e73c:	89 e0       	ldi	r24, 0x09	; 9
   3e73e:	e8 cf       	rjmp	.-48     	; 0x3e710 <tftpPoll+0x96>
   3e740:	20 91 20 02 	lds	r18, 0x0220
   3e744:	30 91 21 02 	lds	r19, 0x0221
   3e748:	40 91 1e 02 	lds	r20, 0x021E
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   3e74c:	50 91 1f 02 	lds	r21, 0x021F
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   3e750:	42 17       	cp	r20, r18
   3e752:	53 07       	cpc	r21, r19
   3e754:	20 f4       	brcc	.+8      	; 0x3e75e <tftpPoll+0xe4>
   3e756:	30 93 1f 02 	sts	0x021F, r19
   3e75a:	20 93 1e 02 	sts	0x021E, r18
   3e75e:	19 82       	std	Y+1, r1	; 0x01
   3e760:	84 e0       	ldi	r24, 0x04	; 4
   3e762:	8a 83       	std	Y+2, r24	; 0x02
   3e764:	20 91 20 02 	lds	r18, 0x0220
   3e768:	30 91 21 02 	lds	r19, 0x0221
   3e76c:	3b 83       	std	Y+3, r19	; 0x03
#ifdef _DEBUG_TFTP
			if(response == FINAL_ACK) traceln("Tftp: Sent Final ACK ");
#endif
			
			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   3e76e:	2c 83       	std	Y+4, r18	; 0x04
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   3e770:	cf cf       	rjmp	.-98     	; 0x3e710 <tftpPoll+0x96>
   3e772:	f7 01       	movw	r30, r14
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   3e774:	61 91       	ld	r22, Z+
   3e776:	7f 01       	movw	r14, r30
   3e778:	68 01       	movw	r12, r16
   3e77a:	ff ef       	ldi	r31, 0xFF	; 255
   3e77c:	cf 1a       	sub	r12, r31
			*txPtr = lastPacket & 0xff;
   3e77e:	df 0a       	sbc	r13, r31
   3e780:	c8 01       	movw	r24, r16
	}

	txPtr = txBuffer;

	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
   3e782:	4d dd       	rcall	.-1382   	; 0x3e21e <netWriteReg>
   3e784:	c1 14       	cp	r12, r1
   3e786:	20 e6       	ldi	r18, 0x60	; 96
   3e788:	d2 06       	cpc	r13, r18
   3e78a:	19 f4       	brne	.+6      	; 0x3e792 <tftpPoll+0x118>
   3e78c:	c1 2c       	mov	r12, r1
   3e78e:	e8 e5       	ldi	r30, 0x58	; 88
   3e790:	de 2e       	mov	r13, r30
   3e792:	86 01       	movw	r16, r12
   3e794:	ae 10       	cpse	r10, r14

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3e796:	ed cf       	rjmp	.-38     	; 0x3e772 <tftpPoll+0xf8>
   3e798:	b8 01       	movw	r22, r16
   3e79a:	78 55       	subi	r23, 0x58	; 88
   3e79c:	84 e2       	ldi	r24, 0x24	; 36
   3e79e:	97 e0       	ldi	r25, 0x07	; 7
   3e7a0:	85 dd       	rcall	.-1270   	; 0x3e2ac <netWriteWord>
   3e7a2:	60 e2       	ldi	r22, 0x20	; 32
   3e7a4:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   3e7a6:	97 e0       	ldi	r25, 0x07	; 7
   3e7a8:	3a dd       	rcall	.-1420   	; 0x3e21e <netWriteReg>
		netWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	netWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
   3e7aa:	81 e0       	ldi	r24, 0x01	; 1
   3e7ac:	97 e0       	ldi	r25, 0x07	; 7
   3e7ae:	50 dd       	rcall	.-1376   	; 0x3e250 <netReadReg>
   3e7b0:	81 11       	cpse	r24, r1
   3e7b2:	fb cf       	rjmp	.-10     	; 0x3e7aa <tftpPoll+0x130>
   3e7b4:	34 e0       	ldi	r19, 0x04	; 4
	netWriteReg(REG_S3_CR, CR_SEND);
   3e7b6:	b3 12       	cpse	r11, r19
   3e7b8:	75 cf       	rjmp	.-278    	; 0x3e6a4 <tftpPoll+0x2a>
   3e7ba:	60 e1       	ldi	r22, 0x10	; 16
   3e7bc:	81 e0       	ldi	r24, 0x01	; 1
   3e7be:	97 e0       	ldi	r25, 0x07	; 7

	while(netReadReg(REG_S3_CR));
   3e7c0:	2e dd       	rcall	.-1444   	; 0x3e21e <netWriteReg>
   3e7c2:	80 e0       	ldi	r24, 0x00	; 0
   3e7c4:	cc 59       	subi	r28, 0x9C	; 156
   3e7c6:	df 4f       	sbci	r29, 0xFF	; 255
   3e7c8:	de bf       	out	0x3e, r29	; 62
   3e7ca:	cd bf       	out	0x3d, r28	; 61
#endif
		// Send the response
		sendResponse(response);
	}

	if(response == FINAL_ACK) {
   3e7cc:	df 91       	pop	r29
   3e7ce:	cf 91       	pop	r28
   3e7d0:	1f 91       	pop	r17
		netWriteReg(REG_S3_CR, CR_CLOSE);
   3e7d2:	0f 91       	pop	r16
   3e7d4:	ff 90       	pop	r15
   3e7d6:	ef 90       	pop	r14
   3e7d8:	df 90       	pop	r13
   3e7da:	cf 90       	pop	r12
		// Complete
		return(0);
   3e7dc:	bf 90       	pop	r11
	}

	// Tftp continues
	return(1);
}
   3e7de:	af 90       	pop	r10
   3e7e0:	08 95       	ret

0003e7e2 <validImage>:
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t* base)
{
   3e7e2:	20 e0       	ldi	r18, 0x00	; 0
   3e7e4:	30 e0       	ldi	r19, 0x00	; 0
   3e7e6:	fc 01       	movw	r30, r24
   3e7e8:	e2 0f       	add	r30, r18
   3e7ea:	f3 1f       	adc	r31, r19
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   3e7ec:	40 81       	ld	r20, Z
   3e7ee:	4c 30       	cpi	r20, 0x0C	; 12
   3e7f0:	51 f4       	brne	.+20     	; 0x3e806 <validImage+0x24>
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
		}
		if(base[i + 1] != 0x94) {
   3e7f2:	41 81       	ldd	r20, Z+1	; 0x01
   3e7f4:	44 39       	cpi	r20, 0x94	; 148
   3e7f6:	39 f4       	brne	.+14     	; 0x3e806 <validImage+0x24>
   3e7f8:	2c 5f       	subi	r18, 0xFC	; 252
   3e7fa:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   3e7fc:	24 33       	cpi	r18, 0x34	; 52
   3e7fe:	31 05       	cpc	r19, r1
   3e800:	91 f7       	brne	.-28     	; 0x3e7e6 <validImage+0x4>
		}
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
   3e802:	81 e0       	ldi	r24, 0x01	; 1
}
   3e804:	08 95       	ret
			tracenum(i);
			trace(" with ");
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
   3e806:	80 e0       	ldi	r24, 0x00	; 0
   3e808:	08 95       	ret

0003e80a <watchdogDisable>:
 */
uint8_t watchdogDisable(void)
{
	uint8_t mcusr_mirror;

	mcusr_mirror = MCUSR;
   3e80a:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
   3e80c:	14 be       	out	0x34, r1	; 52
	wdt_disable();
   3e80e:	98 e1       	ldi	r25, 0x18	; 24
   3e810:	0f b6       	in	r0, 0x3f	; 63
   3e812:	f8 94       	cli
   3e814:	90 93 60 00 	sts	0x0060, r25
   3e818:	10 92 60 00 	sts	0x0060, r1
   3e81c:	0f be       	out	0x3f, r0	; 63

	return(mcusr_mirror);
}
   3e81e:	08 95       	ret

0003e820 <watchdogReset>:

void watchdogReset(void)
{
	wdt_reset();
   3e820:	a8 95       	wdr
   3e822:	08 95       	ret

0003e824 <watchdogConfig>:
}

void watchdogConfig(uint8_t x)
{
	WDTCSR = _BV(WDCE) | _BV(WDE);
   3e824:	e0 e6       	ldi	r30, 0x60	; 96
   3e826:	f0 e0       	ldi	r31, 0x00	; 0
   3e828:	98 e1       	ldi	r25, 0x18	; 24
   3e82a:	90 83       	st	Z, r25
	WDTCSR = x;
   3e82c:	80 83       	st	Z, r24
   3e82e:	08 95       	ret

0003e830 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   3e830:	82 e0       	ldi	r24, 0x02	; 2
   3e832:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   3e836:	88 e1       	ldi	r24, 0x18	; 24
   3e838:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   3e83c:	86 e0       	ldi	r24, 0x06	; 6
   3e83e:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   3e842:	80 e1       	ldi	r24, 0x10	; 16
   3e844:	80 93 c4 00 	sts	0x00C4, r24
   3e848:	08 95       	ret

0003e84a <putCh>:
}


void putCh(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   3e84a:	90 91 c0 00 	lds	r25, 0x00C0
   3e84e:	95 ff       	sbrs	r25, 5
   3e850:	fc cf       	rjmp	.-8      	; 0x3e84a <putCh>
	UART_DATA_REG = c;
   3e852:	80 93 c6 00 	sts	0x00C6, r24
   3e856:	08 95       	ret

0003e858 <putHex>:
}


void putHex(uint8_t c)
{
	c &= 0xf;
   3e858:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   3e85a:	8a 30       	cpi	r24, 0x0A	; 10
   3e85c:	08 f0       	brcs	.+2      	; 0x3e860 <putHex+0x8>
   3e85e:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putCh(c + '0');
   3e860:	80 5d       	subi	r24, 0xD0	; 208
   3e862:	f3 cf       	rjmp	.-26     	; 0x3e84a <putCh>

0003e864 <getCh>:

uint8_t getCh(void)
{
	uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   3e864:	80 91 c0 00 	lds	r24, 0x00C0
   3e868:	87 ff       	sbrs	r24, 7
   3e86a:	fc cf       	rjmp	.-8      	; 0x3e864 <getCh>
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   3e86c:	80 91 c0 00 	lds	r24, 0x00C0
   3e870:	84 ff       	sbrs	r24, 4
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		watchdogReset();
   3e872:	d6 df       	rcall	.-84     	; 0x3e820 <watchdogReset>
   3e874:	80 91 c6 00 	lds	r24, 0x00C6
	}
	ch = UART_DATA_REG;
   3e878:	08 95       	ret

0003e87a <serialPoll>:
	return ch;
}


uint8_t serialPoll(uint8_t command)
{
   3e87a:	cf 93       	push	r28
   3e87c:	df 93       	push	r29
   3e87e:	1f 92       	push	r1
   3e880:	cd b7       	in	r28, 0x3d	; 61
   3e882:	de b7       	in	r29, 0x3e	; 62
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   3e884:	90 91 c0 00 	lds	r25, 0x00C0
   3e888:	97 ff       	sbrs	r25, 7
   3e88a:	07 c0       	rjmp	.+14     	; 0x3e89a <serialPoll+0x20>
		resetTick();
   3e88c:	89 83       	std	Y+1, r24	; 0x01
   3e88e:	2b d0       	rcall	.+86     	; 0x3e8e6 <resetTick>
   3e890:	91 e0       	ldi	r25, 0x01	; 1
		serialFlashing = TRUE;
   3e892:	90 93 28 02 	sts	0x0228, r25
   3e896:	89 81       	ldd	r24, Y+1	; 0x01
		return(command);
   3e898:	01 c0       	rjmp	.+2      	; 0x3e89c <serialPoll+0x22>
   3e89a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return(1);
   3e89c:	0f 90       	pop	r0
}
   3e89e:	df 91       	pop	r29
   3e8a0:	cf 91       	pop	r28
   3e8a2:	08 95       	ret

0003e8a4 <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   3e8a4:	80 91 84 00 	lds	r24, 0x0084
   3e8a8:	90 91 85 00 	lds	r25, 0x0085
	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   3e8ac:	92 ff       	sbrs	r25, 2
   3e8ae:	04 c0       	rjmp	.+8      	; 0x3e8b8 <updateLed+0x14>
   3e8b0:	25 b1       	in	r18, 0x05	; 5
   3e8b2:	20 58       	subi	r18, 0x80	; 128
   3e8b4:	25 b9       	out	0x05, r18	; 5
   3e8b6:	01 c0       	rjmp	.+2      	; 0x3e8ba <updateLed+0x16>
	else LED_PORT &= ~_BV(LED); // Led pin low
   3e8b8:	2f 98       	cbi	0x05, 7	; 5
	if(next_timer_1 < last_timer_1) {
   3e8ba:	20 91 24 02 	lds	r18, 0x0224
   3e8be:	30 91 25 02 	lds	r19, 0x0225
   3e8c2:	82 17       	cp	r24, r18
   3e8c4:	93 07       	cpc	r25, r19
   3e8c6:	50 f4       	brcc	.+20     	; 0x3e8dc <updateLed+0x38>
		tick++;
   3e8c8:	20 91 22 02 	lds	r18, 0x0222
   3e8cc:	30 91 23 02 	lds	r19, 0x0223
   3e8d0:	2f 5f       	subi	r18, 0xFF	; 255
   3e8d2:	3f 4f       	sbci	r19, 0xFF	; 255
   3e8d4:	30 93 23 02 	sts	0x0223, r19
   3e8d8:	20 93 22 02 	sts	0x0222, r18
		tracenum(next_timer_1);
		traceln(" lTM: ");
		tracenum(last_timer_1);
#endif
	}
	last_timer_1 = next_timer_1;
   3e8dc:	90 93 25 02 	sts	0x0225, r25
   3e8e0:	80 93 24 02 	sts	0x0224, r24
   3e8e4:	08 95       	ret

0003e8e6 <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
   3e8e6:	10 92 85 00 	sts	0x0085, r1
   3e8ea:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   3e8ee:	10 92 23 02 	sts	0x0223, r1
   3e8f2:	10 92 22 02 	sts	0x0222, r1
   3e8f6:	08 95       	ret

0003e8f8 <timedOut>:
}

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
	if (pgm_read_word(0x0000) == 0xFFFF) return(0);
   3e8f8:	e0 e0       	ldi	r30, 0x00	; 0
   3e8fa:	f0 e0       	ldi	r31, 0x00	; 0
   3e8fc:	85 91       	lpm	r24, Z+
   3e8fe:	94 91       	lpm	r25, Z
   3e900:	01 96       	adiw	r24, 0x01	; 1
   3e902:	41 f0       	breq	.+16     	; 0x3e914 <timedOut+0x1c>
	if(tick > TIMEOUT) return(1);
   3e904:	81 e0       	ldi	r24, 0x01	; 1
   3e906:	20 91 22 02 	lds	r18, 0x0222
   3e90a:	30 91 23 02 	lds	r19, 0x0223
   3e90e:	25 30       	cpi	r18, 0x05	; 5
   3e910:	31 05       	cpc	r19, r1
   3e912:	08 f4       	brcc	.+2      	; 0x3e916 <timedOut+0x1e>
}

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
	if (pgm_read_word(0x0000) == 0xFFFF) return(0);
   3e914:	80 e0       	ldi	r24, 0x00	; 0
	if(tick > TIMEOUT) return(1);
	else return(0);
}
   3e916:	08 95       	ret

0003e918 <memcpy_P>:
   3e918:	fb 01       	movw	r30, r22
   3e91a:	dc 01       	movw	r26, r24
   3e91c:	02 c0       	rjmp	.+4      	; 0x3e922 <memcpy_P+0xa>
   3e91e:	05 90       	lpm	r0, Z+
   3e920:	0d 92       	st	X+, r0
   3e922:	41 50       	subi	r20, 0x01	; 1
   3e924:	50 40       	sbci	r21, 0x00	; 0
   3e926:	d8 f7       	brcc	.-10     	; 0x3e91e <memcpy_P+0x6>
   3e928:	08 95       	ret

0003e92a <__eerd_byte_m2560>:
   3e92a:	f9 99       	sbic	0x1f, 1	; 31
   3e92c:	fe cf       	rjmp	.-4      	; 0x3e92a <__eerd_byte_m2560>
   3e92e:	92 bd       	out	0x22, r25	; 34
   3e930:	81 bd       	out	0x21, r24	; 33
   3e932:	f8 9a       	sbi	0x1f, 0	; 31
   3e934:	99 27       	eor	r25, r25
   3e936:	80 b5       	in	r24, 0x20	; 32
   3e938:	08 95       	ret

0003e93a <__eewr_byte_m2560>:
   3e93a:	26 2f       	mov	r18, r22

0003e93c <__eewr_r18_m2560>:
   3e93c:	f9 99       	sbic	0x1f, 1	; 31
   3e93e:	fe cf       	rjmp	.-4      	; 0x3e93c <__eewr_r18_m2560>
   3e940:	1f ba       	out	0x1f, r1	; 31
   3e942:	92 bd       	out	0x22, r25	; 34
   3e944:	81 bd       	out	0x21, r24	; 33
   3e946:	20 bd       	out	0x20, r18	; 32
   3e948:	0f b6       	in	r0, 0x3f	; 63
   3e94a:	f8 94       	cli
   3e94c:	fa 9a       	sbi	0x1f, 2	; 31
   3e94e:	f9 9a       	sbi	0x1f, 1	; 31
   3e950:	0f be       	out	0x3f, r0	; 63
   3e952:	01 96       	adiw	r24, 0x01	; 1
   3e954:	08 95       	ret

0003e956 <_exit>:
   3e956:	f8 94       	cli

0003e958 <__stop_program>:
   3e958:	ff cf       	rjmp	.-2      	; 0x3e958 <__stop_program>
