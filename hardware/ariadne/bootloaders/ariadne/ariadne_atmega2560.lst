
ariadne_atmega2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0003ee9a  00000f2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e9a  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800220  00800220  00000f4e  2**0
                  ALLOC
  3 .stab         000046e0  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001592  00000000  00000000  00005630  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006bc2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	8e c0       	rjmp	.+284    	; 0x3e11e <__ctors_end>
   3e002:	00 00       	nop
   3e004:	0d c1       	rjmp	.+538    	; 0x3e220 <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	0b c1       	rjmp	.+534    	; 0x3e220 <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	09 c1       	rjmp	.+530    	; 0x3e220 <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	07 c1       	rjmp	.+526    	; 0x3e220 <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	05 c1       	rjmp	.+522    	; 0x3e220 <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	03 c1       	rjmp	.+518    	; 0x3e220 <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	01 c1       	rjmp	.+514    	; 0x3e220 <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	ff c0       	rjmp	.+510    	; 0x3e220 <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	fd c0       	rjmp	.+506    	; 0x3e220 <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	fb c0       	rjmp	.+502    	; 0x3e220 <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	f9 c0       	rjmp	.+498    	; 0x3e220 <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	f7 c0       	rjmp	.+494    	; 0x3e220 <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	f5 c0       	rjmp	.+490    	; 0x3e220 <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	f3 c0       	rjmp	.+486    	; 0x3e220 <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	f1 c0       	rjmp	.+482    	; 0x3e220 <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	ef c0       	rjmp	.+478    	; 0x3e220 <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	ed c0       	rjmp	.+474    	; 0x3e220 <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	eb c0       	rjmp	.+470    	; 0x3e220 <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	e9 c0       	rjmp	.+466    	; 0x3e220 <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	e7 c0       	rjmp	.+462    	; 0x3e220 <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	e5 c0       	rjmp	.+458    	; 0x3e220 <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	e3 c0       	rjmp	.+454    	; 0x3e220 <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	e1 c0       	rjmp	.+450    	; 0x3e220 <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	df c0       	rjmp	.+446    	; 0x3e220 <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	dd c0       	rjmp	.+442    	; 0x3e220 <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	db c0       	rjmp	.+438    	; 0x3e220 <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	d9 c0       	rjmp	.+434    	; 0x3e220 <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	d7 c0       	rjmp	.+430    	; 0x3e220 <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	d5 c0       	rjmp	.+426    	; 0x3e220 <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	d3 c0       	rjmp	.+422    	; 0x3e220 <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	d1 c0       	rjmp	.+418    	; 0x3e220 <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	cf c0       	rjmp	.+414    	; 0x3e220 <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	cd c0       	rjmp	.+410    	; 0x3e220 <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	cb c0       	rjmp	.+406    	; 0x3e220 <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	c9 c0       	rjmp	.+402    	; 0x3e220 <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	c7 c0       	rjmp	.+398    	; 0x3e220 <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	c5 c0       	rjmp	.+394    	; 0x3e220 <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	c3 c0       	rjmp	.+390    	; 0x3e220 <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	c1 c0       	rjmp	.+386    	; 0x3e220 <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	bf c0       	rjmp	.+382    	; 0x3e220 <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	bd c0       	rjmp	.+378    	; 0x3e220 <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	bb c0       	rjmp	.+374    	; 0x3e220 <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	b9 c0       	rjmp	.+370    	; 0x3e220 <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	b7 c0       	rjmp	.+366    	; 0x3e220 <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	b5 c0       	rjmp	.+362    	; 0x3e220 <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	b3 c0       	rjmp	.+358    	; 0x3e220 <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	b1 c0       	rjmp	.+354    	; 0x3e220 <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	af c0       	rjmp	.+350    	; 0x3e220 <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	ad c0       	rjmp	.+346    	; 0x3e220 <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	ab c0       	rjmp	.+342    	; 0x3e220 <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	a9 c0       	rjmp	.+338    	; 0x3e220 <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	a7 c0       	rjmp	.+334    	; 0x3e220 <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	a5 c0       	rjmp	.+330    	; 0x3e220 <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	a3 c0       	rjmp	.+326    	; 0x3e220 <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	a1 c0       	rjmp	.+322    	; 0x3e220 <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	9f c0       	rjmp	.+318    	; 0x3e220 <__bad_interrupt>
	...

0003e0e4 <tftp_invalid_image_packet>:
   3e0e4:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
   3e0f4:	67 65 20 66 69 6c 65 00                             ge file.

0003e0fc <tftp_unknown_error_packet>:
   3e0fc:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0003e107 <tftp_full_error_packet>:
   3e107:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0003e111 <tftp_opcode_error_packet>:
   3e111:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0003e11e <__ctors_end>:
   3e11e:	11 24       	eor	r1, r1
   3e120:	1f be       	out	0x3f, r1	; 63
   3e122:	cf ef       	ldi	r28, 0xFF	; 255
   3e124:	d1 e2       	ldi	r29, 0x21	; 33
   3e126:	de bf       	out	0x3e, r29	; 62
   3e128:	cd bf       	out	0x3d, r28	; 61
   3e12a:	01 e0       	ldi	r16, 0x01	; 1
   3e12c:	0c bf       	out	0x3c, r16	; 60

0003e12e <__do_copy_data>:
   3e12e:	12 e0       	ldi	r17, 0x02	; 2
   3e130:	a0 e0       	ldi	r26, 0x00	; 0
   3e132:	b2 e0       	ldi	r27, 0x02	; 2
   3e134:	ea e9       	ldi	r30, 0x9A	; 154
   3e136:	fe ee       	ldi	r31, 0xEE	; 238
   3e138:	03 e0       	ldi	r16, 0x03	; 3
   3e13a:	0b bf       	out	0x3b, r16	; 59
   3e13c:	02 c0       	rjmp	.+4      	; 0x3e142 <__do_copy_data+0x14>
   3e13e:	07 90       	elpm	r0, Z+
   3e140:	0d 92       	st	X+, r0
   3e142:	a0 32       	cpi	r26, 0x20	; 32
   3e144:	b1 07       	cpc	r27, r17
   3e146:	d9 f7       	brne	.-10     	; 0x3e13e <__do_copy_data+0x10>

0003e148 <__do_clear_bss>:
   3e148:	12 e0       	ldi	r17, 0x02	; 2
   3e14a:	a0 e2       	ldi	r26, 0x20	; 32
   3e14c:	b2 e0       	ldi	r27, 0x02	; 2
   3e14e:	01 c0       	rjmp	.+2      	; 0x3e152 <.do_clear_bss_start>

0003e150 <.do_clear_bss_loop>:
   3e150:	1d 92       	st	X+, r1

0003e152 <.do_clear_bss_start>:
   3e152:	ac 32       	cpi	r26, 0x2C	; 44
   3e154:	b1 07       	cpc	r27, r17
   3e156:	e1 f7       	brne	.-8      	; 0x3e150 <.do_clear_bss_loop>
   3e158:	01 d0       	rcall	.+2      	; 0x3e15c <main>
   3e15a:	9d c6       	rjmp	.+3386   	; 0x3ee96 <_exit>

0003e15c <main>:
   3e15c:	14 be       	out	0x34, r1	; 52
   3e15e:	88 e1       	ldi	r24, 0x18	; 24
   3e160:	0f b6       	in	r0, 0x3f	; 63
   3e162:	f8 94       	cli
   3e164:	80 93 60 00 	sts	0x0060, r24
   3e168:	10 92 60 00 	sts	0x0060, r1
   3e16c:	0f be       	out	0x3f, r0	; 63
   3e16e:	2f ef       	ldi	r18, 0xFF	; 255
   3e170:	83 ec       	ldi	r24, 0xC3	; 195
   3e172:	99 e0       	ldi	r25, 0x09	; 9
   3e174:	21 50       	subi	r18, 0x01	; 1
   3e176:	80 40       	sbci	r24, 0x00	; 0
   3e178:	90 40       	sbci	r25, 0x00	; 0
   3e17a:	e1 f7       	brne	.-8      	; 0x3e174 <main+0x18>
   3e17c:	00 c0       	rjmp	.+0      	; 0x3e17e <main+0x22>
   3e17e:	00 00       	nop
   3e180:	11 24       	eor	r1, r1
   3e182:	85 e0       	ldi	r24, 0x05	; 5
   3e184:	80 93 81 00 	sts	0x0081, r24
   3e188:	80 e0       	ldi	r24, 0x00	; 0
   3e18a:	90 e0       	ldi	r25, 0x00	; 0
   3e18c:	6e d6       	rcall	.+3292   	; 0x3ee6a <__eerd_byte_m2560>
   3e18e:	88 23       	and	r24, r24
   3e190:	21 f0       	breq	.+8      	; 0x3e19a <main+0x3e>
   3e192:	60 e0       	ldi	r22, 0x00	; 0
   3e194:	80 e0       	ldi	r24, 0x00	; 0
   3e196:	90 e0       	ldi	r25, 0x00	; 0
   3e198:	70 d6       	rcall	.+3296   	; 0x3ee7a <__eewr_byte_m2560>
   3e19a:	81 e0       	ldi	r24, 0x01	; 1
   3e19c:	90 e0       	ldi	r25, 0x00	; 0
   3e19e:	65 d6       	rcall	.+3274   	; 0x3ee6a <__eerd_byte_m2560>
   3e1a0:	84 30       	cpi	r24, 0x04	; 4
   3e1a2:	21 f0       	breq	.+8      	; 0x3e1ac <main+0x50>
   3e1a4:	64 e0       	ldi	r22, 0x04	; 4
   3e1a6:	81 e0       	ldi	r24, 0x01	; 1
   3e1a8:	90 e0       	ldi	r25, 0x00	; 0
   3e1aa:	67 d6       	rcall	.+3278   	; 0x3ee7a <__eewr_byte_m2560>
   3e1ac:	3f d3       	rcall	.+1662   	; 0x3e82c <serialInit>
   3e1ae:	91 d0       	rcall	.+290    	; 0x3e2d2 <netInit>
   3e1b0:	45 d2       	rcall	.+1162   	; 0x3e63c <tftpInit>
   3e1b2:	10 92 2a 02 	sts	0x022A, r1
   3e1b6:	10 92 2b 02 	sts	0x022B, r1
   3e1ba:	c3 e0       	ldi	r28, 0x03	; 3
   3e1bc:	c1 2c       	mov	r12, r1
   3e1be:	d1 2c       	mov	r13, r1
   3e1c0:	76 01       	movw	r14, r12
   3e1c2:	80 91 2a 02 	lds	r24, 0x022A
   3e1c6:	88 23       	and	r24, r24
   3e1c8:	29 f0       	breq	.+10     	; 0x3e1d4 <main+0x78>
   3e1ca:	80 91 2b 02 	lds	r24, 0x022B
   3e1ce:	88 23       	and	r24, r24
   3e1d0:	49 f0       	breq	.+18     	; 0x3e1e4 <main+0x88>
   3e1d2:	04 c0       	rjmp	.+8      	; 0x3e1dc <main+0x80>
   3e1d4:	56 d2       	rcall	.+1196   	; 0x3e682 <tftpPoll>
   3e1d6:	81 11       	cpse	r24, r1
   3e1d8:	f8 cf       	rjmp	.-16     	; 0x3e1ca <main+0x6e>
   3e1da:	1d c0       	rjmp	.+58     	; 0x3e216 <main+0xba>
   3e1dc:	82 d3       	rcall	.+1796   	; 0x3e8e2 <timedOut>
   3e1de:	81 11       	cpse	r24, r1
   3e1e0:	05 c0       	rjmp	.+10     	; 0x3e1ec <main+0x90>
   3e1e2:	17 c0       	rjmp	.+46     	; 0x3e212 <main+0xb6>
   3e1e4:	49 d3       	rcall	.+1682   	; 0x3e878 <serialPoll>
   3e1e6:	81 11       	cpse	r24, r1
   3e1e8:	f9 cf       	rjmp	.-14     	; 0x3e1dc <main+0x80>
   3e1ea:	15 c0       	rjmp	.+42     	; 0x3e216 <main+0xba>
   3e1ec:	82 e0       	ldi	r24, 0x02	; 2
   3e1ee:	90 e0       	ldi	r25, 0x00	; 0
   3e1f0:	3c d6       	rcall	.+3192   	; 0x3ee6a <__eerd_byte_m2560>
   3e1f2:	8e 3e       	cpi	r24, 0xEE	; 238
   3e1f4:	81 f0       	breq	.+32     	; 0x3e216 <main+0xba>
   3e1f6:	80 91 2b 02 	lds	r24, 0x022B
   3e1fa:	81 30       	cpi	r24, 0x01	; 1
   3e1fc:	51 f4       	brne	.+20     	; 0x3e212 <main+0xb6>
   3e1fe:	f6 01       	movw	r30, r12
   3e200:	e0 92 5b 00 	sts	0x005B, r14
   3e204:	c0 93 57 00 	sts	0x0057, r28
   3e208:	e8 95       	spm
   3e20a:	18 d2       	rcall	.+1072   	; 0x3e63c <tftpInit>
   3e20c:	61 d3       	rcall	.+1730   	; 0x3e8d0 <resetTick>
   3e20e:	10 92 2b 02 	sts	0x022B, r1
   3e212:	3d d3       	rcall	.+1658   	; 0x3e88e <updateLed>
   3e214:	d6 cf       	rjmp	.-84     	; 0x3e1c2 <main+0x66>
   3e216:	ee 27       	eor	r30, r30
   3e218:	ff 27       	eor	r31, r31
   3e21a:	09 94       	ijmp
   3e21c:	80 e0       	ldi	r24, 0x00	; 0
   3e21e:	90 e0       	ldi	r25, 0x00	; 0

0003e220 <__bad_interrupt>:
   3e220:	ef ce       	rjmp	.-546    	; 0x3e000 <__vectors>

0003e222 <netWriteReg>:
	    tracenum(address);
	    tracePGM(mDebugNet_COMMA);
	    tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   3e222:	20 e5       	ldi	r18, 0x50	; 80
   3e224:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3e226:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_WRITE;
   3e228:	20 ef       	ldi	r18, 0xF0	; 240
   3e22a:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e22c:	0d b4       	in	r0, 0x2d	; 45
   3e22e:	07 fe       	sbrs	r0, 7
   3e230:	fd cf       	rjmp	.-6      	; 0x3e22c <netWriteReg+0xa>

	SPDR = address >> 8;
   3e232:	29 2f       	mov	r18, r25
   3e234:	33 27       	eor	r19, r19
   3e236:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e238:	0d b4       	in	r0, 0x2d	; 45
   3e23a:	07 fe       	sbrs	r0, 7
   3e23c:	fd cf       	rjmp	.-6      	; 0x3e238 <netWriteReg+0x16>

	SPDR = address & 0xff;
   3e23e:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3e240:	0d b4       	in	r0, 0x2d	; 45
   3e242:	07 fe       	sbrs	r0, 7
   3e244:	fd cf       	rjmp	.-6      	; 0x3e240 <netWriteReg+0x1e>

	SPDR = value;
   3e246:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
   3e248:	0d b4       	in	r0, 0x2d	; 45
   3e24a:	07 fe       	sbrs	r0, 7
   3e24c:	fd cf       	rjmp	.-6      	; 0x3e248 <netWriteReg+0x26>

	SS_HIGH();
   3e24e:	2c 9a       	sbi	0x05, 4	; 5
	SPCR = 0; // Turn off SPI
   3e250:	1c bc       	out	0x2c, r1	; 44
   3e252:	08 95       	ret

0003e254 <netReadReg>:
	)
#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
   3e254:	20 e5       	ldi	r18, 0x50	; 80
   3e256:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3e258:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_READ;
   3e25a:	2f e0       	ldi	r18, 0x0F	; 15
   3e25c:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e25e:	0d b4       	in	r0, 0x2d	; 45
   3e260:	07 fe       	sbrs	r0, 7
   3e262:	fd cf       	rjmp	.-6      	; 0x3e25e <netReadReg+0xa>

	SPDR = address >> 8;
   3e264:	29 2f       	mov	r18, r25
   3e266:	33 27       	eor	r19, r19
   3e268:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e26a:	0d b4       	in	r0, 0x2d	; 45
   3e26c:	07 fe       	sbrs	r0, 7
   3e26e:	fd cf       	rjmp	.-6      	; 0x3e26a <netReadReg+0x16>

	SPDR = address & 0xff;
   3e270:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3e272:	0d b4       	in	r0, 0x2d	; 45
   3e274:	07 fe       	sbrs	r0, 7
   3e276:	fd cf       	rjmp	.-6      	; 0x3e272 <netReadReg+0x1e>

	SPDR = 0;
   3e278:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
   3e27a:	0d b4       	in	r0, 0x2d	; 45
   3e27c:	07 fe       	sbrs	r0, 7
   3e27e:	fd cf       	rjmp	.-6      	; 0x3e27a <netReadReg+0x26>

	SS_HIGH();
   3e280:	2c 9a       	sbi	0x05, 4	; 5
	returnValue = SPDR;
   3e282:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
   3e284:	1c bc       	out	0x2c, r1	; 44

	return(returnValue);
}
   3e286:	08 95       	ret

0003e288 <netReadWord>:

uint16_t netReadWord(uint16_t address)
{
   3e288:	1f 93       	push	r17
   3e28a:	cf 93       	push	r28
   3e28c:	df 93       	push	r29
   3e28e:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((netReadReg(address) << 8) | netReadReg(address + 1));
   3e290:	e1 df       	rcall	.-62     	; 0x3e254 <netReadReg>
   3e292:	18 2f       	mov	r17, r24
   3e294:	ce 01       	movw	r24, r28
   3e296:	01 96       	adiw	r24, 0x01	; 1
   3e298:	dd df       	rcall	.-70     	; 0x3e254 <netReadReg>
   3e29a:	21 2f       	mov	r18, r17
   3e29c:	30 e0       	ldi	r19, 0x00	; 0
   3e29e:	32 2f       	mov	r19, r18
   3e2a0:	22 27       	eor	r18, r18
   3e2a2:	a9 01       	movw	r20, r18
   3e2a4:	48 2b       	or	r20, r24
}
   3e2a6:	ca 01       	movw	r24, r20
   3e2a8:	df 91       	pop	r29
   3e2aa:	cf 91       	pop	r28
   3e2ac:	1f 91       	pop	r17
   3e2ae:	08 95       	ret

0003e2b0 <netWriteWord>:

void netWriteWord(uint16_t address, uint16_t value)
{
   3e2b0:	0f 93       	push	r16
   3e2b2:	1f 93       	push	r17
   3e2b4:	cf 93       	push	r28
   3e2b6:	df 93       	push	r29
   3e2b8:	8c 01       	movw	r16, r24
   3e2ba:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
   3e2bc:	67 2f       	mov	r22, r23
   3e2be:	77 27       	eor	r23, r23
   3e2c0:	b0 df       	rcall	.-160    	; 0x3e222 <netWriteReg>
   3e2c2:	6c 2f       	mov	r22, r28
	netWriteReg(address, value & 0xff);
   3e2c4:	c8 01       	movw	r24, r16
   3e2c6:	01 96       	adiw	r24, 0x01	; 1
   3e2c8:	df 91       	pop	r29
}
   3e2ca:	cf 91       	pop	r28
   3e2cc:	1f 91       	pop	r17
   3e2ce:	0f 91       	pop	r16
   3e2d0:	a8 cf       	rjmp	.-176    	; 0x3e222 <netWriteReg>

0003e2d2 <netInit>:

void netInit(void)
{
   3e2d2:	0f 93       	push	r16
   3e2d4:	1f 93       	push	r17
   3e2d6:	cf 93       	push	r28
   3e2d8:	df 93       	push	r29
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   3e2da:	8f e0       	ldi	r24, 0x0F	; 15
   3e2dc:	85 b9       	out	0x05, r24	; 5
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
   3e2de:	87 e0       	ldi	r24, 0x07	; 7
   3e2e0:	84 b9       	out	0x04, r24	; 4

#if (ETH_SS != SS)
	/** Initialize extra SS pin used in some boards (mega) */
	/** Set ethernet SS high */
	ETH_PORT |= _BV(ETH_SS);
   3e2e2:	2c 9a       	sbi	0x05, 4	; 5
	/** Set ethernet SS as output */
	ETH_DDR |= _BV(ETH_SS);
   3e2e4:	24 9a       	sbi	0x04, 4	; 4
#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
   3e2e6:	a5 9a       	sbi	0x14, 5	; 20
	/** Set SD SS pin as output */
	SD_DDR |= _BV(SD_SS);
   3e2e8:	9d 9a       	sbi	0x13, 5	; 19

#if (LED != SCK)
	/** Set up pins to flash the onboard led */
	/** Set led pin to high */
	LED_PORT |= _BV(LED);
   3e2ea:	2f 9a       	sbi	0x05, 7	; 5
	/** Set led pin as output */
	LED_DDR |= _BV(LED);
   3e2ec:	27 9a       	sbi	0x04, 7	; 4
#endif

	/* Set up SPI
	 * Set the Double SPI Speed Bit */
	SPSR = (1 << SPI2X);
   3e2ee:	81 e0       	ldi	r24, 0x01	; 1
   3e2f0:	8d bd       	out	0x2d, r24	; 45

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   3e2f2:	83 e0       	ldi	r24, 0x03	; 3
   3e2f4:	90 e0       	ldi	r25, 0x00	; 0
   3e2f6:	b9 d5       	rcall	.+2930   	; 0x3ee6a <__eerd_byte_m2560>
   3e2f8:	85 35       	cpi	r24, 0x55	; 85
   3e2fa:	29 f0       	breq	.+10     	; 0x3e306 <netInit+0x34>
   3e2fc:	00 e0       	ldi	r16, 0x00	; 0
   3e2fe:	12 e0       	ldi	r17, 0x02	; 2
   3e300:	c0 e0       	ldi	r28, 0x00	; 0
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   3e302:	d0 e0       	ldi	r29, 0x00	; 0
   3e304:	13 c0       	rjmp	.+38     	; 0x3e32c <netInit+0x5a>
   3e306:	84 e0       	ldi	r24, 0x04	; 4
   3e308:	90 e0       	ldi	r25, 0x00	; 0
   3e30a:	af d5       	rcall	.+2910   	; 0x3ee6a <__eerd_byte_m2560>
   3e30c:	8a 3a       	cpi	r24, 0xAA	; 170
   3e30e:	b1 f7       	brne	.-20     	; 0x3e2fc <netInit+0x2a>
   3e310:	01 e0       	ldi	r16, 0x01	; 1
   3e312:	12 e0       	ldi	r17, 0x02	; 2
   3e314:	c5 e0       	ldi	r28, 0x05	; 5
   3e316:	d0 e0       	ldi	r29, 0x00	; 0
   3e318:	ce 01       	movw	r24, r28
   3e31a:	a7 d5       	rcall	.+2894   	; 0x3ee6a <__eerd_byte_m2560>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   3e31c:	f8 01       	movw	r30, r16
   3e31e:	81 93       	st	Z+, r24
   3e320:	8f 01       	movw	r16, r30
   3e322:	21 96       	adiw	r28, 0x01	; 1
   3e324:	c7 31       	cpi	r28, 0x17	; 23
   3e326:	d1 05       	cpc	r29, r1
   3e328:	b9 f7       	brne	.-18     	; 0x3e318 <netInit+0x46>
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   3e32a:	e8 cf       	rjmp	.-48     	; 0x3e2fc <netInit+0x2a>
   3e32c:	f8 01       	movw	r30, r16
   3e32e:	61 91       	ld	r22, Z+
   3e330:	8f 01       	movw	r16, r30
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		netWriteReg(i, registerBuffer[i]);
   3e332:	ce 01       	movw	r24, r28
   3e334:	76 df       	rcall	.-276    	; 0x3e222 <netWriteReg>
   3e336:	21 96       	adiw	r28, 0x01	; 1
   3e338:	cc 31       	cpi	r28, 0x1C	; 28
   3e33a:	d1 05       	cpc	r29, r1
   3e33c:	b9 f7       	brne	.-18     	; 0x3e32c <netInit+0x5a>
   3e33e:	df 91       	pop	r29
			if(i != 14) putch(0x2E);
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
   3e340:	cf 91       	pop	r28
   3e342:	1f 91       	pop	r17
   3e344:	0f 91       	pop	r16
		netWriteReg(i, registerBuffer[i]);

	DBG_NET(tracePGMlnNet(mDebugNet_DONE);)
}
   3e346:	08 95       	ret

0003e348 <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   3e348:	cf 93       	push	r28
   3e34a:	df 93       	push	r29
   3e34c:	ec 01       	movw	r28, r24
	DBG_TFTP(
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)

	netWriteReg(REG_S3_CR, CR_CLOSE);
   3e34e:	60 e1       	ldi	r22, 0x10	; 16
   3e350:	81 e0       	ldi	r24, 0x01	; 1
   3e352:	97 e0       	ldi	r25, 0x07	; 7
   3e354:	66 df       	rcall	.-308    	; 0x3e222 <netWriteReg>
   3e356:	be 01       	movw	r22, r28

	do {
		// Write TFTP Port
		netWriteWord(REG_S3_PORT0, port);
   3e358:	84 e0       	ldi	r24, 0x04	; 4
   3e35a:	97 e0       	ldi	r25, 0x07	; 7
   3e35c:	a9 df       	rcall	.-174    	; 0x3e2b0 <netWriteWord>
   3e35e:	62 e0       	ldi	r22, 0x02	; 2
   3e360:	80 e0       	ldi	r24, 0x00	; 0
		// Write mode
		netWriteReg(REG_S3_MR, MR_UDP);
   3e362:	97 e0       	ldi	r25, 0x07	; 7
   3e364:	5e df       	rcall	.-324    	; 0x3e222 <netWriteReg>
   3e366:	61 e0       	ldi	r22, 0x01	; 1
   3e368:	81 e0       	ldi	r24, 0x01	; 1
   3e36a:	97 e0       	ldi	r25, 0x07	; 7
		// Open Socket
		netWriteReg(REG_S3_CR, CR_OPEN);
   3e36c:	5a df       	rcall	.-332    	; 0x3e222 <netWriteReg>
   3e36e:	83 e0       	ldi	r24, 0x03	; 3
   3e370:	97 e0       	ldi	r25, 0x07	; 7
   3e372:	70 df       	rcall	.-288    	; 0x3e254 <netReadReg>
   3e374:	82 32       	cpi	r24, 0x22	; 34

		// Read Status
		if(netReadReg(REG_S3_SR) != SOCK_UDP)
   3e376:	21 f0       	breq	.+8      	; 0x3e380 <sockInit+0x38>
   3e378:	60 e1       	ldi	r22, 0x10	; 16
   3e37a:	81 e0       	ldi	r24, 0x01	; 1
   3e37c:	97 e0       	ldi	r25, 0x07	; 7
   3e37e:	51 df       	rcall	.-350    	; 0x3e222 <netWriteReg>
   3e380:	83 e0       	ldi	r24, 0x03	; 3
			// Close Socket if it wasn't initialized correctly
			netWriteReg(REG_S3_CR, CR_CLOSE);
   3e382:	97 e0       	ldi	r25, 0x07	; 7
   3e384:	67 df       	rcall	.-306    	; 0x3e254 <netReadReg>
   3e386:	82 32       	cpi	r24, 0x22	; 34
   3e388:	31 f7       	brne	.-52     	; 0x3e356 <sockInit+0xe>
   3e38a:	df 91       	pop	r29

		// If socket correctly opened continue
	} while(netReadReg(REG_S3_SR) != SOCK_UDP);
   3e38c:	cf 91       	pop	r28
   3e38e:	08 95       	ret

0003e390 <processPacket>:
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
   3e390:	2f 92       	push	r2
   3e392:	3f 92       	push	r3
   3e394:	4f 92       	push	r4
   3e396:	5f 92       	push	r5
   3e398:	6f 92       	push	r6
   3e39a:	7f 92       	push	r7
   3e39c:	8f 92       	push	r8
   3e39e:	9f 92       	push	r9
   3e3a0:	af 92       	push	r10
   3e3a2:	bf 92       	push	r11
   3e3a4:	cf 92       	push	r12
   3e3a6:	df 92       	push	r13
   3e3a8:	ef 92       	push	r14
   3e3aa:	ff 92       	push	r15
   3e3ac:	0f 93       	push	r16
   3e3ae:	1f 93       	push	r17
   3e3b0:	cf 93       	push	r28
   3e3b2:	df 93       	push	r29
   3e3b4:	cd b7       	in	r28, 0x3d	; 61
   3e3b6:	de b7       	in	r29, 0x3e	; 62
   3e3b8:	cd 50       	subi	r28, 0x0D	; 13
   3e3ba:	d2 40       	sbci	r29, 0x02	; 2
   3e3bc:	de bf       	out	0x3e, r29	; 62
   3e3be:	cd bf       	out	0x3d, r28	; 61

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = netReadWord(REG_S3_RX_RD0);
   3e3c0:	88 e2       	ldi	r24, 0x28	; 40
   3e3c2:	97 e0       	ldi	r25, 0x07	; 7
   3e3c4:	61 df       	rcall	.-318    	; 0x3e288 <netReadWord>
   3e3c6:	00 97       	sbiw	r24, 0x00	; 0
	DBG_TFTP_EX(
		tracePGMlnTftp(mDebugTftp_RPTR);
		tracenum(readPointer);
	)

	if(readPointer == 0) readPointer += S3_RX_START;
   3e3c8:	11 f4       	brne	.+4      	; 0x3e3ce <processPacket+0x3e>
   3e3ca:	80 e0       	ldi	r24, 0x00	; 0
   3e3cc:	98 e7       	ldi	r25, 0x78	; 120
   3e3ce:	8e 01       	movw	r16, r28
   3e3d0:	0f 5f       	subi	r16, 0xFF	; 255
   3e3d2:	1f 4f       	sbci	r17, 0xFF	; 255
   3e3d4:	6e 01       	movw	r12, r28
   3e3d6:	23 ef       	ldi	r18, 0xF3	; 243
   3e3d8:	c2 1a       	sub	r12, r18
   3e3da:	2d ef       	ldi	r18, 0xFD	; 253
   3e3dc:	d2 0a       	sbc	r13, r18
   3e3de:	58 01       	movw	r10, r16
   3e3e0:	0c 15       	cp	r16, r12

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   3e3e2:	1d 05       	cpc	r17, r13
   3e3e4:	89 f0       	breq	.+34     	; 0x3e408 <processPacket+0x78>
   3e3e6:	7c 01       	movw	r14, r24
				tracePGMlnTftp(mDebugTftp_RPOS);
				tracenum(readPointer);
			}
		)

		*bufPtr++ = netReadReg(readPointer++);
   3e3e8:	ef ef       	ldi	r30, 0xFF	; 255
   3e3ea:	ee 1a       	sub	r14, r30
   3e3ec:	fe 0a       	sbc	r15, r30
   3e3ee:	32 df       	rcall	.-412    	; 0x3e254 <netReadReg>
   3e3f0:	f8 01       	movw	r30, r16
   3e3f2:	81 93       	st	Z+, r24
   3e3f4:	8f 01       	movw	r16, r30
   3e3f6:	e1 14       	cp	r14, r1
   3e3f8:	f0 e8       	ldi	r31, 0x80	; 128

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
   3e3fa:	ff 06       	cpc	r15, r31
   3e3fc:	19 f4       	brne	.+6      	; 0x3e404 <processPacket+0x74>
   3e3fe:	e1 2c       	mov	r14, r1
   3e400:	68 e7       	ldi	r22, 0x78	; 120
   3e402:	f6 2e       	mov	r15, r22
   3e404:	c7 01       	movw	r24, r14
   3e406:	ec cf       	rjmp	.-40     	; 0x3e3e0 <processPacket+0x50>
   3e408:	bc 01       	movw	r22, r24
   3e40a:	88 e2       	ldi	r24, 0x28	; 40
	}

	netWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
   3e40c:	97 e0       	ldi	r25, 0x07	; 7
   3e40e:	50 df       	rcall	.-352    	; 0x3e2b0 <netWriteWord>
   3e410:	60 e4       	ldi	r22, 0x40	; 64
   3e412:	81 e0       	ldi	r24, 0x01	; 1
   3e414:	97 e0       	ldi	r25, 0x07	; 7
	netWriteReg(REG_S3_CR, CR_RECV);
   3e416:	05 df       	rcall	.-502    	; 0x3e222 <netWriteReg>
   3e418:	81 e0       	ldi	r24, 0x01	; 1
   3e41a:	97 e0       	ldi	r25, 0x07	; 7
   3e41c:	1b df       	rcall	.-458    	; 0x3e254 <netReadReg>
   3e41e:	81 11       	cpse	r24, r1

	while(netReadReg(REG_S3_CR));
   3e420:	fb cf       	rjmp	.-10     	; 0x3e418 <processPacket+0x88>
   3e422:	75 01       	movw	r14, r10
   3e424:	0c e0       	ldi	r16, 0x0C	; 12
   3e426:	17 e0       	ldi	r17, 0x07	; 7
   3e428:	f7 01       	movw	r30, r14
   3e42a:	61 91       	ld	r22, Z+
   3e42c:	7f 01       	movw	r14, r30
   3e42e:	c8 01       	movw	r24, r16
   3e430:	f8 de       	rcall	.-528    	; 0x3e222 <netWriteReg>
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);
   3e432:	0f 5f       	subi	r16, 0xFF	; 255
   3e434:	1f 4f       	sbci	r17, 0xFF	; 255
   3e436:	02 31       	cpi	r16, 0x12	; 18
   3e438:	f7 e0       	ldi	r31, 0x07	; 7
   3e43a:	1f 07       	cpc	r17, r31
   3e43c:	a9 f7       	brne	.-22     	; 0x3e428 <processPacket+0x98>
   3e43e:	0f 81       	ldd	r16, Y+7	; 0x07
   3e440:	10 e0       	ldi	r17, 0x00	; 0
   3e442:	10 2f       	mov	r17, r16
   3e444:	00 27       	eor	r16, r16
   3e446:	88 85       	ldd	r24, Y+8	; 0x08
   3e448:	08 0f       	add	r16, r24

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   3e44a:	11 1d       	adc	r17, r1
   3e44c:	89 85       	ldd	r24, Y+9	; 0x09
   3e44e:	90 e0       	ldi	r25, 0x00	; 0
   3e450:	98 2f       	mov	r25, r24
   3e452:	88 27       	eor	r24, r24
   3e454:	2a 85       	ldd	r18, Y+10	; 0x0a
   3e456:	82 0f       	add	r24, r18
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
   3e458:	91 1d       	adc	r25, r1
   3e45a:	eb 84       	ldd	r14, Y+11	; 0x0b
   3e45c:	f1 2c       	mov	r15, r1
   3e45e:	fe 2c       	mov	r15, r14
   3e460:	ee 24       	eor	r14, r14
   3e462:	2c 85       	ldd	r18, Y+12	; 0x0c
   3e464:	e2 0e       	add	r14, r18
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
   3e466:	f1 1c       	adc	r15, r1
   3e468:	83 30       	cpi	r24, 0x03	; 3
   3e46a:	91 05       	cpc	r25, r1
   3e46c:	89 f4       	brne	.+34     	; 0x3e490 <processPacket+0x100>
   3e46e:	29 ef       	ldi	r18, 0xF9	; 249
   3e470:	e2 16       	cp	r14, r18
   3e472:	21 e0       	ldi	r18, 0x01	; 1
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
   3e474:	f2 06       	cpc	r15, r18
   3e476:	90 f5       	brcc	.+100    	; 0x3e4dc <processPacket+0x14c>
   3e478:	80 91 20 02 	lds	r24, 0x0220
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   3e47c:	90 91 21 02 	lds	r25, 0x0221
   3e480:	e8 16       	cp	r14, r24
   3e482:	f9 06       	cpc	r15, r25
   3e484:	58 f1       	brcs	.+86     	; 0x3e4dc <processPacket+0x14c>
   3e486:	01 96       	adiw	r24, 0x01	; 1
   3e488:	8e 15       	cp	r24, r14
   3e48a:	9f 05       	cpc	r25, r15
   3e48c:	38 f1       	brcs	.+78     	; 0x3e4dc <processPacket+0x14c>
   3e48e:	22 c0       	rjmp	.+68     	; 0x3e4d4 <processPacket+0x144>
   3e490:	05 30       	cpi	r16, 0x05	; 5
   3e492:	12 40       	sbci	r17, 0x02	; 2
   3e494:	18 f5       	brcc	.+70     	; 0x3e4dc <processPacket+0x14c>
   3e496:	84 30       	cpi	r24, 0x04	; 4
   3e498:	91 05       	cpc	r25, r1
   3e49a:	c8 f4       	brcc	.+50     	; 0x3e4ce <processPacket+0x13e>
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3e49c:	81 30       	cpi	r24, 0x01	; 1
   3e49e:	91 05       	cpc	r25, r1
   3e4a0:	49 f1       	breq	.+82     	; 0x3e4f4 <processPacket+0x164>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3e4a2:	02 97       	sbiw	r24, 0x02	; 2
   3e4a4:	d9 f4       	brne	.+54     	; 0x3e4dc <processPacket+0x14c>
   3e4a6:	14 d2       	rcall	.+1064   	; 0x3e8d0 <resetTick>
   3e4a8:	6f ef       	ldi	r22, 0xFF	; 255
   3e4aa:	82 e0       	ldi	r24, 0x02	; 2
   3e4ac:	90 e0       	ldi	r25, 0x00	; 0
   3e4ae:	e5 d4       	rcall	.+2506   	; 0x3ee7a <__eewr_byte_m2560>
   3e4b0:	80 91 28 02 	lds	r24, 0x0228
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   3e4b4:	90 91 29 02 	lds	r25, 0x0229

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   3e4b8:	47 df       	rcall	.-370    	; 0x3e348 <sockInit>
   3e4ba:	10 92 21 02 	sts	0x0221, r1
   3e4be:	10 92 20 02 	sts	0x0220, r1

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3e4c2:	10 92 23 02 	sts	0x0223, r1
   3e4c6:	10 92 22 02 	sts	0x0222, r1
   3e4ca:	22 e0       	ldi	r18, 0x02	; 2
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
   3e4cc:	0d c0       	rjmp	.+26     	; 0x3e4e8 <processPacket+0x158>
   3e4ce:	06 97       	sbiw	r24, 0x06	; 6
   3e4d0:	88 f0       	brcs	.+34     	; 0x3e4f4 <processPacket+0x164>
   3e4d2:	04 c0       	rjmp	.+8      	; 0x3e4dc <processPacket+0x14c>
   3e4d4:	05 30       	cpi	r16, 0x05	; 5
   3e4d6:	82 e0       	ldi	r24, 0x02	; 2
   3e4d8:	18 07       	cpc	r17, r24
   3e4da:	90 f0       	brcs	.+36     	; 0x3e500 <processPacket+0x170>
			returnCode = ACK; // Send back acknowledge for packet 0
   3e4dc:	80 91 28 02 	lds	r24, 0x0228

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3e4e0:	90 91 29 02 	lds	r25, 0x0229
   3e4e4:	31 df       	rcall	.-414    	; 0x3e348 <sockInit>

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3e4e6:	21 e0       	ldi	r18, 0x01	; 1
   3e4e8:	c3 5f       	subi	r28, 0xF3	; 243
   3e4ea:	dd 4f       	sbci	r29, 0xFD	; 253
   3e4ec:	28 83       	st	Y, r18
			)

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3e4ee:	cd 50       	subi	r28, 0x0D	; 13
   3e4f0:	d2 40       	sbci	r29, 0x02	; 2
   3e4f2:	88 c0       	rjmp	.+272    	; 0x3e604 <processPacket+0x274>
   3e4f4:	c3 5f       	subi	r28, 0xF3	; 243
   3e4f6:	dd 4f       	sbci	r29, 0xFD	; 253
   3e4f8:	18 82       	st	Y, r1
			 * It can be done by reinitializig the tftpd or
			 * by resetting the device. I should find out which is best...
			 * Right now it is being done by resetting the timer if we have a
			 * data packet. */
			// Invalid - return error
			returnCode = ERROR_INVALID;
   3e4fa:	cd 50       	subi	r28, 0x0D	; 13
   3e4fc:	d2 40       	sbci	r29, 0x02	; 2
   3e4fe:	82 c0       	rjmp	.+260    	; 0x3e604 <processPacket+0x274>
   3e500:	e7 d1       	rcall	.+974    	; 0x3e8d0 <resetTick>
   3e502:	04 50       	subi	r16, 0x04	; 4
   3e504:	11 09       	sbc	r17, r1
			break;
   3e506:	f0 92 23 02 	sts	0x0223, r15
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   3e50a:	e0 92 22 02 	sts	0x0222, r14
   3e50e:	67 01       	movw	r12, r14
   3e510:	81 e0       	ldi	r24, 0x01	; 1
   3e512:	c8 1a       	sub	r12, r24
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   3e514:	d1 08       	sbc	r13, r1
   3e516:	dc 2c       	mov	r13, r12

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
   3e518:	cc 24       	eor	r12, r12
   3e51a:	dd 0c       	add	r13, r13
			lastPacket = tftpBlock;
   3e51c:	e1 2c       	mov	r14, r1
   3e51e:	f1 2c       	mov	r15, r1
   3e520:	01 15       	cp	r16, r1
   3e522:	e2 e0       	ldi	r30, 0x02	; 2
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
   3e524:	1e 07       	cpc	r17, r30
   3e526:	10 f4       	brcc	.+4      	; 0x3e52c <processPacket+0x19c>
   3e528:	24 e0       	ldi	r18, 0x04	; 4
   3e52a:	01 c0       	rjmp	.+2      	; 0x3e52e <processPacket+0x19e>
   3e52c:	22 e0       	ldi	r18, 0x02	; 2
   3e52e:	c3 5f       	subi	r28, 0xF3	; 243
   3e530:	dd 4f       	sbci	r29, 0xFD	; 253
   3e532:	28 83       	st	Y, r18
   3e534:	cd 50       	subi	r28, 0x0D	; 13
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   3e536:	d2 40       	sbci	r29, 0x02	; 2
   3e538:	00 23       	and	r16, r16
   3e53a:	19 f0       	breq	.+6      	; 0x3e542 <processPacket+0x1b2>
   3e53c:	0f 5f       	subi	r16, 0xFF	; 255
   3e53e:	1f 4f       	sbci	r17, 0xFF	; 255
   3e540:	fb cf       	rjmp	.-10     	; 0x3e538 <processPacket+0x1a8>
				else returnCode = ACK;
   3e542:	c1 14       	cp	r12, r1
   3e544:	d1 04       	cpc	r13, r1
   3e546:	e1 04       	cpc	r14, r1
   3e548:	f1 04       	cpc	r15, r1
   3e54a:	19 f4       	brne	.+6      	; 0x3e552 <processPacket+0x1c2>
   3e54c:	ce 01       	movw	r24, r28

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   3e54e:	0d 96       	adiw	r24, 0x0d	; 13
   3e550:	59 d1       	rcall	.+690    	; 0x3e804 <validImage>
   3e552:	de 01       	movw	r26, r28
   3e554:	1d 96       	adiw	r26, 0x0d	; 13
   3e556:	20 e0       	ldi	r18, 0x00	; 0
				DBG_TFTP(
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
   3e558:	30 e0       	ldi	r19, 0x00	; 0
   3e55a:	99 24       	eor	r9, r9
   3e55c:	93 94       	inc	r9
   3e55e:	26 01       	movw	r4, r12
   3e560:	37 01       	movw	r6, r14
					// First sector - validate
					if(!validImage(pageBase)) {
   3e562:	81 e0       	ldi	r24, 0x01	; 1
   3e564:	58 1a       	sub	r5, r24
   3e566:	61 08       	sbc	r6, r1
   3e568:	71 08       	sbc	r7, r1
   3e56a:	f3 e0       	ldi	r31, 0x03	; 3
   3e56c:	8f 2e       	mov	r8, r31
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e56e:	85 e0       	ldi	r24, 0x05	; 5
   3e570:	38 2e       	mov	r3, r24
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3e572:	91 e1       	ldi	r25, 0x11	; 17
   3e574:	29 2e       	mov	r2, r25
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3e576:	20 17       	cp	r18, r16
   3e578:	31 07       	cpc	r19, r17
   3e57a:	08 f0       	brcs	.+2      	; 0x3e57e <processPacket+0x1ee>
   3e57c:	38 c0       	rjmp	.+112    	; 0x3e5ee <processPacket+0x25e>
   3e57e:	c7 01       	movw	r24, r14
   3e580:	b6 01       	movw	r22, r12
   3e582:	62 0f       	add	r22, r18
   3e584:	73 1f       	adc	r23, r19
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3e586:	81 1d       	adc	r24, r1
   3e588:	91 1d       	adc	r25, r1
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3e58a:	f5 01       	movw	r30, r10
   3e58c:	e2 0f       	add	r30, r18
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e58e:	f3 1f       	adc	r31, r19
   3e590:	45 85       	ldd	r20, Z+13	; 0x0d
   3e592:	50 e0       	ldi	r21, 0x00	; 0
   3e594:	54 2f       	mov	r21, r20
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3e596:	44 27       	eor	r20, r20
   3e598:	ec 91       	ld	r30, X
   3e59a:	4e 2b       	or	r20, r30
   3e59c:	0a 01       	movw	r0, r20
   3e59e:	fb 01       	movw	r30, r22
   3e5a0:	80 93 5b 00 	sts	0x005B, r24
   3e5a4:	90 92 57 00 	sts	0x0057, r9
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   3e5a8:	e8 95       	spm
   3e5aa:	11 24       	eor	r1, r1
   3e5ac:	2e 5f       	subi	r18, 0xFE	; 254
   3e5ae:	3f 4f       	sbci	r19, 0xFF	; 255
   3e5b0:	21 11       	cpse	r18, r1
   3e5b2:	1b c0       	rjmp	.+54     	; 0x3e5ea <processPacket+0x25a>
					boot_page_fill(writeAddr + offset, writeValue);
   3e5b4:	b3 01       	movw	r22, r6
   3e5b6:	a2 01       	movw	r20, r4
   3e5b8:	42 0f       	add	r20, r18
   3e5ba:	53 1f       	adc	r21, r19
   3e5bc:	61 1d       	adc	r22, r1
   3e5be:	71 1d       	adc	r23, r1
   3e5c0:	fa 01       	movw	r30, r20
   3e5c2:	60 93 5b 00 	sts	0x005B, r22
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
   3e5c6:	80 92 57 00 	sts	0x0057, r8

					if(offset % SPM_PAGESIZE == 0) {
   3e5ca:	e8 95       	spm
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3e5cc:	07 b6       	in	r0, 0x37	; 55
   3e5ce:	00 fc       	sbrc	r0, 0
   3e5d0:	fd cf       	rjmp	.-6      	; 0x3e5cc <processPacket+0x23c>
   3e5d2:	fa 01       	movw	r30, r20
   3e5d4:	60 93 5b 00 	sts	0x005B, r22
   3e5d8:	30 92 57 00 	sts	0x0057, r3
   3e5dc:	e8 95       	spm
   3e5de:	07 b6       	in	r0, 0x37	; 55
   3e5e0:	00 fc       	sbrc	r0, 0
   3e5e2:	fd cf       	rjmp	.-6      	; 0x3e5de <processPacket+0x24e>
						boot_spm_busy_wait();
   3e5e4:	20 92 57 00 	sts	0x0057, r2
   3e5e8:	e8 95       	spm
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3e5ea:	12 96       	adiw	r26, 0x02	; 2
   3e5ec:	c4 cf       	rjmp	.-120    	; 0x3e576 <processPacket+0x1e6>
   3e5ee:	c3 5f       	subi	r28, 0xF3	; 243
   3e5f0:	dd 4f       	sbci	r29, 0xFD	; 253
   3e5f2:	28 81       	ld	r18, Y
   3e5f4:	cd 50       	subi	r28, 0x0D	; 13
						boot_spm_busy_wait();
   3e5f6:	d2 40       	sbci	r29, 0x02	; 2
   3e5f8:	24 30       	cpi	r18, 0x04	; 4
   3e5fa:	21 f4       	brne	.+8      	; 0x3e604 <processPacket+0x274>
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3e5fc:	6e ee       	ldi	r22, 0xEE	; 238
   3e5fe:	82 e0       	ldi	r24, 0x02	; 2
   3e600:	90 e0       	ldi	r25, 0x00	; 0
   3e602:	3b d4       	rcall	.+2166   	; 0x3ee7a <__eewr_byte_m2560>
   3e604:	c3 5f       	subi	r28, 0xF3	; 243
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   3e606:	dd 4f       	sbci	r29, 0xFD	; 253
   3e608:	88 81       	ld	r24, Y
   3e60a:	cd 50       	subi	r28, 0x0D	; 13
   3e60c:	d2 40       	sbci	r29, 0x02	; 2
   3e60e:	c3 5f       	subi	r28, 0xF3	; 243
   3e610:	dd 4f       	sbci	r29, 0xFD	; 253
   3e612:	de bf       	out	0x3e, r29	; 62
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3e614:	cd bf       	out	0x3d, r28	; 61
   3e616:	df 91       	pop	r29
   3e618:	cf 91       	pop	r28
   3e61a:	1f 91       	pop	r17
   3e61c:	0f 91       	pop	r16
			break;

	}

	return(returnCode);
}
   3e61e:	ff 90       	pop	r15
   3e620:	ef 90       	pop	r14
   3e622:	df 90       	pop	r13
   3e624:	cf 90       	pop	r12
   3e626:	bf 90       	pop	r11
   3e628:	af 90       	pop	r10
   3e62a:	9f 90       	pop	r9
   3e62c:	8f 90       	pop	r8
   3e62e:	7f 90       	pop	r7
   3e630:	6f 90       	pop	r6
   3e632:	5f 90       	pop	r5
   3e634:	4f 90       	pop	r4
   3e636:	3f 90       	pop	r3
   3e638:	2f 90       	pop	r2
   3e63a:	08 95       	ret

0003e63c <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
   3e63c:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
   3e63e:	85 e4       	ldi	r24, 0x45	; 69
   3e640:	90 e0       	ldi	r25, 0x00	; 0
   3e642:	82 de       	rcall	.-764    	; 0x3e348 <sockInit>
   3e644:	87 e1       	ldi	r24, 0x17	; 23

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   3e646:	90 e0       	ldi	r25, 0x00	; 0
   3e648:	10 d4       	rcall	.+2080   	; 0x3ee6a <__eerd_byte_m2560>
   3e64a:	8b 3b       	cpi	r24, 0xBB	; 187
   3e64c:	91 f4       	brne	.+36     	; 0x3e672 <tftpInit+0x36>
   3e64e:	89 e1       	ldi	r24, 0x19	; 25
   3e650:	90 e0       	ldi	r25, 0x00	; 0
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   3e652:	0b d4       	rcall	.+2070   	; 0x3ee6a <__eerd_byte_m2560>
   3e654:	c8 2f       	mov	r28, r24
   3e656:	88 e1       	ldi	r24, 0x18	; 24
   3e658:	90 e0       	ldi	r25, 0x00	; 0
   3e65a:	07 d4       	rcall	.+2062   	; 0x3ee6a <__eerd_byte_m2560>
   3e65c:	2c 2f       	mov	r18, r28
   3e65e:	30 e0       	ldi	r19, 0x00	; 0
   3e660:	32 2f       	mov	r19, r18
   3e662:	22 27       	eor	r18, r18
   3e664:	28 0f       	add	r18, r24
   3e666:	31 1d       	adc	r19, r1
   3e668:	30 93 29 02 	sts	0x0229, r19
   3e66c:	20 93 28 02 	sts	0x0228, r18
   3e670:	06 c0       	rjmp	.+12     	; 0x3e67e <tftpInit+0x42>
   3e672:	89 e7       	ldi	r24, 0x79	; 121
   3e674:	97 eb       	ldi	r25, 0xB7	; 183
   3e676:	90 93 29 02 	sts	0x0229, r25
	else
		tftpTransferPort = TFTP_DATA_PORT;
   3e67a:	80 93 28 02 	sts	0x0228, r24
   3e67e:	cf 91       	pop	r28
   3e680:	08 95       	ret

0003e682 <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   3e682:	af 92       	push	r10
   3e684:	bf 92       	push	r11
   3e686:	cf 92       	push	r12
   3e688:	df 92       	push	r13
   3e68a:	ef 92       	push	r14
   3e68c:	ff 92       	push	r15
   3e68e:	0f 93       	push	r16
   3e690:	1f 93       	push	r17
   3e692:	cf 93       	push	r28
   3e694:	df 93       	push	r29
   3e696:	cd b7       	in	r28, 0x3d	; 61
   3e698:	de b7       	in	r29, 0x3e	; 62
   3e69a:	c4 56       	subi	r28, 0x64	; 100
   3e69c:	d1 09       	sbc	r29, r1
   3e69e:	de bf       	out	0x3e, r29	; 62
   3e6a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);
   3e6a2:	86 e2       	ldi	r24, 0x26	; 38
   3e6a4:	97 e0       	ldi	r25, 0x07	; 7
   3e6a6:	f0 dd       	rcall	.-1056   	; 0x3e288 <netReadWord>
   3e6a8:	89 2b       	or	r24, r25
// 			_delay_ms(400);
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   3e6aa:	11 f4       	brne	.+4      	; 0x3e6b0 <tftpPoll+0x2e>
   3e6ac:	81 e0       	ldi	r24, 0x01	; 1
		// Complete
		return(0);
	}

	// Tftp continues
	return(1);
   3e6ae:	9b c0       	rjmp	.+310    	; 0x3e7e6 <tftpPoll+0x164>
   3e6b0:	81 e0       	ldi	r24, 0x01	; 1
// 			packetSize = netReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
   3e6b2:	80 93 2b 02 	sts	0x022B, r24
   3e6b6:	82 e0       	ldi	r24, 0x02	; 2

		while((netReadReg(REG_S3_IR) & IR_RECV)) {
   3e6b8:	97 e0       	ldi	r25, 0x07	; 7
   3e6ba:	cc dd       	rcall	.-1128   	; 0x3e254 <netReadReg>
   3e6bc:	82 ff       	sbrs	r24, 2
   3e6be:	0e c0       	rjmp	.+28     	; 0x3e6dc <tftpPoll+0x5a>
   3e6c0:	64 e0       	ldi	r22, 0x04	; 4
   3e6c2:	82 e0       	ldi	r24, 0x02	; 2
			netWriteReg(REG_S3_IR, IR_RECV);
   3e6c4:	97 e0       	ldi	r25, 0x07	; 7
   3e6c6:	ad dd       	rcall	.-1190   	; 0x3e222 <netWriteReg>
   3e6c8:	2f ef       	ldi	r18, 0xFF	; 255
   3e6ca:	37 e8       	ldi	r19, 0x87	; 135
   3e6cc:	83 e1       	ldi	r24, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3e6ce:	21 50       	subi	r18, 0x01	; 1
   3e6d0:	30 40       	sbci	r19, 0x00	; 0
   3e6d2:	80 40       	sbci	r24, 0x00	; 0
   3e6d4:	e1 f7       	brne	.-8      	; 0x3e6ce <tftpPoll+0x4c>
   3e6d6:	00 c0       	rjmp	.+0      	; 0x3e6d8 <tftpPoll+0x56>
   3e6d8:	00 00       	nop
   3e6da:	ed cf       	rjmp	.-38     	; 0x3e6b6 <tftpPoll+0x34>
   3e6dc:	59 de       	rcall	.-846    	; 0x3e390 <processPacket>
   3e6de:	f8 2e       	mov	r15, r24
   3e6e0:	84 e2       	ldi	r24, 0x24	; 36
		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = netReadWord(REG_S3_RX_RSR0);
		response = processPacket(packetSize);
#else
		response = processPacket();
   3e6e2:	97 e0       	ldi	r25, 0x07	; 7
   3e6e4:	d1 dd       	rcall	.-1118   	; 0x3e288 <netReadWord>
   3e6e6:	8c 01       	movw	r16, r24
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = netReadWord(REG_S3_TX_WR0) + S3_TX_START;
   3e6e8:	18 5a       	subi	r17, 0xA8	; 168
   3e6ea:	92 e0       	ldi	r25, 0x02	; 2
   3e6ec:	f9 16       	cp	r15, r25
   3e6ee:	c1 f1       	breq	.+112    	; 0x3e760 <tftpPoll+0xde>
   3e6f0:	9f 15       	cp	r25, r15
   3e6f2:	20 f0       	brcs	.+8      	; 0x3e6fc <tftpPoll+0x7a>

	switch(response) {
   3e6f4:	e1 e0       	ldi	r30, 0x01	; 1
   3e6f6:	fe 16       	cp	r15, r30
   3e6f8:	c9 f0       	breq	.+50     	; 0x3e72c <tftpPoll+0xaa>
   3e6fa:	06 c0       	rjmp	.+12     	; 0x3e708 <tftpPoll+0x86>
   3e6fc:	f3 e0       	ldi	r31, 0x03	; 3
   3e6fe:	ff 16       	cp	r15, r31
   3e700:	11 f1       	breq	.+68     	; 0x3e746 <tftpPoll+0xc4>
   3e702:	24 e0       	ldi	r18, 0x04	; 4
   3e704:	f2 16       	cp	r15, r18
   3e706:	d9 f1       	breq	.+118    	; 0x3e77e <tftpPoll+0xfc>
   3e708:	4c ef       	ldi	r20, 0xFC	; 252
   3e70a:	50 ee       	ldi	r21, 0xE0	; 224
   3e70c:	60 e0       	ldi	r22, 0x00	; 0
   3e70e:	70 e0       	ldi	r23, 0x00	; 0
   3e710:	6d 5f       	subi	r22, 0xFD	; 253

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
   3e712:	7f 4f       	sbci	r23, 0xFF	; 255
   3e714:	2a e0       	ldi	r18, 0x0A	; 10
   3e716:	30 e0       	ldi	r19, 0x00	; 0
   3e718:	ce 01       	movw	r24, r28
   3e71a:	01 96       	adiw	r24, 0x01	; 1
   3e71c:	9d d3       	rcall	.+1850   	; 0x3ee58 <memcpy_PF>
   3e71e:	8a e0       	ldi	r24, 0x0A	; 10
   3e720:	fe 01       	movw	r30, r28
   3e722:	31 96       	adiw	r30, 0x01	; 1
   3e724:	6f 01       	movw	r12, r30
   3e726:	e8 2e       	mov	r14, r24
   3e728:	ee 0e       	add	r14, r30
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   3e72a:	45 c0       	rjmp	.+138    	; 0x3e7b6 <tftpPoll+0x134>
	txPtr = txBuffer;

	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3e72c:	41 e1       	ldi	r20, 0x11	; 17
   3e72e:	51 ee       	ldi	r21, 0xE1	; 225
   3e730:	60 e0       	ldi	r22, 0x00	; 0
   3e732:	70 e0       	ldi	r23, 0x00	; 0
   3e734:	6d 5f       	subi	r22, 0xFD	; 253
   3e736:	7f 4f       	sbci	r23, 0xFF	; 255

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
   3e738:	2c e0       	ldi	r18, 0x0C	; 12
   3e73a:	30 e0       	ldi	r19, 0x00	; 0
   3e73c:	ce 01       	movw	r24, r28
   3e73e:	01 96       	adiw	r24, 0x01	; 1
   3e740:	8b d3       	rcall	.+1814   	; 0x3ee58 <memcpy_PF>
   3e742:	8c e0       	ldi	r24, 0x0C	; 12
   3e744:	ed cf       	rjmp	.-38     	; 0x3e720 <tftpPoll+0x9e>
   3e746:	47 e0       	ldi	r20, 0x07	; 7
   3e748:	51 ee       	ldi	r21, 0xE1	; 225
   3e74a:	60 e0       	ldi	r22, 0x00	; 0
   3e74c:	70 e0       	ldi	r23, 0x00	; 0
   3e74e:	6d 5f       	subi	r22, 0xFD	; 253
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   3e750:	7f 4f       	sbci	r23, 0xFF	; 255
   3e752:	29 e0       	ldi	r18, 0x09	; 9

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
   3e754:	30 e0       	ldi	r19, 0x00	; 0
   3e756:	ce 01       	movw	r24, r28
   3e758:	01 96       	adiw	r24, 0x01	; 1
   3e75a:	7e d3       	rcall	.+1788   	; 0x3ee58 <memcpy_PF>
   3e75c:	89 e0       	ldi	r24, 0x09	; 9
   3e75e:	e0 cf       	rjmp	.-64     	; 0x3e720 <tftpPoll+0x9e>
   3e760:	80 91 22 02 	lds	r24, 0x0222
   3e764:	90 91 23 02 	lds	r25, 0x0223
   3e768:	20 91 20 02 	lds	r18, 0x0220
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   3e76c:	30 91 21 02 	lds	r19, 0x0221
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   3e770:	28 17       	cp	r18, r24
   3e772:	39 07       	cpc	r19, r25
   3e774:	20 f4       	brcc	.+8      	; 0x3e77e <tftpPoll+0xfc>
   3e776:	90 93 21 02 	sts	0x0221, r25
   3e77a:	80 93 20 02 	sts	0x0220, r24
   3e77e:	19 82       	std	Y+1, r1	; 0x01
   3e780:	84 e0       	ldi	r24, 0x04	; 4
   3e782:	8a 83       	std	Y+2, r24	; 0x02
   3e784:	80 91 22 02 	lds	r24, 0x0222
   3e788:	90 91 23 02 	lds	r25, 0x0223
   3e78c:	9b 83       	std	Y+3, r25	; 0x03
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   3e78e:	8c 83       	std	Y+4, r24	; 0x04
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   3e790:	84 e0       	ldi	r24, 0x04	; 4
   3e792:	c6 cf       	rjmp	.-116    	; 0x3e720 <tftpPoll+0x9e>
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   3e794:	f6 01       	movw	r30, r12
   3e796:	61 91       	ld	r22, Z+
   3e798:	6f 01       	movw	r12, r30
   3e79a:	58 01       	movw	r10, r16
   3e79c:	ff ef       	ldi	r31, 0xFF	; 255
			*txPtr = lastPacket & 0xff;
   3e79e:	af 1a       	sub	r10, r31
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   3e7a0:	bf 0a       	sbc	r11, r31
   3e7a2:	c8 01       	movw	r24, r16
	}

	txPtr = txBuffer;

	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
   3e7a4:	3e dd       	rcall	.-1412   	; 0x3e222 <netWriteReg>
   3e7a6:	a1 14       	cp	r10, r1
   3e7a8:	20 e6       	ldi	r18, 0x60	; 96
   3e7aa:	b2 06       	cpc	r11, r18
   3e7ac:	19 f4       	brne	.+6      	; 0x3e7b4 <tftpPoll+0x132>
   3e7ae:	a1 2c       	mov	r10, r1
   3e7b0:	e8 e5       	ldi	r30, 0x58	; 88
   3e7b2:	be 2e       	mov	r11, r30
   3e7b4:	85 01       	movw	r16, r10
   3e7b6:	ec 10       	cpse	r14, r12

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3e7b8:	ed cf       	rjmp	.-38     	; 0x3e794 <tftpPoll+0x112>
   3e7ba:	b8 01       	movw	r22, r16
   3e7bc:	78 55       	subi	r23, 0x58	; 88
   3e7be:	84 e2       	ldi	r24, 0x24	; 36
   3e7c0:	97 e0       	ldi	r25, 0x07	; 7
   3e7c2:	76 dd       	rcall	.-1300   	; 0x3e2b0 <netWriteWord>
   3e7c4:	60 e2       	ldi	r22, 0x20	; 32
   3e7c6:	81 e0       	ldi	r24, 0x01	; 1
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   3e7c8:	97 e0       	ldi	r25, 0x07	; 7
   3e7ca:	2b dd       	rcall	.-1450   	; 0x3e222 <netWriteReg>
		netWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	netWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
   3e7cc:	81 e0       	ldi	r24, 0x01	; 1
   3e7ce:	97 e0       	ldi	r25, 0x07	; 7
   3e7d0:	41 dd       	rcall	.-1406   	; 0x3e254 <netReadReg>
   3e7d2:	81 11       	cpse	r24, r1
   3e7d4:	fb cf       	rjmp	.-10     	; 0x3e7cc <tftpPoll+0x14a>
   3e7d6:	34 e0       	ldi	r19, 0x04	; 4
	netWriteReg(REG_S3_CR, CR_SEND);
   3e7d8:	f3 12       	cpse	r15, r19
   3e7da:	68 cf       	rjmp	.-304    	; 0x3e6ac <tftpPoll+0x2a>
   3e7dc:	60 e1       	ldi	r22, 0x10	; 16
   3e7de:	81 e0       	ldi	r24, 0x01	; 1
   3e7e0:	97 e0       	ldi	r25, 0x07	; 7

	while(netReadReg(REG_S3_CR));
   3e7e2:	1f dd       	rcall	.-1474   	; 0x3e222 <netWriteReg>
   3e7e4:	80 e0       	ldi	r24, 0x00	; 0
   3e7e6:	cc 59       	subi	r28, 0x9C	; 156
   3e7e8:	df 4f       	sbci	r29, 0xFF	; 255
   3e7ea:	de bf       	out	0x3e, r29	; 62
   3e7ec:	cd bf       	out	0x3d, r28	; 61
#endif
		// Send the response
		sendResponse(response);
	}

	if(response == FINAL_ACK) {
   3e7ee:	df 91       	pop	r29
   3e7f0:	cf 91       	pop	r28
   3e7f2:	1f 91       	pop	r17
		netWriteReg(REG_S3_CR, CR_CLOSE);
   3e7f4:	0f 91       	pop	r16
   3e7f6:	ff 90       	pop	r15
   3e7f8:	ef 90       	pop	r14
   3e7fa:	df 90       	pop	r13
   3e7fc:	cf 90       	pop	r12
		// Complete
		return(0);
   3e7fe:	bf 90       	pop	r11
	}

	// Tftp continues
	return(1);
}
   3e800:	af 90       	pop	r10
   3e802:	08 95       	ret

0003e804 <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
   3e804:	20 e0       	ldi	r18, 0x00	; 0
   3e806:	30 e0       	ldi	r19, 0x00	; 0
   3e808:	fc 01       	movw	r30, r24
   3e80a:	e2 0f       	add	r30, r18
   3e80c:	f3 1f       	adc	r31, r19
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   3e80e:	40 81       	ld	r20, Z
   3e810:	4c 30       	cpi	r20, 0x0C	; 12
   3e812:	51 f4       	brne	.+20     	; 0x3e828 <validImage+0x24>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
   3e814:	41 81       	ldd	r20, Z+1	; 0x01
   3e816:	44 39       	cpi	r20, 0x94	; 148
   3e818:	39 f4       	brne	.+14     	; 0x3e828 <validImage+0x24>
   3e81a:	2c 5f       	subi	r18, 0xFC	; 252
   3e81c:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   3e81e:	24 33       	cpi	r18, 0x34	; 52
   3e820:	31 05       	cpc	r19, r1
   3e822:	91 f7       	brne	.-28     	; 0x3e808 <validImage+0x4>
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)

	return(1);
   3e824:	81 e0       	ldi	r24, 0x01	; 1
}
   3e826:	08 95       	ret
				tracenum(i);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i]);
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
   3e828:	80 e0       	ldi	r24, 0x00	; 0
   3e82a:	08 95       	ret

0003e82c <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   3e82c:	82 e0       	ldi	r24, 0x02	; 2
   3e82e:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   3e832:	88 e1       	ldi	r24, 0x18	; 24
   3e834:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   3e838:	86 e0       	ldi	r24, 0x06	; 6
   3e83a:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   3e83e:	80 e1       	ldi	r24, 0x10	; 16
   3e840:	80 93 c4 00 	sts	0x00C4, r24
   3e844:	08 95       	ret

0003e846 <putch>:
}


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   3e846:	90 91 c0 00 	lds	r25, 0x00C0
   3e84a:	95 ff       	sbrs	r25, 5
   3e84c:	fc cf       	rjmp	.-8      	; 0x3e846 <putch>
	UART_DATA_REG = c;
   3e84e:	80 93 c6 00 	sts	0x00C6, r24
   3e852:	08 95       	ret

0003e854 <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
   3e854:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   3e856:	8a 30       	cpi	r24, 0x0A	; 10
   3e858:	08 f0       	brcs	.+2      	; 0x3e85c <puthex+0x8>
   3e85a:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
   3e85c:	80 5d       	subi	r24, 0xD0	; 208
   3e85e:	f3 cf       	rjmp	.-26     	; 0x3e846 <putch>

0003e860 <getch>:

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   3e860:	80 91 c0 00 	lds	r24, 0x00C0
   3e864:	87 ff       	sbrs	r24, 7
   3e866:	fc cf       	rjmp	.-8      	; 0x3e860 <getch>
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   3e868:	80 91 c0 00 	lds	r24, 0x00C0
   3e86c:	84 fd       	sbrc	r24, 4
   3e86e:	01 c0       	rjmp	.+2      	; 0x3e872 <getch+0x12>
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		wdt_reset();
   3e870:	a8 95       	wdr
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
   3e872:	80 91 c6 00 	lds	r24, 0x00C6
}
   3e876:	08 95       	ret

0003e878 <serialPoll>:


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   3e878:	80 91 c0 00 	lds	r24, 0x00C0
   3e87c:	87 ff       	sbrs	r24, 7
   3e87e:	05 c0       	rjmp	.+10     	; 0x3e88a <serialPoll+0x12>
		resetTick();
   3e880:	27 d0       	rcall	.+78     	; 0x3e8d0 <resetTick>
   3e882:	81 e0       	ldi	r24, 0x01	; 1
		serialFlashing = TRUE;
   3e884:	80 93 2a 02 	sts	0x022A, r24
   3e888:	3f c0       	rjmp	.+126    	; 0x3e908 <processStk500boot>
#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		return(processOptiboot());
#elif defined(__AVR_ATmega2560__)
		return(processStk500boot());
   3e88a:	81 e0       	ldi	r24, 0x01	; 1
   3e88c:	08 95       	ret

0003e88e <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   3e88e:	80 91 84 00 	lds	r24, 0x0084
   3e892:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   3e896:	92 ff       	sbrs	r25, 2
   3e898:	04 c0       	rjmp	.+8      	; 0x3e8a2 <updateLed+0x14>
   3e89a:	25 b1       	in	r18, 0x05	; 5
   3e89c:	20 58       	subi	r18, 0x80	; 128
   3e89e:	25 b9       	out	0x05, r18	; 5
   3e8a0:	01 c0       	rjmp	.+2      	; 0x3e8a4 <updateLed+0x16>
	else LED_PORT &= ~_BV(LED); // Led pin low
   3e8a2:	2f 98       	cbi	0x05, 7	; 5

	if(next_timer_1 < last_timer_1) {
   3e8a4:	20 91 26 02 	lds	r18, 0x0226
   3e8a8:	30 91 27 02 	lds	r19, 0x0227
   3e8ac:	82 17       	cp	r24, r18
   3e8ae:	93 07       	cpc	r25, r19
   3e8b0:	50 f4       	brcc	.+20     	; 0x3e8c6 <updateLed+0x38>
		tick++;
   3e8b2:	20 91 24 02 	lds	r18, 0x0224
   3e8b6:	30 91 25 02 	lds	r19, 0x0225
   3e8ba:	2f 5f       	subi	r18, 0xFF	; 255
   3e8bc:	3f 4f       	sbci	r19, 0xFF	; 255
   3e8be:	30 93 25 02 	sts	0x0225, r19
   3e8c2:	20 93 24 02 	sts	0x0224, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
   3e8c6:	90 93 27 02 	sts	0x0227, r25
   3e8ca:	80 93 26 02 	sts	0x0226, r24
   3e8ce:	08 95       	ret

0003e8d0 <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
   3e8d0:	10 92 85 00 	sts	0x0085, r1
   3e8d4:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   3e8d8:	10 92 25 02 	sts	0x0225, r1
   3e8dc:	10 92 24 02 	sts	0x0224, r1
   3e8e0:	08 95       	ret

0003e8e2 <timedOut>:

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   3e8e2:	80 e0       	ldi	r24, 0x00	; 0
   3e8e4:	90 e0       	ldi	r25, 0x00	; 0
   3e8e6:	dc 01       	movw	r26, r24
   3e8e8:	ab bf       	out	0x3b, r26	; 59
   3e8ea:	fc 01       	movw	r30, r24
   3e8ec:	87 91       	elpm	r24, Z+
   3e8ee:	96 91       	elpm	r25, Z
   3e8f0:	01 96       	adiw	r24, 0x01	; 1
   3e8f2:	41 f0       	breq	.+16     	; 0x3e904 <timedOut+0x22>
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
   3e8f4:	81 e0       	ldi	r24, 0x01	; 1
   3e8f6:	20 91 24 02 	lds	r18, 0x0224
   3e8fa:	30 91 25 02 	lds	r19, 0x0225
   3e8fe:	25 30       	cpi	r18, 0x05	; 5
   3e900:	31 05       	cpc	r19, r1
   3e902:	08 f4       	brcc	.+2      	; 0x3e906 <timedOut+0x24>

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   3e904:	80 e0       	ldi	r24, 0x00	; 0
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
   3e906:	08 95       	ret

0003e908 <processStk500boot>:
// 	return UART_DATA_REG;
// }


uint8_t processStk500boot(void)
{
   3e908:	2f 92       	push	r2
   3e90a:	3f 92       	push	r3
   3e90c:	4f 92       	push	r4
   3e90e:	5f 92       	push	r5
   3e910:	6f 92       	push	r6
   3e912:	7f 92       	push	r7
   3e914:	8f 92       	push	r8
   3e916:	9f 92       	push	r9
   3e918:	af 92       	push	r10
   3e91a:	bf 92       	push	r11
   3e91c:	cf 92       	push	r12
   3e91e:	df 92       	push	r13
   3e920:	ef 92       	push	r14
   3e922:	ff 92       	push	r15
   3e924:	0f 93       	push	r16
   3e926:	1f 93       	push	r17
   3e928:	cf 93       	push	r28
   3e92a:	df 93       	push	r29
   3e92c:	cd b7       	in	r28, 0x3d	; 61
   3e92e:	de b7       	in	r29, 0x3e	; 62
   3e930:	c0 52       	subi	r28, 0x20	; 32
   3e932:	d1 40       	sbci	r29, 0x01	; 1
   3e934:	de bf       	out	0x3e, r29	; 62
   3e936:	cd bf       	out	0x3d, r28	; 61
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
	unsigned char	checksum		=	0;
	unsigned char	seqNum			=	0;
   3e938:	c2 5e       	subi	r28, 0xE2	; 226
   3e93a:	de 4f       	sbci	r29, 0xFE	; 254
   3e93c:	18 82       	st	Y, r1
   3e93e:	ce 51       	subi	r28, 0x1E	; 30
   3e940:	d1 40       	sbci	r29, 0x01	; 1
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
	unsigned char	checksum		=	0;
   3e942:	81 2c       	mov	r8, r1
uint8_t processStk500boot(void)
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
   3e944:	21 2c       	mov	r2, r1
   3e946:	31 2c       	mov	r3, r1


uint8_t processStk500boot(void)
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
   3e948:	41 2c       	mov	r4, r1
   3e94a:	51 2c       	mov	r5, r1
   3e94c:	32 01       	movw	r6, r4
// }


uint8_t processStk500boot(void)
{
	address_t		address			=	0;
   3e94e:	c1 2c       	mov	r12, r1
   3e950:	d1 2c       	mov	r13, r1
   3e952:	76 01       	movw	r14, r12
// 	return UART_DATA_REG;
// }


uint8_t processStk500boot(void)
{
   3e954:	00 e0       	ldi	r16, 0x00	; 0
   3e956:	10 e0       	ldi	r17, 0x00	; 0
				case ST_GET_CHECK:

					if(c == checksum) {
						msgParseState	=	ST_PROCESS;
					} else {
						msgParseState	=	ST_START;
   3e958:	40 e0       	ldi	r20, 0x00	; 0
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
// 			if(boot_state == 1) {
// 				boot_state	=	0;
 				c			=	getch();
   3e95a:	c1 5e       	subi	r28, 0xE1	; 225
   3e95c:	de 4f       	sbci	r29, 0xFE	; 254
   3e95e:	48 83       	st	Y, r20
   3e960:	cf 51       	subi	r28, 0x1F	; 31
   3e962:	d1 40       	sbci	r29, 0x01	; 1
   3e964:	7d df       	rcall	.-262    	; 0x3e860 <getch>
   3e966:	c1 5e       	subi	r28, 0xE1	; 225
// 			} else {
// 				//	c	=	recchar();
// 				c = recchar_timeout();
// 			}

			switch(msgParseState) {
   3e968:	de 4f       	sbci	r29, 0xFE	; 254
   3e96a:	48 81       	ld	r20, Y
   3e96c:	cf 51       	subi	r28, 0x1F	; 31
   3e96e:	d1 40       	sbci	r29, 0x01	; 1
   3e970:	43 30       	cpi	r20, 0x03	; 3
   3e972:	01 f1       	breq	.+64     	; 0x3e9b4 <processStk500boot+0xac>
   3e974:	20 f4       	brcc	.+8      	; 0x3e97e <processStk500boot+0x76>
   3e976:	41 30       	cpi	r20, 0x01	; 1
   3e978:	71 f0       	breq	.+28     	; 0x3e996 <processStk500boot+0x8e>
   3e97a:	38 f0       	brcs	.+14     	; 0x3e98a <processStk500boot+0x82>
   3e97c:	14 c0       	rjmp	.+40     	; 0x3e9a6 <processStk500boot+0x9e>
   3e97e:	45 30       	cpi	r20, 0x05	; 5
   3e980:	21 f1       	breq	.+72     	; 0x3e9ca <processStk500boot+0xc2>
   3e982:	e0 f0       	brcs	.+56     	; 0x3e9bc <processStk500boot+0xb4>
   3e984:	46 30       	cpi	r20, 0x06	; 6
   3e986:	91 f1       	breq	.+100    	; 0x3e9ec <processStk500boot+0xe4>
   3e988:	7c c0       	rjmp	.+248    	; 0x3ea82 <processStk500boot+0x17a>
   3e98a:	8b 31       	cpi	r24, 0x1B	; 27
				case ST_START:

					if(c == MESSAGE_START) {
   3e98c:	31 f7       	brne	.-52     	; 0x3e95a <processStk500boot+0x52>
   3e98e:	8b e1       	ldi	r24, 0x1B	; 27
						msgParseState	=	ST_GET_SEQ_NUM;
						checksum		=	MESSAGE_START ^ 0;
   3e990:	88 2e       	mov	r8, r24
   3e992:	41 e0       	ldi	r20, 0x01	; 1

			switch(msgParseState) {
				case ST_START:

					if(c == MESSAGE_START) {
						msgParseState	=	ST_GET_SEQ_NUM;
   3e994:	e2 cf       	rjmp	.-60     	; 0x3e95a <processStk500boot+0x52>
   3e996:	88 26       	eor	r8, r24

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum			=	c;
					msgParseState	=	ST_MSG_SIZE_1;
					checksum		^=	c;
   3e998:	c2 5e       	subi	r28, 0xE2	; 226
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
// 			if(boot_state == 1) {
// 				boot_state	=	0;
 				c			=	getch();
   3e99a:	de 4f       	sbci	r29, 0xFE	; 254
   3e99c:	88 83       	st	Y, r24
   3e99e:	ce 51       	subi	r28, 0x1E	; 30
   3e9a0:	d1 40       	sbci	r29, 0x01	; 1
   3e9a2:	42 e0       	ldi	r20, 0x02	; 2
					break;

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum			=	c;
					msgParseState	=	ST_MSG_SIZE_1;
   3e9a4:	da cf       	rjmp	.-76     	; 0x3e95a <processStk500boot+0x52>
					} else {
						msgParseState	=	ST_START;
					}

#endif
					break;
   3e9a6:	08 2f       	mov	r16, r24

				case ST_MSG_SIZE_1:
					msgLength		=	c << 8;
   3e9a8:	10 e0       	ldi	r17, 0x00	; 0
   3e9aa:	10 2f       	mov	r17, r16
   3e9ac:	00 27       	eor	r16, r16
   3e9ae:	88 26       	eor	r8, r24
					msgParseState	=	ST_MSG_SIZE_2;
					checksum		^=	c;
   3e9b0:	43 e0       	ldi	r20, 0x03	; 3
#endif
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c << 8;
					msgParseState	=	ST_MSG_SIZE_2;
   3e9b2:	d3 cf       	rjmp	.-90     	; 0x3e95a <processStk500boot+0x52>
					checksum		^=	c;
					break;
   3e9b4:	08 2b       	or	r16, r24

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
   3e9b6:	88 26       	eor	r8, r24
					msgParseState	=	ST_GET_TOKEN;
					checksum		^=	c;
   3e9b8:	44 e0       	ldi	r20, 0x04	; 4
					checksum		^=	c;
					break;

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
					msgParseState	=	ST_GET_TOKEN;
   3e9ba:	cf cf       	rjmp	.-98     	; 0x3e95a <processStk500boot+0x52>
					checksum		^=	c;
					break;
   3e9bc:	8e 30       	cpi	r24, 0x0E	; 14

				case ST_GET_TOKEN:

					if(c == TOKEN) {
   3e9be:	61 f6       	brne	.-104    	; 0x3e958 <processStk500boot+0x50>
   3e9c0:	88 26       	eor	r8, r24
						msgParseState	=	ST_GET_DATA;
						checksum		^=	c;
   3e9c2:	21 2c       	mov	r2, r1
						ii				=	0;
   3e9c4:	31 2c       	mov	r3, r1
   3e9c6:	45 e0       	ldi	r20, 0x05	; 5
					break;

				case ST_GET_TOKEN:

					if(c == TOKEN) {
						msgParseState	=	ST_GET_DATA;
   3e9c8:	c8 cf       	rjmp	.-112    	; 0x3e95a <processStk500boot+0x52>
   3e9ca:	91 01       	movw	r18, r2
					}

					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
   3e9cc:	2f 5f       	subi	r18, 0xFF	; 255
   3e9ce:	3f 4f       	sbci	r19, 0xFF	; 255
   3e9d0:	e1 e0       	ldi	r30, 0x01	; 1
   3e9d2:	f0 e0       	ldi	r31, 0x00	; 0
   3e9d4:	ec 0f       	add	r30, r28
   3e9d6:	fd 1f       	adc	r31, r29
   3e9d8:	e2 0d       	add	r30, r2
   3e9da:	f3 1d       	adc	r31, r3
   3e9dc:	80 83       	st	Z, r24
   3e9de:	88 26       	eor	r8, r24
					checksum		^=	c;
   3e9e0:	20 17       	cp	r18, r16

					if(ii == msgLength) {
   3e9e2:	31 07       	cpc	r19, r17
   3e9e4:	09 f4       	brne	.+2      	; 0x3e9e8 <processStk500boot+0xe0>
   3e9e6:	35 c2       	rjmp	.+1130   	; 0x3ee52 <processStk500boot+0x54a>
   3e9e8:	19 01       	movw	r2, r18
   3e9ea:	b7 cf       	rjmp	.-146    	; 0x3e95a <processStk500boot+0x52>
   3e9ec:	88 11       	cpse	r24, r8

					break;

				case ST_GET_CHECK:

					if(c == checksum) {
   3e9ee:	b4 cf       	rjmp	.-152    	; 0x3e958 <processStk500boot+0x50>
   3e9f0:	49 81       	ldd	r20, Y+1	; 0x01

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3e9f2:	43 31       	cpi	r20, 0x13	; 19
   3e9f4:	09 f4       	brne	.+2      	; 0x3e9f8 <processStk500boot+0xf0>
   3e9f6:	e2 c0       	rjmp	.+452    	; 0x3ebbc <processStk500boot+0x2b4>
   3e9f8:	60 f5       	brcc	.+88     	; 0x3ea52 <processStk500boot+0x14a>
   3e9fa:	46 30       	cpi	r20, 0x06	; 6
   3e9fc:	09 f4       	brne	.+2      	; 0x3ea00 <processStk500boot+0xf8>
   3e9fe:	cb c0       	rjmp	.+406    	; 0x3eb96 <processStk500boot+0x28e>
   3ea00:	00 f5       	brcc	.+64     	; 0x3ea42 <processStk500boot+0x13a>
   3ea02:	42 30       	cpi	r20, 0x02	; 2
   3ea04:	09 f4       	brne	.+2      	; 0x3ea08 <processStk500boot+0x100>
   3ea06:	41 c0       	rjmp	.+130    	; 0x3ea8a <processStk500boot+0x182>
   3ea08:	43 30       	cpi	r20, 0x03	; 3
   3ea0a:	09 f4       	brne	.+2      	; 0x3ea0e <processStk500boot+0x106>
   3ea0c:	6b c0       	rjmp	.+214    	; 0x3eae4 <processStk500boot+0x1dc>
   3ea0e:	41 30       	cpi	r20, 0x01	; 1
   3ea10:	09 f0       	breq	.+2      	; 0x3ea14 <processStk500boot+0x10c>
   3ea12:	9d c1       	rjmp	.+826    	; 0x3ed4e <processStk500boot+0x446>
   3ea14:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
#endif
			case CMD_SIGN_ON:
				msgLength		=	11;
				msgBuffer[1] 	=	STATUS_CMD_OK;
   3ea16:	88 e0       	ldi	r24, 0x08	; 8
				msgBuffer[2] 	=	8;
   3ea18:	8b 83       	std	Y+3, r24	; 0x03
   3ea1a:	81 e4       	ldi	r24, 0x41	; 65
				msgBuffer[3] 	=	'A';
   3ea1c:	8c 83       	std	Y+4, r24	; 0x04
   3ea1e:	86 e5       	ldi	r24, 0x56	; 86
				msgBuffer[4] 	=	'V';
   3ea20:	8d 83       	std	Y+5, r24	; 0x05
   3ea22:	82 e5       	ldi	r24, 0x52	; 82
				msgBuffer[5] 	=	'R';
   3ea24:	8e 83       	std	Y+6, r24	; 0x06
   3ea26:	89 e4       	ldi	r24, 0x49	; 73
				msgBuffer[6] 	=	'I';
   3ea28:	8f 83       	std	Y+7, r24	; 0x07
   3ea2a:	83 e5       	ldi	r24, 0x53	; 83
				msgBuffer[7] 	=	'S';
   3ea2c:	88 87       	std	Y+8, r24	; 0x08
   3ea2e:	80 e5       	ldi	r24, 0x50	; 80
				msgBuffer[8] 	=	'P';
   3ea30:	89 87       	std	Y+9, r24	; 0x09
   3ea32:	8f e5       	ldi	r24, 0x5F	; 95
				msgBuffer[9] 	=	'_';
   3ea34:	8a 87       	std	Y+10, r24	; 0x0a
   3ea36:	82 e3       	ldi	r24, 0x32	; 50
				msgBuffer[10]	=	'2';
   3ea38:	8b 87       	std	Y+11, r24	; 0x0b
   3ea3a:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3ea3c:	0b e0       	ldi	r16, 0x0B	; 11
				}
			}
			break;
#endif
			case CMD_SIGN_ON:
				msgLength		=	11;
   3ea3e:	10 e0       	ldi	r17, 0x00	; 0
   3ea40:	8b c1       	rjmp	.+790    	; 0x3ed58 <processStk500boot+0x450>
				msgBuffer[6] 	=	'I';
				msgBuffer[7] 	=	'S';
				msgBuffer[8] 	=	'P';
				msgBuffer[9] 	=	'_';
				msgBuffer[10]	=	'2';
				break;
   3ea42:	41 31       	cpi	r20, 0x11	; 17

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3ea44:	09 f4       	brne	.+2      	; 0x3ea48 <processStk500boot+0x140>
   3ea46:	5b c0       	rjmp	.+182    	; 0x3eafe <processStk500boot+0x1f6>
   3ea48:	08 f0       	brcs	.+2      	; 0x3ea4c <processStk500boot+0x144>
   3ea4a:	9c c0       	rjmp	.+312    	; 0x3eb84 <processStk500boot+0x27c>
   3ea4c:	40 31       	cpi	r20, 0x10	; 16
   3ea4e:	e9 f0       	breq	.+58     	; 0x3ea8a <processStk500boot+0x182>
   3ea50:	7e c1       	rjmp	.+764    	; 0x3ed4e <processStk500boot+0x446>
   3ea52:	48 31       	cpi	r20, 0x18	; 24
   3ea54:	09 f4       	brne	.+2      	; 0x3ea58 <processStk500boot+0x150>
   3ea56:	6e c0       	rjmp	.+220    	; 0x3eb34 <processStk500boot+0x22c>
   3ea58:	48 f4       	brcc	.+18     	; 0x3ea6c <processStk500boot+0x164>
   3ea5a:	45 31       	cpi	r20, 0x15	; 21
   3ea5c:	09 f4       	brne	.+2      	; 0x3ea60 <processStk500boot+0x158>
   3ea5e:	ae c0       	rjmp	.+348    	; 0x3ebbc <processStk500boot+0x2b4>
   3ea60:	08 f4       	brcc	.+2      	; 0x3ea64 <processStk500boot+0x15c>
   3ea62:	25 c1       	rjmp	.+586    	; 0x3ecae <processStk500boot+0x3a6>
   3ea64:	46 31       	cpi	r20, 0x16	; 22
   3ea66:	09 f4       	brne	.+2      	; 0x3ea6a <processStk500boot+0x162>
   3ea68:	22 c1       	rjmp	.+580    	; 0x3ecae <processStk500boot+0x3a6>
   3ea6a:	71 c1       	rjmp	.+738    	; 0x3ed4e <processStk500boot+0x446>
   3ea6c:	4a 31       	cpi	r20, 0x1A	; 26
   3ea6e:	09 f4       	brne	.+2      	; 0x3ea72 <processStk500boot+0x16a>
   3ea70:	54 c0       	rjmp	.+168    	; 0x3eb1a <processStk500boot+0x212>
   3ea72:	08 f4       	brcc	.+2      	; 0x3ea76 <processStk500boot+0x16e>
   3ea74:	75 c0       	rjmp	.+234    	; 0x3eb60 <processStk500boot+0x258>
   3ea76:	4b 31       	cpi	r20, 0x1B	; 27
   3ea78:	09 f4       	brne	.+2      	; 0x3ea7c <processStk500boot+0x174>
   3ea7a:	44 c0       	rjmp	.+136    	; 0x3eb04 <processStk500boot+0x1fc>
   3ea7c:	4d 31       	cpi	r20, 0x1D	; 29
   3ea7e:	39 f0       	breq	.+14     	; 0x3ea8e <processStk500boot+0x186>
   3ea80:	66 c1       	rjmp	.+716    	; 0x3ed4e <processStk500boot+0x446>
   3ea82:	47 30       	cpi	r20, 0x07	; 7
		/*
		 * Collect received bytes to a complete message
		 */
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
   3ea84:	09 f4       	brne	.+2      	; 0x3ea88 <processStk500boot+0x180>
   3ea86:	b4 cf       	rjmp	.-152    	; 0x3e9f0 <processStk500boot+0xe8>
   3ea88:	68 cf       	rjmp	.-304    	; 0x3e95a <processStk500boot+0x52>
   3ea8a:	20 e0       	ldi	r18, 0x00	; 0

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3ea8c:	39 c0       	rjmp	.+114    	; 0x3eb00 <processStk500boot+0x1f8>
   3ea8e:	8d 81       	ldd	r24, Y+5	; 0x05
#ifndef REMOVE_CMD_SPI_MULTI
			case CMD_SPI_MULTI: {
				unsigned char answerByte;
				unsigned char flag = 0;

				if(msgBuffer[4] == 0x30) {
   3ea90:	80 33       	cpi	r24, 0x30	; 48
   3ea92:	39 f4       	brne	.+14     	; 0x3eaa2 <processStk500boot+0x19a>
   3ea94:	9f 81       	ldd	r25, Y+7	; 0x07
					unsigned char signatureIndex	=	msgBuffer[6];
   3ea96:	99 23       	and	r25, r25

					if(signatureIndex == 0) {
   3ea98:	b1 f0       	breq	.+44     	; 0x3eac6 <processStk500boot+0x1be>
   3ea9a:	91 30       	cpi	r25, 0x01	; 1
						//answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
						answerByte	=	SIGNATURE_0;
					} else if(signatureIndex == 1) {
   3ea9c:	b1 f4       	brne	.+44     	; 0x3eaca <processStk500boot+0x1c2>
   3ea9e:	98 e9       	ldi	r25, 0x98	; 152
						//answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						answerByte	=	SIGNATURE_1;
   3eaa0:	17 c0       	rjmp	.+46     	; 0x3ead0 <processStk500boot+0x1c8>
   3eaa2:	98 2f       	mov	r25, r24
					} else {
						//answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						answerByte	=	SIGNATURE_2;
					}
				} else if(msgBuffer[4] & 0x50) {
   3eaa4:	90 75       	andi	r25, 0x50	; 80
   3eaa6:	99 f0       	breq	.+38     	; 0x3eace <processStk500boot+0x1c6>
   3eaa8:	80 35       	cpi	r24, 0x50	; 80
					//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
					//*	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
					//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
					if(msgBuffer[4] == 0x50) {
   3eaaa:	21 f4       	brne	.+8      	; 0x3eab4 <processStk500boot+0x1ac>
   3eaac:	99 e0       	ldi	r25, 0x09	; 9
						answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3eaae:	e0 e0       	ldi	r30, 0x00	; 0
   3eab0:	f0 e0       	ldi	r31, 0x00	; 0
   3eab2:	05 c0       	rjmp	.+10     	; 0x3eabe <processStk500boot+0x1b6>
   3eab4:	88 35       	cpi	r24, 0x58	; 88
					} else if(msgBuffer[4] == 0x58) {
   3eab6:	59 f4       	brne	.+22     	; 0x3eace <processStk500boot+0x1c6>
   3eab8:	e3 e0       	ldi	r30, 0x03	; 3
						answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3eaba:	f0 e0       	ldi	r31, 0x00	; 0
   3eabc:	99 e0       	ldi	r25, 0x09	; 9
   3eabe:	90 93 57 00 	sts	0x0057, r25
   3eac2:	94 91       	lpm	r25, Z
   3eac4:	05 c0       	rjmp	.+10     	; 0x3ead0 <processStk500boot+0x1c8>
   3eac6:	9e e1       	ldi	r25, 0x1E	; 30
				if(msgBuffer[4] == 0x30) {
					unsigned char signatureIndex	=	msgBuffer[6];

					if(signatureIndex == 0) {
						//answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
						answerByte	=	SIGNATURE_0;
   3eac8:	03 c0       	rjmp	.+6      	; 0x3ead0 <processStk500boot+0x1c8>
   3eaca:	91 e0       	ldi	r25, 0x01	; 1
					} else if(signatureIndex == 1) {
						//answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						answerByte	=	SIGNATURE_1;
					} else {
						//answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						answerByte	=	SIGNATURE_2;
   3eacc:	01 c0       	rjmp	.+2      	; 0x3ead0 <processStk500boot+0x1c8>
   3eace:	90 e0       	ldi	r25, 0x00	; 0
						answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					} else {
						answerByte	=	0;
					}
				} else {
					answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
   3ead0:	1a 82       	std	Y+2, r1	; 0x02
				}

				if(!flag) {
					msgLength		=	7;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3ead2:	1b 82       	std	Y+3, r1	; 0x03
					msgBuffer[2]	=	0;
   3ead4:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[3]	=	msgBuffer[4];
   3ead6:	1d 82       	std	Y+5, r1	; 0x05
					msgBuffer[4]	=	0;
   3ead8:	9e 83       	std	Y+6, r25	; 0x06
					msgBuffer[5]	=	answerByte;
   3eada:	1f 82       	std	Y+7, r1	; 0x07
					msgBuffer[6]	=	STATUS_CMD_OK;
   3eadc:	20 e0       	ldi	r18, 0x00	; 0
   3eade:	07 e0       	ldi	r16, 0x07	; 7
				} else {
					answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
				}

				if(!flag) {
					msgLength		=	7;
   3eae0:	10 e0       	ldi	r17, 0x00	; 0
   3eae2:	3a c1       	rjmp	.+628    	; 0x3ed58 <processStk500boot+0x450>
   3eae4:	ea 81       	ldd	r30, Y+2	; 0x02
   3eae6:	e0 59       	subi	r30, 0x90	; 144
   3eae8:	e3 30       	cpi	r30, 0x03	; 3
   3eaea:	28 f4       	brcc	.+10     	; 0x3eaf6 <processStk500boot+0x1ee>
   3eaec:	f0 e0       	ldi	r31, 0x00	; 0
   3eaee:	e4 5e       	subi	r30, 0xE4	; 228
   3eaf0:	fd 4f       	sbci	r31, 0xFD	; 253
   3eaf2:	80 81       	ld	r24, Z
   3eaf4:	01 c0       	rjmp	.+2      	; 0x3eaf8 <processStk500boot+0x1f0>
   3eaf6:	80 e0       	ldi	r24, 0x00	; 0
				break;

			case CMD_GET_PARAMETER: {
				unsigned char value;

				switch(msgBuffer[1]) {
   3eaf8:	1a 82       	std	Y+2, r1	; 0x02
						value	=	0;
						break;
				}

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3eafa:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[2]	=	value;
   3eafc:	3f c0       	rjmp	.+126    	; 0x3eb7c <processStk500boot+0x274>
   3eafe:	21 e0       	ldi	r18, 0x01	; 1
			}
			break;

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave	=	1;
   3eb00:	1a 82       	std	Y+2, r1	; 0x02
				//*	fall thru

			case CMD_SET_PARAMETER:
			case CMD_ENTER_PROGMODE_ISP:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3eb02:	28 c1       	rjmp	.+592    	; 0x3ed54 <processStk500boot+0x44c>
   3eb04:	8d 81       	ldd	r24, Y+5	; 0x05
				break;

			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex	=	msgBuffer[4];
   3eb06:	88 23       	and	r24, r24
				unsigned char signature;

				if(signatureIndex == 0)
   3eb08:	21 f0       	breq	.+8      	; 0x3eb12 <processStk500boot+0x20a>
   3eb0a:	81 30       	cpi	r24, 0x01	; 1
					//signature	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
					signature	=	SIGNATURE_0;
				else if(signatureIndex == 1)
   3eb0c:	21 f4       	brne	.+8      	; 0x3eb16 <processStk500boot+0x20e>
   3eb0e:	88 e9       	ldi	r24, 0x98	; 152
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
   3eb10:	24 c0       	rjmp	.+72     	; 0x3eb5a <processStk500boot+0x252>
   3eb12:	8e e1       	ldi	r24, 0x1E	; 30
				unsigned char signatureIndex	=	msgBuffer[4];
				unsigned char signature;

				if(signatureIndex == 0)
					//signature	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
					signature	=	SIGNATURE_0;
   3eb14:	22 c0       	rjmp	.+68     	; 0x3eb5a <processStk500boot+0x252>
   3eb16:	81 e0       	ldi	r24, 0x01	; 1
				else if(signatureIndex == 1)
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
				else
					//signature	=	SIGNATURE_BYTES & 0x000000FF;
					signature	=	SIGNATURE_2;
   3eb18:	20 c0       	rjmp	.+64     	; 0x3eb5a <processStk500boot+0x252>
   3eb1a:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3eb1c:	e1 e0       	ldi	r30, 0x01	; 1
				msgBuffer[2]	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   3eb1e:	f0 e0       	ldi	r31, 0x00	; 0
   3eb20:	89 e0       	ldi	r24, 0x09	; 9
   3eb22:	80 93 57 00 	sts	0x0057, r24
   3eb26:	e4 91       	lpm	r30, Z
   3eb28:	eb 83       	std	Y+3, r30	; 0x03
   3eb2a:	1c 82       	std	Y+4, r1	; 0x04
				msgBuffer[3]	=	STATUS_CMD_OK;
   3eb2c:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3eb2e:	04 e0       	ldi	r16, 0x04	; 4
				msgBuffer[3]	=	STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
   3eb30:	10 e0       	ldi	r17, 0x00	; 0
   3eb32:	12 c1       	rjmp	.+548    	; 0x3ed58 <processStk500boot+0x450>
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
				msgBuffer[3]	=	STATUS_CMD_OK;
				break;
   3eb34:	8b 81       	ldd	r24, Y+3	; 0x03

			case CMD_READ_FUSE_ISP: {
				unsigned char fuseBits;

				if(msgBuffer[2] == 0x50) {
   3eb36:	80 35       	cpi	r24, 0x50	; 80
   3eb38:	51 f4       	brne	.+20     	; 0x3eb4e <processStk500boot+0x246>
   3eb3a:	8c 81       	ldd	r24, Y+4	; 0x04
					if(msgBuffer[3] == 0x08)
   3eb3c:	88 30       	cpi	r24, 0x08	; 8
   3eb3e:	19 f4       	brne	.+6      	; 0x3eb46 <processStk500boot+0x23e>
   3eb40:	e2 e0       	ldi	r30, 0x02	; 2
						fuseBits	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   3eb42:	f0 e0       	ldi	r31, 0x00	; 0
   3eb44:	06 c0       	rjmp	.+12     	; 0x3eb52 <processStk500boot+0x24a>
   3eb46:	89 e0       	ldi	r24, 0x09	; 9
					else
						fuseBits	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3eb48:	e0 e0       	ldi	r30, 0x00	; 0
   3eb4a:	f0 e0       	ldi	r31, 0x00	; 0
   3eb4c:	03 c0       	rjmp	.+6      	; 0x3eb54 <processStk500boot+0x24c>
   3eb4e:	e3 e0       	ldi	r30, 0x03	; 3
				} else {
					fuseBits	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3eb50:	f0 e0       	ldi	r31, 0x00	; 0
   3eb52:	89 e0       	ldi	r24, 0x09	; 9
   3eb54:	80 93 57 00 	sts	0x0057, r24
   3eb58:	84 91       	lpm	r24, Z
   3eb5a:	1a 82       	std	Y+2, r1	; 0x02
				}

				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3eb5c:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[2]	=	fuseBits;
   3eb5e:	e5 cf       	rjmp	.-54     	; 0x3eb2a <processStk500boot+0x222>
   3eb60:	8d 81       	ldd	r24, Y+5	; 0x05

#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
			case CMD_PROGRAM_LOCK_ISP: {
				unsigned char lockBits	=	msgBuffer[4];

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3eb62:	83 6c       	ori	r24, 0xC3	; 195
				boot_lock_bits_set(lockBits);		// and program it
   3eb64:	99 e0       	ldi	r25, 0x09	; 9
   3eb66:	e1 e0       	ldi	r30, 0x01	; 1
   3eb68:	f0 e0       	ldi	r31, 0x00	; 0
   3eb6a:	08 2e       	mov	r0, r24
   3eb6c:	90 93 57 00 	sts	0x0057, r25
   3eb70:	e8 95       	spm
   3eb72:	07 b6       	in	r0, 0x37	; 55
				boot_spm_busy_wait();
   3eb74:	00 fc       	sbrc	r0, 0
   3eb76:	fd cf       	rjmp	.-6      	; 0x3eb72 <processStk500boot+0x26a>
   3eb78:	1a 82       	std	Y+2, r1	; 0x02

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3eb7a:	1b 82       	std	Y+3, r1	; 0x03
				msgBuffer[2]	=	STATUS_CMD_OK;
   3eb7c:	20 e0       	ldi	r18, 0x00	; 0
			}
			break;
   3eb7e:	03 e0       	ldi	r16, 0x03	; 3

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
				boot_lock_bits_set(lockBits);		// and program it
				boot_spm_busy_wait();

				msgLength		=	3;
   3eb80:	10 e0       	ldi	r17, 0x00	; 0
   3eb82:	ea c0       	rjmp	.+468    	; 0x3ed58 <processStk500boot+0x450>
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
   3eb84:	80 ec       	ldi	r24, 0xC0	; 192
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3eb86:	8a 83       	std	Y+2, r24	; 0x02
   3eb88:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3eb8a:	02 e0       	ldi	r16, 0x02	; 2
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
   3eb8c:	10 e0       	ldi	r17, 0x00	; 0
   3eb8e:	41 2c       	mov	r4, r1
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
   3eb90:	51 2c       	mov	r5, r1
   3eb92:	32 01       	movw	r6, r4
   3eb94:	e1 c0       	rjmp	.+450    	; 0x3ed58 <processStk500boot+0x450>
				msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
				break;
   3eb96:	8a 81       	ldd	r24, Y+2	; 0x02

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address	=	(((address_t)(msgBuffer[1]) << 24) | ((address_t)(msgBuffer[2]) << 16) | ((address_t)(msgBuffer[3]) << 8) | (msgBuffer[4])) << 1;
   3eb98:	cb 80       	ldd	r12, Y+3	; 0x03
   3eb9a:	d1 2c       	mov	r13, r1
   3eb9c:	e1 2c       	mov	r14, r1
   3eb9e:	f1 2c       	mov	r15, r1
   3eba0:	76 01       	movw	r14, r12
   3eba2:	dd 24       	eor	r13, r13
   3eba4:	cc 24       	eor	r12, r12
   3eba6:	f8 2a       	or	r15, r24
   3eba8:	8d 81       	ldd	r24, Y+5	; 0x05
   3ebaa:	c8 2a       	or	r12, r24
   3ebac:	8c 81       	ldd	r24, Y+4	; 0x04
   3ebae:	d8 2a       	or	r13, r24
   3ebb0:	cc 0c       	add	r12, r12
   3ebb2:	dd 1c       	adc	r13, r13
   3ebb4:	ee 1c       	adc	r14, r14
   3ebb6:	ff 1c       	adc	r15, r15
   3ebb8:	1a 82       	std	Y+2, r1	; 0x02
#else
				address	=	(((msgBuffer[3]) << 8) | (msgBuffer[4])) << 1;		//convert word to byte address
#endif
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3ebba:	cb c0       	rjmp	.+406    	; 0x3ed52 <processStk500boot+0x44a>
   3ebbc:	8a 81       	ldd	r24, Y+2	; 0x02
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP: {
				unsigned int	size	=	((msgBuffer[1]) << 8) | msgBuffer[2];
   3ebbe:	90 e0       	ldi	r25, 0x00	; 0
   3ebc0:	98 2f       	mov	r25, r24
   3ebc2:	88 27       	eor	r24, r24
   3ebc4:	2b 81       	ldd	r18, Y+3	; 0x03
   3ebc6:	82 2b       	or	r24, r18
   3ebc8:	43 31       	cpi	r20, 0x13	; 19
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if(msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3ebca:	09 f0       	breq	.+2      	; 0x3ebce <processStk500boot+0x2c6>
   3ebcc:	45 c0       	rjmp	.+138    	; 0x3ec58 <processStk500boot+0x350>
   3ebce:	41 14       	cp	r4, r1
					// erase only main section (bootloader protection)
					if(eraseAddress < APP_END) {
   3ebd0:	f0 ec       	ldi	r31, 0xC0	; 192
   3ebd2:	5f 06       	cpc	r5, r31
   3ebd4:	f3 e0       	ldi	r31, 0x03	; 3
   3ebd6:	6f 06       	cpc	r6, r31
   3ebd8:	71 04       	cpc	r7, r1
   3ebda:	70 f4       	brcc	.+28     	; 0x3ebf8 <processStk500boot+0x2f0>
   3ebdc:	23 e0       	ldi	r18, 0x03	; 3
						boot_page_erase(eraseAddress);	// Perform page erase
   3ebde:	f2 01       	movw	r30, r4
   3ebe0:	60 92 5b 00 	sts	0x005B, r6
   3ebe4:	20 93 57 00 	sts	0x0057, r18
   3ebe8:	e8 95       	spm
   3ebea:	07 b6       	in	r0, 0x37	; 55
						boot_spm_busy_wait();		// Wait until the memory is erased.
   3ebec:	00 fc       	sbrc	r0, 0
   3ebee:	fd cf       	rjmp	.-6      	; 0x3ebea <processStk500boot+0x2e2>
   3ebf0:	4f ef       	ldi	r20, 0xFF	; 255
						eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3ebf2:	54 1a       	sub	r5, r20
   3ebf4:	64 0a       	sbc	r6, r20
   3ebf6:	74 0a       	sbc	r7, r20
   3ebf8:	4b 85       	ldd	r20, Y+11	; 0x0b
   3ebfa:	46 01       	movw	r8, r12
				else if(signatureIndex == 1)
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
				else
					//signature	=	SIGNATURE_BYTES & 0x000000FF;
					signature	=	SIGNATURE_2;
   3ebfc:	57 01       	movw	r10, r14
   3ebfe:	9e 01       	movw	r18, r28
   3ec00:	25 5f       	subi	r18, 0xF5	; 245
   3ec02:	3f 4f       	sbci	r19, 0xFF	; 255
   3ec04:	d9 01       	movw	r26, r18
   3ec06:	12 96       	adiw	r26, 0x02	; 2
   3ec08:	9d 01       	movw	r18, r26
   3ec0a:	fd 01       	movw	r30, r26
   3ec0c:	31 97       	sbiw	r30, 0x01	; 1
   3ec0e:	60 81       	ld	r22, Z
					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;

						data		=	(highByte << 8) | lowByte;
   3ec10:	50 e0       	ldi	r21, 0x00	; 0
   3ec12:	56 2b       	or	r21, r22
   3ec14:	61 e0       	ldi	r22, 0x01	; 1
						boot_page_fill(address, data);
   3ec16:	0a 01       	movw	r0, r20
   3ec18:	f4 01       	movw	r30, r8
   3ec1a:	a0 92 5b 00 	sts	0x005B, r10
   3ec1e:	60 93 57 00 	sts	0x0057, r22
   3ec22:	e8 95       	spm
   3ec24:	11 24       	eor	r1, r1
   3ec26:	e2 e0       	ldi	r30, 0x02	; 2

						address	=	address + 2;	// Select next word in memory
   3ec28:	8e 0e       	add	r8, r30
   3ec2a:	91 1c       	adc	r9, r1
   3ec2c:	a1 1c       	adc	r10, r1
   3ec2e:	b1 1c       	adc	r11, r1
   3ec30:	02 97       	sbiw	r24, 0x02	; 2
						size	-=	2;				// Reduce number of bytes to write by two
   3ec32:	00 97       	sbiw	r24, 0x00	; 0
					} while(size);					// Loop until all bytes written
   3ec34:	11 f0       	breq	.+4      	; 0x3ec3a <processStk500boot+0x332>
   3ec36:	4c 91       	ld	r20, X
					}

					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;
   3ec38:	e5 cf       	rjmp	.-54     	; 0x3ec04 <processStk500boot+0x2fc>
   3ec3a:	85 e0       	ldi	r24, 0x05	; 5

						address	=	address + 2;	// Select next word in memory
						size	-=	2;				// Reduce number of bytes to write by two
					} while(size);					// Loop until all bytes written

					boot_page_write(tempaddress);
   3ec3c:	f6 01       	movw	r30, r12
   3ec3e:	e0 92 5b 00 	sts	0x005B, r14
   3ec42:	80 93 57 00 	sts	0x0057, r24
   3ec46:	e8 95       	spm
   3ec48:	07 b6       	in	r0, 0x37	; 55
					boot_spm_busy_wait();
   3ec4a:	00 fc       	sbrc	r0, 0
   3ec4c:	fd cf       	rjmp	.-6      	; 0x3ec48 <processStk500boot+0x340>
   3ec4e:	81 e1       	ldi	r24, 0x11	; 17
					boot_rww_enable();				// Re-enable the RWW section
   3ec50:	80 93 57 00 	sts	0x0057, r24
   3ec54:	e8 95       	spm
   3ec56:	27 c0       	rjmp	.+78     	; 0x3eca6 <processStk500boot+0x39e>
   3ec58:	fe 01       	movw	r30, r28
   3ec5a:	3b 96       	adiw	r30, 0x0b	; 11
   3ec5c:	9c 01       	movw	r18, r24
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if(msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3ec5e:	b7 01       	movw	r22, r14
   3ec60:	a6 01       	movw	r20, r12
   3ec62:	41 bd       	out	0x21, r20	; 33
					//*	issue 543, this should work, It has not been tested.
					//	#if (!defined(__AVR_ATmega1280__) && !defined(__AVR_ATmega2560__)  && !defined(__AVR_ATmega2561__)  && !defined(__AVR_ATmega1284P__)  && !defined(__AVR_ATmega640__))
#if (defined(EEARL) && defined(EEARH)  && defined(EEMWE)  && defined(EEWE)  && defined(EEDR))
					/* write EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3ec64:	85 2e       	mov	r8, r21
						EEARH	=	(address >> 8);
   3ec66:	96 2e       	mov	r9, r22
   3ec68:	a7 2e       	mov	r10, r23
   3ec6a:	bb 24       	eor	r11, r11
   3ec6c:	82 bc       	out	0x22, r8	; 34
   3ec6e:	4f 5f       	subi	r20, 0xFF	; 255
						address++;						// Select next EEPROM byte
   3ec70:	5f 4f       	sbci	r21, 0xFF	; 255
   3ec72:	6f 4f       	sbci	r22, 0xFF	; 255
   3ec74:	7f 4f       	sbci	r23, 0xFF	; 255
   3ec76:	a1 91       	ld	r26, Z+

						EEDR	=	*p++;				// get byte from buffer
   3ec78:	a0 bd       	out	0x20, r26	; 32
   3ec7a:	fa 9a       	sbi	0x1f, 2	; 31
						EECR	|=	(1 << EEMWE);			// Write data into EEPROM
   3ec7c:	f9 9a       	sbi	0x1f, 1	; 31
						EECR	|=	(1 << EEWE);
   3ec7e:	f9 99       	sbic	0x1f, 1	; 31

						while(EECR & (1 << EEWE))
   3ec80:	fe cf       	rjmp	.-4      	; 0x3ec7e <processStk500boot+0x376>
   3ec82:	21 50       	subi	r18, 0x01	; 1
							;	// Wait for write operation to finish

						size--;						// Decrease number of bytes to write
   3ec84:	31 09       	sbc	r19, r1
   3ec86:	21 15       	cp	r18, r1
					} while(size);					// Loop until all bytes written
   3ec88:	31 05       	cpc	r19, r1
   3ec8a:	59 f7       	brne	.-42     	; 0x3ec62 <processStk500boot+0x35a>
   3ec8c:	01 97       	sbiw	r24, 0x01	; 1
   3ec8e:	4c 01       	movw	r8, r24
   3ec90:	a1 2c       	mov	r10, r1
   3ec92:	b1 2c       	mov	r11, r1
   3ec94:	ff ef       	ldi	r31, 0xFF	; 255
   3ec96:	8f 1a       	sub	r8, r31
   3ec98:	9f 0a       	sbc	r9, r31
   3ec9a:	af 0a       	sbc	r10, r31
   3ec9c:	bf 0a       	sbc	r11, r31
   3ec9e:	8c 0c       	add	r8, r12
   3eca0:	9d 1c       	adc	r9, r13
   3eca2:	ae 1c       	adc	r10, r14
   3eca4:	bf 1c       	adc	r11, r15
   3eca6:	1a 82       	std	Y+2, r1	; 0x02

#endif
				}

				msgLength	=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3eca8:	75 01       	movw	r14, r10
			}
			break;
   3ecaa:	64 01       	movw	r12, r8
   3ecac:	52 c0       	rjmp	.+164    	; 0x3ed52 <processStk500boot+0x44a>
   3ecae:	2a 81       	ldd	r18, Y+2	; 0x02

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP: {
				unsigned int	size	=	((msgBuffer[1]) << 8) | msgBuffer[2];
   3ecb0:	30 e0       	ldi	r19, 0x00	; 0
   3ecb2:	32 2f       	mov	r19, r18
   3ecb4:	22 27       	eor	r18, r18
   3ecb6:	8b 81       	ldd	r24, Y+3	; 0x03
   3ecb8:	28 2b       	or	r18, r24
   3ecba:	89 01       	movw	r16, r18
				unsigned char*	p		=	msgBuffer + 1;
				msgLength				=	size + 3;
   3ecbc:	0d 5f       	subi	r16, 0xFD	; 253
   3ecbe:	1f 4f       	sbci	r17, 0xFF	; 255
   3ecc0:	1a 82       	std	Y+2, r1	; 0x02

				*p++	=	STATUS_CMD_OK;
   3ecc2:	44 31       	cpi	r20, 0x14	; 20

				if(msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3ecc4:	b1 f4       	brne	.+44     	; 0x3ecf2 <processStk500boot+0x3ea>
   3ecc6:	de 01       	movw	r26, r28
   3ecc8:	13 96       	adiw	r26, 0x03	; 3
   3ecca:	eb be       	out	0x3b, r14	; 59

					// Read FLASH
					do {
						//#if defined(RAMPZ)
#if (FLASHEND > 0x10000)
						data	=	pgm_read_word_far(address);
   3eccc:	f6 01       	movw	r30, r12
   3ecce:	87 91       	elpm	r24, Z+
   3ecd0:	96 91       	elpm	r25, Z
   3ecd2:	8c 93       	st	X, r24
#else
						data	=	pgm_read_word_near(address);
#endif
						*p++	=	(unsigned char)data;		//LSB
   3ecd4:	12 96       	adiw	r26, 0x02	; 2
   3ecd6:	fd 01       	movw	r30, r26
   3ecd8:	31 97       	sbiw	r30, 0x01	; 1
   3ecda:	90 83       	st	Z, r25
						*p++	=	(unsigned char)(data >> 8);	//MSB
   3ecdc:	42 e0       	ldi	r20, 0x02	; 2
						address	+=	2;							// Select next word in memory
   3ecde:	c4 0e       	add	r12, r20
   3ece0:	d1 1c       	adc	r13, r1
   3ece2:	e1 1c       	adc	r14, r1
   3ece4:	f1 1c       	adc	r15, r1
   3ece6:	22 50       	subi	r18, 0x02	; 2
						size	-=	2;
   3ece8:	31 09       	sbc	r19, r1
   3ecea:	21 15       	cp	r18, r1
					} while(size);
   3ecec:	31 05       	cpc	r19, r1
   3ecee:	69 f7       	brne	.-38     	; 0x3ecca <processStk500boot+0x3c2>
   3ecf0:	2b c0       	rjmp	.+86     	; 0x3ed48 <processStk500boot+0x440>
   3ecf2:	ce 01       	movw	r24, r28
   3ecf4:	03 96       	adiw	r24, 0x03	; 3
   3ecf6:	5c 01       	movw	r10, r24
   3ecf8:	49 01       	movw	r8, r18
				unsigned char*	p		=	msgBuffer + 1;
				msgLength				=	size + 3;

				*p++	=	STATUS_CMD_OK;

				if(msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3ecfa:	d7 01       	movw	r26, r14
   3ecfc:	c6 01       	movw	r24, r12
   3ecfe:	81 bd       	out	0x21, r24	; 33
						size	-=	2;
					} while(size);
				} else {
					/* Read EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3ed00:	49 2f       	mov	r20, r25
						EEARH	=	((address >> 8));
   3ed02:	5a 2f       	mov	r21, r26
   3ed04:	6b 2f       	mov	r22, r27
   3ed06:	77 27       	eor	r23, r23
   3ed08:	42 bd       	out	0x22, r20	; 34
   3ed0a:	01 96       	adiw	r24, 0x01	; 1
						address++;					// Select next EEPROM byte
   3ed0c:	a1 1d       	adc	r26, r1
   3ed0e:	b1 1d       	adc	r27, r1
   3ed10:	f8 9a       	sbi	0x1f, 0	; 31
						EECR	|=	(1 << EERE);			// Read EEPROM
   3ed12:	40 b5       	in	r20, 0x20	; 32
						*p++	=	EEDR;				// Send EEPROM data
   3ed14:	f5 01       	movw	r30, r10
   3ed16:	41 93       	st	Z+, r20
   3ed18:	5f 01       	movw	r10, r30
   3ed1a:	f1 e0       	ldi	r31, 0x01	; 1
						size--;
   3ed1c:	8f 1a       	sub	r8, r31
   3ed1e:	91 08       	sbc	r9, r1
   3ed20:	81 14       	cp	r8, r1
					} while(size);
   3ed22:	91 04       	cpc	r9, r1
   3ed24:	61 f7       	brne	.-40     	; 0x3ecfe <processStk500boot+0x3f6>
   3ed26:	c9 01       	movw	r24, r18
   3ed28:	01 97       	sbiw	r24, 0x01	; 1
   3ed2a:	a0 e0       	ldi	r26, 0x00	; 0
   3ed2c:	b0 e0       	ldi	r27, 0x00	; 0
   3ed2e:	01 96       	adiw	r24, 0x01	; 1
   3ed30:	a1 1d       	adc	r26, r1
   3ed32:	b1 1d       	adc	r27, r1
   3ed34:	c8 0e       	add	r12, r24
   3ed36:	d9 1e       	adc	r13, r25
   3ed38:	ea 1e       	adc	r14, r26
   3ed3a:	fb 1e       	adc	r15, r27
   3ed3c:	a3 e0       	ldi	r26, 0x03	; 3
   3ed3e:	b0 e0       	ldi	r27, 0x00	; 0
   3ed40:	ac 0f       	add	r26, r28
   3ed42:	bd 1f       	adc	r27, r29
   3ed44:	a2 0f       	add	r26, r18
   3ed46:	b3 1f       	adc	r27, r19
   3ed48:	1c 92       	st	X, r1
				}

				*p++	=	STATUS_CMD_OK;
   3ed4a:	20 e0       	ldi	r18, 0x00	; 0
			}
			break;
   3ed4c:	05 c0       	rjmp	.+10     	; 0x3ed58 <processStk500boot+0x450>
   3ed4e:	80 ec       	ldi	r24, 0xC0	; 192

			default:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_FAILED;
   3ed50:	8a 83       	std	Y+2, r24	; 0x02
   3ed52:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3ed54:	02 e0       	ldi	r16, 0x02	; 2
				*p++	=	STATUS_CMD_OK;
			}
			break;

			default:
				msgLength		=	2;
   3ed56:	10 e0       	ldi	r17, 0x00	; 0
   3ed58:	8b e1       	ldi	r24, 0x1B	; 27
		}

		/*
		 * Now send answer message back
		 */
		putch(MESSAGE_START);
   3ed5a:	c0 5e       	subi	r28, 0xE0	; 224
   3ed5c:	de 4f       	sbci	r29, 0xFE	; 254
   3ed5e:	28 83       	st	Y, r18
   3ed60:	c0 52       	subi	r28, 0x20	; 32
   3ed62:	d1 40       	sbci	r29, 0x01	; 1
   3ed64:	70 dd       	rcall	.-1312   	; 0x3e846 <putch>
   3ed66:	c2 5e       	subi	r28, 0xE2	; 226
   3ed68:	de 4f       	sbci	r29, 0xFE	; 254
		checksum	=	MESSAGE_START ^ 0;

		putch(seqNum);
   3ed6a:	88 81       	ld	r24, Y
   3ed6c:	ce 51       	subi	r28, 0x1E	; 30
   3ed6e:	d1 40       	sbci	r29, 0x01	; 1
   3ed70:	6a dd       	rcall	.-1324   	; 0x3e846 <putch>
   3ed72:	a1 2e       	mov	r10, r17
   3ed74:	bb 24       	eor	r11, r11
   3ed76:	8a 2d       	mov	r24, r10
		checksum	^=	seqNum;

		c			=	((msgLength >> 8) & 0xFF);
   3ed78:	66 dd       	rcall	.-1332   	; 0x3e846 <putch>
   3ed7a:	80 2f       	mov	r24, r16
		putch(c);
   3ed7c:	64 dd       	rcall	.-1336   	; 0x3e846 <putch>
   3ed7e:	8e e0       	ldi	r24, 0x0E	; 14
   3ed80:	62 dd       	rcall	.-1340   	; 0x3e846 <putch>
		checksum	^=	c;

		c			=	msgLength & 0x00FF;
		putch(c);
   3ed82:	25 e1       	ldi	r18, 0x15	; 21
   3ed84:	82 2e       	mov	r8, r18
   3ed86:	c2 5e       	subi	r28, 0xE2	; 226
		checksum ^= c;

		putch(TOKEN);
   3ed88:	de 4f       	sbci	r29, 0xFE	; 254
   3ed8a:	48 81       	ld	r20, Y
   3ed8c:	ce 51       	subi	r28, 0x1E	; 30
		putch(seqNum);
		checksum	^=	seqNum;

		c			=	((msgLength >> 8) & 0xFF);
		putch(c);
		checksum	^=	c;
   3ed8e:	d1 40       	sbci	r29, 0x01	; 1
   3ed90:	84 26       	eor	r8, r20
   3ed92:	80 26       	eor	r8, r16
   3ed94:	8a 24       	eor	r8, r10
   3ed96:	ce 01       	movw	r24, r28
   3ed98:	01 96       	adiw	r24, 0x01	; 1
   3ed9a:	5c 01       	movw	r10, r24
   3ed9c:	08 0f       	add	r16, r24

		c			=	msgLength & 0x00FF;
		putch(c);
		checksum ^= c;
   3ed9e:	19 1f       	adc	r17, r25

		putch(TOKEN);
		checksum ^= TOKEN;
   3eda0:	c0 5e       	subi	r28, 0xE0	; 224
   3eda2:	de 4f       	sbci	r29, 0xFE	; 254
   3eda4:	28 81       	ld	r18, Y
   3eda6:	c0 52       	subi	r28, 0x20	; 32
   3eda8:	d1 40       	sbci	r29, 0x01	; 1
   3edaa:	a0 16       	cp	r10, r16
		p	=	msgBuffer;

		while(msgLength) {
			c	=	*p++;
			putch(c);
			checksum ^= c;
   3edac:	b1 06       	cpc	r11, r17
   3edae:	b1 f0       	breq	.+44     	; 0x3eddc <processStk500boot+0x4d4>
   3edb0:	f5 01       	movw	r30, r10
   3edb2:	31 91       	ld	r19, Z+
   3edb4:	5f 01       	movw	r10, r30
		putch(TOKEN);
		checksum ^= TOKEN;

		p	=	msgBuffer;

		while(msgLength) {
   3edb6:	83 2f       	mov	r24, r19
   3edb8:	c0 5e       	subi	r28, 0xE0	; 224
   3edba:	de 4f       	sbci	r29, 0xFE	; 254
			c	=	*p++;
   3edbc:	28 83       	st	Y, r18
   3edbe:	c0 52       	subi	r28, 0x20	; 32
   3edc0:	d1 40       	sbci	r29, 0x01	; 1
			putch(c);
   3edc2:	c1 5e       	subi	r28, 0xE1	; 225
   3edc4:	de 4f       	sbci	r29, 0xFE	; 254
   3edc6:	38 83       	st	Y, r19
   3edc8:	cf 51       	subi	r28, 0x1F	; 31
   3edca:	d1 40       	sbci	r29, 0x01	; 1
   3edcc:	3c dd       	rcall	.-1416   	; 0x3e846 <putch>
   3edce:	c1 5e       	subi	r28, 0xE1	; 225
   3edd0:	de 4f       	sbci	r29, 0xFE	; 254
   3edd2:	38 81       	ld	r19, Y
   3edd4:	cf 51       	subi	r28, 0x1F	; 31
   3edd6:	d1 40       	sbci	r29, 0x01	; 1
   3edd8:	83 26       	eor	r8, r19
   3edda:	e2 cf       	rjmp	.-60     	; 0x3eda0 <processStk500boot+0x498>
			checksum ^= c;
   3eddc:	88 2d       	mov	r24, r8
   3edde:	c0 5e       	subi	r28, 0xE0	; 224
   3ede0:	de 4f       	sbci	r29, 0xFE	; 254
   3ede2:	28 83       	st	Y, r18
   3ede4:	c0 52       	subi	r28, 0x20	; 32
   3ede6:	d1 40       	sbci	r29, 0x01	; 1
   3ede8:	2e dd       	rcall	.-1444   	; 0x3e846 <putch>
			msgLength--;
		}

		putch(checksum);
   3edea:	c2 5e       	subi	r28, 0xE2	; 226
   3edec:	de 4f       	sbci	r29, 0xFE	; 254
   3edee:	48 81       	ld	r20, Y
   3edf0:	ce 51       	subi	r28, 0x1E	; 30
   3edf2:	d1 40       	sbci	r29, 0x01	; 1
   3edf4:	4f 5f       	subi	r20, 0xFF	; 255
   3edf6:	c2 5e       	subi	r28, 0xE2	; 226
   3edf8:	de 4f       	sbci	r29, 0xFE	; 254
		seqNum++;
   3edfa:	48 83       	st	Y, r20
   3edfc:	ce 51       	subi	r28, 0x1E	; 30
   3edfe:	d1 40       	sbci	r29, 0x01	; 1
   3ee00:	c0 5e       	subi	r28, 0xE0	; 224
   3ee02:	de 4f       	sbci	r29, 0xFE	; 254
   3ee04:	28 81       	ld	r18, Y
   3ee06:	c0 52       	subi	r28, 0x20	; 32
   3ee08:	d1 40       	sbci	r29, 0x01	; 1
   3ee0a:	22 23       	and	r18, r18
   3ee0c:	09 f4       	brne	.+2      	; 0x3ee10 <processStk500boot+0x508>
   3ee0e:	a2 cd       	rjmp	.-1212   	; 0x3e954 <processStk500boot+0x4c>
	unsigned int	msgLength		=	0;
	unsigned char	msgBuffer[285];
	unsigned char	c, *p;
	unsigned char   isLeave = 0;

	while(!isLeave) {
   3ee10:	00 00       	nop
   3ee12:	81 e1       	ldi	r24, 0x11	; 17
   3ee14:	80 93 57 00 	sts	0x0057, r24
   3ee18:	e8 95       	spm
   3ee1a:	6e ee       	ldi	r22, 0xEE	; 238
   3ee1c:	82 e0       	ldi	r24, 0x02	; 2
   3ee1e:	90 e0       	ldi	r25, 0x00	; 0
		putch(checksum);
		seqNum++;

	}

	asm volatile("nop");			// wait until port has changed
   3ee20:	2c d0       	rcall	.+88     	; 0x3ee7a <__eewr_byte_m2560>
	 * Now leave bootloader
	 */
	//TODO: find out what this does
	//UART_STATUS_REG	&=	0xfd;
#if defined(RWWSRE)
	boot_rww_enable();				// enable application section
   3ee22:	80 e0       	ldi	r24, 0x00	; 0
   3ee24:	c0 5e       	subi	r28, 0xE0	; 224
   3ee26:	de 4f       	sbci	r29, 0xFE	; 254
   3ee28:	de bf       	out	0x3e, r29	; 62
#endif
	eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3ee2a:	cd bf       	out	0x3d, r28	; 61
   3ee2c:	df 91       	pop	r29
   3ee2e:	cf 91       	pop	r28
   3ee30:	1f 91       	pop	r17
   3ee32:	0f 91       	pop	r16
	return(0);
}
   3ee34:	ff 90       	pop	r15
   3ee36:	ef 90       	pop	r14
   3ee38:	df 90       	pop	r13
   3ee3a:	cf 90       	pop	r12
   3ee3c:	bf 90       	pop	r11
   3ee3e:	af 90       	pop	r10
   3ee40:	9f 90       	pop	r9
   3ee42:	8f 90       	pop	r8
   3ee44:	7f 90       	pop	r7
   3ee46:	6f 90       	pop	r6
   3ee48:	5f 90       	pop	r5
   3ee4a:	4f 90       	pop	r4
   3ee4c:	3f 90       	pop	r3
   3ee4e:	2f 90       	pop	r2
   3ee50:	08 95       	ret
   3ee52:	18 01       	movw	r2, r16
   3ee54:	46 e0       	ldi	r20, 0x06	; 6
   3ee56:	81 cd       	rjmp	.-1278   	; 0x3e95a <processStk500boot+0x52>

0003ee58 <memcpy_PF>:
   3ee58:	fa 01       	movw	r30, r20
   3ee5a:	dc 01       	movw	r26, r24
   3ee5c:	02 c0       	rjmp	.+4      	; 0x3ee62 <memcpy_PF+0xa>
   3ee5e:	05 90       	lpm	r0, Z+
   3ee60:	0d 92       	st	X+, r0
   3ee62:	21 50       	subi	r18, 0x01	; 1
   3ee64:	30 40       	sbci	r19, 0x00	; 0
   3ee66:	d8 f7       	brcc	.-10     	; 0x3ee5e <memcpy_PF+0x6>
   3ee68:	08 95       	ret

0003ee6a <__eerd_byte_m2560>:
   3ee6a:	f9 99       	sbic	0x1f, 1	; 31
   3ee6c:	fe cf       	rjmp	.-4      	; 0x3ee6a <__eerd_byte_m2560>
   3ee6e:	92 bd       	out	0x22, r25	; 34
   3ee70:	81 bd       	out	0x21, r24	; 33
   3ee72:	f8 9a       	sbi	0x1f, 0	; 31
   3ee74:	99 27       	eor	r25, r25
   3ee76:	80 b5       	in	r24, 0x20	; 32
   3ee78:	08 95       	ret

0003ee7a <__eewr_byte_m2560>:
   3ee7a:	26 2f       	mov	r18, r22

0003ee7c <__eewr_r18_m2560>:
   3ee7c:	f9 99       	sbic	0x1f, 1	; 31
   3ee7e:	fe cf       	rjmp	.-4      	; 0x3ee7c <__eewr_r18_m2560>
   3ee80:	1f ba       	out	0x1f, r1	; 31
   3ee82:	92 bd       	out	0x22, r25	; 34
   3ee84:	81 bd       	out	0x21, r24	; 33
   3ee86:	20 bd       	out	0x20, r18	; 32
   3ee88:	0f b6       	in	r0, 0x3f	; 63
   3ee8a:	f8 94       	cli
   3ee8c:	fa 9a       	sbi	0x1f, 2	; 31
   3ee8e:	f9 9a       	sbi	0x1f, 1	; 31
   3ee90:	0f be       	out	0x3f, r0	; 63
   3ee92:	01 96       	adiw	r24, 0x01	; 1
   3ee94:	08 95       	ret

0003ee96 <_exit>:
   3ee96:	f8 94       	cli

0003ee98 <__stop_program>:
   3ee98:	ff cf       	rjmp	.-2      	; 0x3ee98 <__stop_program>
