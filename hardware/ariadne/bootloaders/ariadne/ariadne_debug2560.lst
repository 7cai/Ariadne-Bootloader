
ariadne_debug2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0003f476  0000150a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001476  0003e000  0003e000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800220  00800220  0000152a  2**0
                  ALLOC
  3 .stab         000051c0  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d1b  00000000  00000000  000066ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008407  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0003e000 <__vectors>:
   3e000:	c7 c1       	rjmp	.+910    	; 0x3e390 <__ctors_end>
   3e002:	00 00       	nop
   3e004:	56 c2       	rjmp	.+1196   	; 0x3e4b2 <__bad_interrupt>
   3e006:	00 00       	nop
   3e008:	54 c2       	rjmp	.+1192   	; 0x3e4b2 <__bad_interrupt>
   3e00a:	00 00       	nop
   3e00c:	52 c2       	rjmp	.+1188   	; 0x3e4b2 <__bad_interrupt>
   3e00e:	00 00       	nop
   3e010:	50 c2       	rjmp	.+1184   	; 0x3e4b2 <__bad_interrupt>
   3e012:	00 00       	nop
   3e014:	4e c2       	rjmp	.+1180   	; 0x3e4b2 <__bad_interrupt>
   3e016:	00 00       	nop
   3e018:	4c c2       	rjmp	.+1176   	; 0x3e4b2 <__bad_interrupt>
   3e01a:	00 00       	nop
   3e01c:	4a c2       	rjmp	.+1172   	; 0x3e4b2 <__bad_interrupt>
   3e01e:	00 00       	nop
   3e020:	48 c2       	rjmp	.+1168   	; 0x3e4b2 <__bad_interrupt>
   3e022:	00 00       	nop
   3e024:	46 c2       	rjmp	.+1164   	; 0x3e4b2 <__bad_interrupt>
   3e026:	00 00       	nop
   3e028:	44 c2       	rjmp	.+1160   	; 0x3e4b2 <__bad_interrupt>
   3e02a:	00 00       	nop
   3e02c:	42 c2       	rjmp	.+1156   	; 0x3e4b2 <__bad_interrupt>
   3e02e:	00 00       	nop
   3e030:	40 c2       	rjmp	.+1152   	; 0x3e4b2 <__bad_interrupt>
   3e032:	00 00       	nop
   3e034:	3e c2       	rjmp	.+1148   	; 0x3e4b2 <__bad_interrupt>
   3e036:	00 00       	nop
   3e038:	3c c2       	rjmp	.+1144   	; 0x3e4b2 <__bad_interrupt>
   3e03a:	00 00       	nop
   3e03c:	3a c2       	rjmp	.+1140   	; 0x3e4b2 <__bad_interrupt>
   3e03e:	00 00       	nop
   3e040:	38 c2       	rjmp	.+1136   	; 0x3e4b2 <__bad_interrupt>
   3e042:	00 00       	nop
   3e044:	36 c2       	rjmp	.+1132   	; 0x3e4b2 <__bad_interrupt>
   3e046:	00 00       	nop
   3e048:	34 c2       	rjmp	.+1128   	; 0x3e4b2 <__bad_interrupt>
   3e04a:	00 00       	nop
   3e04c:	32 c2       	rjmp	.+1124   	; 0x3e4b2 <__bad_interrupt>
   3e04e:	00 00       	nop
   3e050:	30 c2       	rjmp	.+1120   	; 0x3e4b2 <__bad_interrupt>
   3e052:	00 00       	nop
   3e054:	2e c2       	rjmp	.+1116   	; 0x3e4b2 <__bad_interrupt>
   3e056:	00 00       	nop
   3e058:	2c c2       	rjmp	.+1112   	; 0x3e4b2 <__bad_interrupt>
   3e05a:	00 00       	nop
   3e05c:	2a c2       	rjmp	.+1108   	; 0x3e4b2 <__bad_interrupt>
   3e05e:	00 00       	nop
   3e060:	28 c2       	rjmp	.+1104   	; 0x3e4b2 <__bad_interrupt>
   3e062:	00 00       	nop
   3e064:	26 c2       	rjmp	.+1100   	; 0x3e4b2 <__bad_interrupt>
   3e066:	00 00       	nop
   3e068:	24 c2       	rjmp	.+1096   	; 0x3e4b2 <__bad_interrupt>
   3e06a:	00 00       	nop
   3e06c:	22 c2       	rjmp	.+1092   	; 0x3e4b2 <__bad_interrupt>
   3e06e:	00 00       	nop
   3e070:	20 c2       	rjmp	.+1088   	; 0x3e4b2 <__bad_interrupt>
   3e072:	00 00       	nop
   3e074:	1e c2       	rjmp	.+1084   	; 0x3e4b2 <__bad_interrupt>
   3e076:	00 00       	nop
   3e078:	1c c2       	rjmp	.+1080   	; 0x3e4b2 <__bad_interrupt>
   3e07a:	00 00       	nop
   3e07c:	1a c2       	rjmp	.+1076   	; 0x3e4b2 <__bad_interrupt>
   3e07e:	00 00       	nop
   3e080:	18 c2       	rjmp	.+1072   	; 0x3e4b2 <__bad_interrupt>
   3e082:	00 00       	nop
   3e084:	16 c2       	rjmp	.+1068   	; 0x3e4b2 <__bad_interrupt>
   3e086:	00 00       	nop
   3e088:	14 c2       	rjmp	.+1064   	; 0x3e4b2 <__bad_interrupt>
   3e08a:	00 00       	nop
   3e08c:	12 c2       	rjmp	.+1060   	; 0x3e4b2 <__bad_interrupt>
   3e08e:	00 00       	nop
   3e090:	10 c2       	rjmp	.+1056   	; 0x3e4b2 <__bad_interrupt>
   3e092:	00 00       	nop
   3e094:	0e c2       	rjmp	.+1052   	; 0x3e4b2 <__bad_interrupt>
   3e096:	00 00       	nop
   3e098:	0c c2       	rjmp	.+1048   	; 0x3e4b2 <__bad_interrupt>
   3e09a:	00 00       	nop
   3e09c:	0a c2       	rjmp	.+1044   	; 0x3e4b2 <__bad_interrupt>
   3e09e:	00 00       	nop
   3e0a0:	08 c2       	rjmp	.+1040   	; 0x3e4b2 <__bad_interrupt>
   3e0a2:	00 00       	nop
   3e0a4:	06 c2       	rjmp	.+1036   	; 0x3e4b2 <__bad_interrupt>
   3e0a6:	00 00       	nop
   3e0a8:	04 c2       	rjmp	.+1032   	; 0x3e4b2 <__bad_interrupt>
   3e0aa:	00 00       	nop
   3e0ac:	02 c2       	rjmp	.+1028   	; 0x3e4b2 <__bad_interrupt>
   3e0ae:	00 00       	nop
   3e0b0:	00 c2       	rjmp	.+1024   	; 0x3e4b2 <__bad_interrupt>
   3e0b2:	00 00       	nop
   3e0b4:	fe c1       	rjmp	.+1020   	; 0x3e4b2 <__bad_interrupt>
   3e0b6:	00 00       	nop
   3e0b8:	fc c1       	rjmp	.+1016   	; 0x3e4b2 <__bad_interrupt>
   3e0ba:	00 00       	nop
   3e0bc:	fa c1       	rjmp	.+1012   	; 0x3e4b2 <__bad_interrupt>
   3e0be:	00 00       	nop
   3e0c0:	f8 c1       	rjmp	.+1008   	; 0x3e4b2 <__bad_interrupt>
   3e0c2:	00 00       	nop
   3e0c4:	f6 c1       	rjmp	.+1004   	; 0x3e4b2 <__bad_interrupt>
   3e0c6:	00 00       	nop
   3e0c8:	f4 c1       	rjmp	.+1000   	; 0x3e4b2 <__bad_interrupt>
   3e0ca:	00 00       	nop
   3e0cc:	f2 c1       	rjmp	.+996    	; 0x3e4b2 <__bad_interrupt>
   3e0ce:	00 00       	nop
   3e0d0:	f0 c1       	rjmp	.+992    	; 0x3e4b2 <__bad_interrupt>
   3e0d2:	00 00       	nop
   3e0d4:	ee c1       	rjmp	.+988    	; 0x3e4b2 <__bad_interrupt>
   3e0d6:	00 00       	nop
   3e0d8:	ec c1       	rjmp	.+984    	; 0x3e4b2 <__bad_interrupt>
   3e0da:	00 00       	nop
   3e0dc:	ea c1       	rjmp	.+980    	; 0x3e4b2 <__bad_interrupt>
   3e0de:	00 00       	nop
   3e0e0:	e8 c1       	rjmp	.+976    	; 0x3e4b2 <__bad_interrupt>
	...

0003e0e4 <mDebugMain_EXIT>:
   3e0e4:	53 74 61 72 74 20 75 73 65 72 20 61 70 70 00        Start user app.

0003e0f3 <mDebugMain_TITLE>:
   3e0f3:	41 72 69 61 64 6e 65 20 66 6f 72 20 41 72 64 75     Ariadne for Ardu
   3e103:	69 6e 6f 20 4d 65 67 61 32 35 36 30 2c 20 56 65     ino Mega2560, Ve
   3e113:	72 73 69 6f 6e 20 30 2e 35 00                       rsion 0.5.

0003e11d <mDebugMain_PREFIX>:
   3e11d:	4d 61 69 6e 3a 20 00                                Main: .

0003e124 <mDebugNet_DONE>:
   3e124:	4e 65 74 77 6f 72 6b 20 69 6e 69 74 20 64 6f 6e     Network init don
   3e134:	65 00                                               e.

0003e136 <mDebugNet_MAC>:
   3e136:	09 20 20 20 20 4d 41 43 3a 20 00                    .    MAC: .

0003e141 <mDebugNet_GW>:
   3e141:	09 47 61 74 65 77 61 79 3a 20 00                    .Gateway: .

0003e14c <mDebugNet_SUBN>:
   3e14c:	09 20 53 75 62 6e 65 74 3a 20 00                    . Subnet: .

0003e157 <mDebugNet_ADDR>:
   3e157:	09 41 64 64 72 65 73 73 3a 20 00                    .Address: .

0003e162 <mDebugNet_BUILTIN>:
   3e162:	42 75 69 6c 74 2d 69 6e 20 73 65 74 74 69 6e 67     Built-in setting
   3e172:	73 00                                               s.

0003e174 <mDebugNet_EEPROM>:
   3e174:	45 45 50 52 4f 4d 20 73 65 74 74 69 6e 67 73 00     EEPROM settings.

0003e184 <mDebugNet_PREFIX>:
   3e184:	20 4e 65 74 3a 20 00                                 Net: .

0003e18b <tftp_invalid_image_packet>:
   3e18b:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
   3e19b:	67 65 20 66 69 6c 65 00                             ge file.

0003e1a3 <tftp_unknown_error_packet>:
   3e1a3:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0003e1ae <tftp_full_error_packet>:
   3e1ae:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

0003e1b8 <tftp_opcode_error_packet>:
   3e1b8:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

0003e1c5 <mDebugTftp_SOCK>:
   3e1c5:	49 6e 69 74 20 73 6f 63 6b 65 74 20 74 6f 20 70     Init socket to p
   3e1d5:	6f 72 74 20 00                                      ort .

0003e1da <mDebugTftp_PORT>:
   3e1da:	09 44 61 74 61 20 50 6f 72 74 3a 20 00              .Data Port: .

0003e1e7 <mDebugTftp_INIT>:
   3e1e7:	54 46 54 50 20 73 65 72 76 65 72 20 69 6e 69 74     TFTP server init
   3e1f7:	20 64 6f 6e 65 00                                    done.

0003e1fd <mDebugTftp_RESP>:
   3e1fd:	52 65 73 70 6f 6e 73 65 20 73 65 6e 74 00           Response sent.

0003e20b <mDebugTftp_SFACK>:
   3e20b:	53 65 6e 74 20 46 69 6e 61 6c 20 41 43 4b 00        Sent Final ACK.

0003e21a <mDebugTftp_SACK>:
   3e21a:	53 65 6e 74 20 41 43 4b 00                          Sent ACK.

0003e223 <mDebugTftp_INVOP>:
   3e223:	49 6e 76 61 6c 69 64 20 6f 70 63 6f 64 65 20 00     Invalid opcode .

0003e233 <mDebugTftp_OPERR>:
   3e233:	45 72 72 6f 72 00                                   Error.

0003e239 <mDebugTftp_OPACK>:
   3e239:	41 63 6b 6e 6f 77 6c 65 64 67 65 00                 Acknowledge.

0003e245 <mDebugTftp_DONE>:
   3e245:	46 6c 61 73 68 69 6e 67 20 63 6f 6d 70 6c 65 74     Flashing complet
   3e255:	65 00                                               e.

0003e257 <mDebugTftp_PLEN>:
   3e257:	50 61 63 6b 65 74 20 6c 65 6e 67 74 68 20 61 64     Packet length ad
   3e267:	6a 75 73 74 65 64 20 74 6f 20 00                    justed to .

0003e272 <mDebugTftp_WRADDR>:
   3e272:	57 72 69 74 69 6e 67 20 64 61 74 61 20 66 72 6f     Writing data fro
   3e282:	6d 20 61 64 64 72 65 73 73 20 00                    m address .

0003e28d <mDebugTftp_FULL>:
   3e28d:	46 6c 61 73 68 20 69 73 20 66 75 6c 6c 00           Flash is full.

0003e29b <mDebugTftp_NPORT>:
   3e29b:	43 68 61 6e 67 65 64 20 74 6f 20 70 6f 72 74 20     Changed to port 
	...

0003e2ac <mDebugTftp_OPDATA>:
   3e2ac:	44 61 74 61 20 62 6c 6f 63 6b 00                    Data block.

0003e2b7 <mDebugTftp_OPWRQ>:
   3e2b7:	57 72 69 74 65 20 72 65 71 75 65 73 74 00           Write request.

0003e2c5 <mDebugTftp_OPRRQ>:
   3e2c5:	52 65 61 64 20 72 65 71 75 65 73 74 00              Read request.

0003e2d2 <mDebugTftp_DLEN>:
   3e2d2:	20 61 6e 64 20 64 61 74 61 20 6c 65 6e 67 74 68      and data length
   3e2e2:	20 00                                                .

0003e2e4 <mDebugTftp_OPCODE>:
   3e2e4:	20 77 69 74 68 20 6f 70 63 6f 64 65 20 00            with opcode .

0003e2f2 <mDebugTftp_BLOCK>:
   3e2f2:	54 68 69 73 20 69 73 20 62 6c 6f 63 6b 20 00        This is block .

0003e301 <mDebugTftp_RADDR>:
   3e301:	53 65 74 20 75 70 20 72 65 74 75 72 6e 20 61 64     Set up return ad
   3e311:	64 72 65 73 73 00                                   dress.

0003e317 <mDebugTftp_OVFL>:
   3e317:	4f 76 65 72 66 6c 6f 77 00                          Overflow.

0003e320 <mDebugTftp_START>:
   3e320:	50 72 6f 63 65 73 73 69 6e 67 20 70 61 63 6b 65     Processing packe
   3e330:	74 20 6f 66 20 73 69 7a 65 20 00                    t of size .

0003e33b <mDebugTftp_PREFIX>:
   3e33b:	54 66 74 70 3a 20 00                                Tftp: .

0003e342 <mDebugVald_0x94>:
   3e342:	20 69 6e 73 74 65 61 64 20 6f 66 20 30 78 39 34      instead of 0x94
	...

0003e353 <mDebugVald_0x0C>:
   3e353:	20 69 6e 73 74 65 61 64 20 6f 66 20 30 78 30 43      instead of 0x0C
	...

0003e364 <mDebugVald_WITH>:
   3e364:	20 77 69 74 68 20 00                                 with .

0003e36b <mDebugVald_FAILED>:
   3e36b:	46 61 69 6c 65 64 20 61 74 20 00                    Failed at .

0003e376 <mDebugVald_VALID>:
   3e376:	56 61 6c 69 64 20 69 6d 61 67 65 00                 Valid image.

0003e382 <mDebugVald_PREFIX>:
   3e382:	56 61 6c 64 3a 20 00                                Vald: .

0003e389 <mDebug_HEXPREF>:
   3e389:	30 78 00                                            0x.

0003e38c <mDebug_NEWLINE>:
   3e38c:	0d 0a 00 00                                         ....

0003e390 <__ctors_end>:
   3e390:	11 24       	eor	r1, r1
   3e392:	1f be       	out	0x3f, r1	; 63
   3e394:	cf ef       	ldi	r28, 0xFF	; 255
   3e396:	d1 e2       	ldi	r29, 0x21	; 33
   3e398:	de bf       	out	0x3e, r29	; 62
   3e39a:	cd bf       	out	0x3d, r28	; 61
   3e39c:	01 e0       	ldi	r16, 0x01	; 1
   3e39e:	0c bf       	out	0x3c, r16	; 60

0003e3a0 <__do_copy_data>:
   3e3a0:	12 e0       	ldi	r17, 0x02	; 2
   3e3a2:	a0 e0       	ldi	r26, 0x00	; 0
   3e3a4:	b2 e0       	ldi	r27, 0x02	; 2
   3e3a6:	e6 e7       	ldi	r30, 0x76	; 118
   3e3a8:	f4 ef       	ldi	r31, 0xF4	; 244
   3e3aa:	03 e0       	ldi	r16, 0x03	; 3
   3e3ac:	0b bf       	out	0x3b, r16	; 59
   3e3ae:	02 c0       	rjmp	.+4      	; 0x3e3b4 <__do_copy_data+0x14>
   3e3b0:	07 90       	elpm	r0, Z+
   3e3b2:	0d 92       	st	X+, r0
   3e3b4:	a0 32       	cpi	r26, 0x20	; 32
   3e3b6:	b1 07       	cpc	r27, r17
   3e3b8:	d9 f7       	brne	.-10     	; 0x3e3b0 <__do_copy_data+0x10>

0003e3ba <__do_clear_bss>:
   3e3ba:	12 e0       	ldi	r17, 0x02	; 2
   3e3bc:	a0 e2       	ldi	r26, 0x20	; 32
   3e3be:	b2 e0       	ldi	r27, 0x02	; 2
   3e3c0:	01 c0       	rjmp	.+2      	; 0x3e3c4 <.do_clear_bss_start>

0003e3c2 <.do_clear_bss_loop>:
   3e3c2:	1d 92       	st	X+, r1

0003e3c4 <.do_clear_bss_start>:
   3e3c4:	ac 32       	cpi	r26, 0x2C	; 44
   3e3c6:	b1 07       	cpc	r27, r17
   3e3c8:	e1 f7       	brne	.-8      	; 0x3e3c2 <.do_clear_bss_loop>
   3e3ca:	02 d0       	rcall	.+4      	; 0x3e3d0 <main>
   3e3cc:	0d 94 39 fa 	jmp	0x3f472	; 0x3f472 <_exit>

0003e3d0 <main>:
   3e3d0:	14 be       	out	0x34, r1	; 52
   3e3d2:	88 e1       	ldi	r24, 0x18	; 24
   3e3d4:	0f b6       	in	r0, 0x3f	; 63
   3e3d6:	f8 94       	cli
   3e3d8:	80 93 60 00 	sts	0x0060, r24
   3e3dc:	10 92 60 00 	sts	0x0060, r1
   3e3e0:	0f be       	out	0x3f, r0	; 63
   3e3e2:	2f ef       	ldi	r18, 0xFF	; 255
   3e3e4:	83 ec       	ldi	r24, 0xC3	; 195
   3e3e6:	99 e0       	ldi	r25, 0x09	; 9
   3e3e8:	21 50       	subi	r18, 0x01	; 1
   3e3ea:	80 40       	sbci	r24, 0x00	; 0
   3e3ec:	90 40       	sbci	r25, 0x00	; 0
   3e3ee:	e1 f7       	brne	.-8      	; 0x3e3e8 <main+0x18>
   3e3f0:	00 c0       	rjmp	.+0      	; 0x3e3f2 <main+0x22>
   3e3f2:	00 00       	nop
   3e3f4:	11 24       	eor	r1, r1
   3e3f6:	85 e0       	ldi	r24, 0x05	; 5
   3e3f8:	80 93 81 00 	sts	0x0081, r24
   3e3fc:	80 e0       	ldi	r24, 0x00	; 0
   3e3fe:	90 e0       	ldi	r25, 0x00	; 0
   3e400:	0f 94 23 fa 	call	0x3f446	; 0x3f446 <__eerd_byte_m2560>
   3e404:	88 23       	and	r24, r24
   3e406:	29 f0       	breq	.+10     	; 0x3e412 <main+0x42>
   3e408:	60 e0       	ldi	r22, 0x00	; 0
   3e40a:	80 e0       	ldi	r24, 0x00	; 0
   3e40c:	90 e0       	ldi	r25, 0x00	; 0
   3e40e:	0f 94 2b fa 	call	0x3f456	; 0x3f456 <__eewr_byte_m2560>
   3e412:	81 e0       	ldi	r24, 0x01	; 1
   3e414:	90 e0       	ldi	r25, 0x00	; 0
   3e416:	0f 94 23 fa 	call	0x3f446	; 0x3f446 <__eerd_byte_m2560>
   3e41a:	84 30       	cpi	r24, 0x04	; 4
   3e41c:	29 f0       	breq	.+10     	; 0x3e428 <main+0x58>
   3e41e:	64 e0       	ldi	r22, 0x04	; 4
   3e420:	81 e0       	ldi	r24, 0x01	; 1
   3e422:	90 e0       	ldi	r25, 0x00	; 0
   3e424:	0f 94 2b fa 	call	0x3f456	; 0x3f456 <__eewr_byte_m2560>
   3e428:	ef d4       	rcall	.+2526   	; 0x3ee08 <serialInit>
   3e42a:	63 ef       	ldi	r22, 0xF3	; 243
   3e42c:	70 ee       	ldi	r23, 0xE0	; 224
   3e42e:	8d e1       	ldi	r24, 0x1D	; 29
   3e430:	91 ee       	ldi	r25, 0xE1	; 225
   3e432:	9a d4       	rcall	.+2356   	; 0x3ed68 <tracePGMln>
   3e434:	97 d0       	rcall	.+302    	; 0x3e564 <spiInit>
   3e436:	a3 d0       	rcall	.+326    	; 0x3e57e <netInit>
   3e438:	16 d3       	rcall	.+1580   	; 0x3ea66 <tftpInit>
   3e43a:	10 92 2a 02 	sts	0x022A, r1
   3e43e:	10 92 2b 02 	sts	0x022B, r1
   3e442:	c3 e0       	ldi	r28, 0x03	; 3
   3e444:	c1 2c       	mov	r12, r1
   3e446:	d1 2c       	mov	r13, r1
   3e448:	76 01       	movw	r14, r12
   3e44a:	80 91 2a 02 	lds	r24, 0x022A
   3e44e:	88 23       	and	r24, r24
   3e450:	29 f0       	breq	.+10     	; 0x3e45c <main+0x8c>
   3e452:	80 91 2b 02 	lds	r24, 0x022B
   3e456:	88 23       	and	r24, r24
   3e458:	49 f0       	breq	.+18     	; 0x3e46c <main+0x9c>
   3e45a:	04 c0       	rjmp	.+8      	; 0x3e464 <main+0x94>
   3e45c:	36 d3       	rcall	.+1644   	; 0x3eaca <tftpPoll>
   3e45e:	81 11       	cpse	r24, r1
   3e460:	f8 cf       	rjmp	.-16     	; 0x3e452 <main+0x82>
   3e462:	1d c0       	rjmp	.+58     	; 0x3e49e <main+0xce>
   3e464:	2c d5       	rcall	.+2648   	; 0x3eebe <timedOut>
   3e466:	81 11       	cpse	r24, r1
   3e468:	05 c0       	rjmp	.+10     	; 0x3e474 <main+0xa4>
   3e46a:	17 c0       	rjmp	.+46     	; 0x3e49a <main+0xca>
   3e46c:	f3 d4       	rcall	.+2534   	; 0x3ee54 <serialPoll>
   3e46e:	81 11       	cpse	r24, r1
   3e470:	f9 cf       	rjmp	.-14     	; 0x3e464 <main+0x94>
   3e472:	15 c0       	rjmp	.+42     	; 0x3e49e <main+0xce>
   3e474:	82 e0       	ldi	r24, 0x02	; 2
   3e476:	90 e0       	ldi	r25, 0x00	; 0
   3e478:	e6 d7       	rcall	.+4044   	; 0x3f446 <__eerd_byte_m2560>
   3e47a:	8e 3e       	cpi	r24, 0xEE	; 238
   3e47c:	81 f0       	breq	.+32     	; 0x3e49e <main+0xce>
   3e47e:	80 91 2b 02 	lds	r24, 0x022B
   3e482:	81 30       	cpi	r24, 0x01	; 1
   3e484:	51 f4       	brne	.+20     	; 0x3e49a <main+0xca>
   3e486:	f6 01       	movw	r30, r12
   3e488:	e0 92 5b 00 	sts	0x005B, r14
   3e48c:	c0 93 57 00 	sts	0x0057, r28
   3e490:	e8 95       	spm
   3e492:	e9 d2       	rcall	.+1490   	; 0x3ea66 <tftpInit>
   3e494:	0b d5       	rcall	.+2582   	; 0x3eeac <resetTick>
   3e496:	10 92 2b 02 	sts	0x022B, r1
   3e49a:	e7 d4       	rcall	.+2510   	; 0x3ee6a <updateLed>
   3e49c:	d6 cf       	rjmp	.-84     	; 0x3e44a <main+0x7a>
   3e49e:	64 ee       	ldi	r22, 0xE4	; 228
   3e4a0:	70 ee       	ldi	r23, 0xE0	; 224
   3e4a2:	8d e1       	ldi	r24, 0x1D	; 29
   3e4a4:	91 ee       	ldi	r25, 0xE1	; 225
   3e4a6:	60 d4       	rcall	.+2240   	; 0x3ed68 <tracePGMln>
   3e4a8:	ee 27       	eor	r30, r30
   3e4aa:	ff 27       	eor	r31, r31
   3e4ac:	09 94       	ijmp
   3e4ae:	80 e0       	ldi	r24, 0x00	; 0
   3e4b0:	90 e0       	ldi	r25, 0x00	; 0

0003e4b2 <__bad_interrupt>:
   3e4b2:	a6 cd       	rjmp	.-1204   	; 0x3e000 <__vectors>

0003e4b4 <spiWriteReg>:
		tracenum(address);
		tracePGM(mDebugSpi_COMMA);
		tracenum(value);
	)

	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
   3e4b4:	20 e5       	ldi	r18, 0x50	; 80
   3e4b6:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3e4b8:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_WRITE;
   3e4ba:	20 ef       	ldi	r18, 0xF0	; 240
   3e4bc:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e4be:	0d b4       	in	r0, 0x2d	; 45
   3e4c0:	07 fe       	sbrs	r0, 7
   3e4c2:	fd cf       	rjmp	.-6      	; 0x3e4be <spiWriteReg+0xa>

	SPDR = address >> 8;
   3e4c4:	29 2f       	mov	r18, r25
   3e4c6:	33 27       	eor	r19, r19
   3e4c8:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e4ca:	0d b4       	in	r0, 0x2d	; 45
   3e4cc:	07 fe       	sbrs	r0, 7
   3e4ce:	fd cf       	rjmp	.-6      	; 0x3e4ca <spiWriteReg+0x16>

	SPDR = address & 0xff;
   3e4d0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3e4d2:	0d b4       	in	r0, 0x2d	; 45
   3e4d4:	07 fe       	sbrs	r0, 7
   3e4d6:	fd cf       	rjmp	.-6      	; 0x3e4d2 <spiWriteReg+0x1e>

	SPDR = value;
   3e4d8:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
   3e4da:	0d b4       	in	r0, 0x2d	; 45
   3e4dc:	07 fe       	sbrs	r0, 7
   3e4de:	fd cf       	rjmp	.-6      	; 0x3e4da <spiWriteReg+0x26>

	SS_HIGH();
   3e4e0:	2c 9a       	sbi	0x05, 4	; 5
	SPCR = 0; // Turn off SPI
   3e4e2:	1c bc       	out	0x2c, r1	; 44
   3e4e4:	08 95       	ret

0003e4e6 <spiWriteWord>:
}

void spiWriteWord(uint16_t address, uint16_t value)
{
   3e4e6:	0f 93       	push	r16
   3e4e8:	1f 93       	push	r17
   3e4ea:	cf 93       	push	r28
   3e4ec:	df 93       	push	r29
   3e4ee:	8c 01       	movw	r16, r24
   3e4f0:	eb 01       	movw	r28, r22
	// Write uint16_t to Ethernet controller
	spiWriteReg(address++, value >> 8);
   3e4f2:	67 2f       	mov	r22, r23
   3e4f4:	77 27       	eor	r23, r23
   3e4f6:	de df       	rcall	.-68     	; 0x3e4b4 <spiWriteReg>
   3e4f8:	6c 2f       	mov	r22, r28
	spiWriteReg(address, value & 0xff);
   3e4fa:	c8 01       	movw	r24, r16
   3e4fc:	01 96       	adiw	r24, 0x01	; 1
   3e4fe:	df 91       	pop	r29
}
   3e500:	cf 91       	pop	r28
   3e502:	1f 91       	pop	r17
   3e504:	0f 91       	pop	r16
   3e506:	d6 cf       	rjmp	.-84     	; 0x3e4b4 <spiWriteReg>

0003e508 <spiReadReg>:
	)
	#endif

	uint8_t returnValue;

	SPCR = _BV(SPE) | _BV(MSTR);
   3e508:	20 e5       	ldi	r18, 0x50	; 80
   3e50a:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
   3e50c:	2c 98       	cbi	0x05, 4	; 5

	SPDR = SPI_READ;
   3e50e:	2f e0       	ldi	r18, 0x0F	; 15
   3e510:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e512:	0d b4       	in	r0, 0x2d	; 45
   3e514:	07 fe       	sbrs	r0, 7
   3e516:	fd cf       	rjmp	.-6      	; 0x3e512 <spiReadReg+0xa>

	SPDR = address >> 8;
   3e518:	29 2f       	mov	r18, r25
   3e51a:	33 27       	eor	r19, r19
   3e51c:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
   3e51e:	0d b4       	in	r0, 0x2d	; 45
   3e520:	07 fe       	sbrs	r0, 7
   3e522:	fd cf       	rjmp	.-6      	; 0x3e51e <spiReadReg+0x16>

	SPDR = address & 0xff;
   3e524:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
   3e526:	0d b4       	in	r0, 0x2d	; 45
   3e528:	07 fe       	sbrs	r0, 7
   3e52a:	fd cf       	rjmp	.-6      	; 0x3e526 <spiReadReg+0x1e>

	SPDR = 0;
   3e52c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
   3e52e:	0d b4       	in	r0, 0x2d	; 45
   3e530:	07 fe       	sbrs	r0, 7
   3e532:	fd cf       	rjmp	.-6      	; 0x3e52e <spiReadReg+0x26>

	SS_HIGH();
   3e534:	2c 9a       	sbi	0x05, 4	; 5
	returnValue = SPDR;
   3e536:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
   3e538:	1c bc       	out	0x2c, r1	; 44

	return(returnValue);
}
   3e53a:	08 95       	ret

0003e53c <spiReadWord>:

uint16_t spiReadWord(uint16_t address)
{
   3e53c:	1f 93       	push	r17
   3e53e:	cf 93       	push	r28
   3e540:	df 93       	push	r29
   3e542:	ec 01       	movw	r28, r24
	// Read uint16_t from Ethernet controller
	return((spiReadReg(address) << 8) | spiReadReg(address + 1));
   3e544:	e1 df       	rcall	.-62     	; 0x3e508 <spiReadReg>
   3e546:	18 2f       	mov	r17, r24
   3e548:	ce 01       	movw	r24, r28
   3e54a:	01 96       	adiw	r24, 0x01	; 1
   3e54c:	dd df       	rcall	.-70     	; 0x3e508 <spiReadReg>
   3e54e:	21 2f       	mov	r18, r17
   3e550:	30 e0       	ldi	r19, 0x00	; 0
   3e552:	32 2f       	mov	r19, r18
   3e554:	22 27       	eor	r18, r18
   3e556:	a9 01       	movw	r20, r18
   3e558:	48 2b       	or	r20, r24
}
   3e55a:	ca 01       	movw	r24, r20
   3e55c:	df 91       	pop	r29
   3e55e:	cf 91       	pop	r28
   3e560:	1f 91       	pop	r17
   3e562:	08 95       	ret

0003e564 <spiInit>:
	 * At this stage all pins are set to HIGH. This in fact DISABLES SPI for both Ethernet and SD.
	 * SS pin for ethernet is pulled low just in time for reading or writing data inside those
	 * functions. */

	/** Set SPI pins high */
	SPI_PORT = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
   3e564:	8f e0       	ldi	r24, 0x0F	; 15
   3e566:	85 b9       	out	0x05, r24	; 5
	/** Set SPI pins as output */
	SPI_DDR = _BV(SCK) | _BV(MOSI) | _BV(SS);
   3e568:	87 e0       	ldi	r24, 0x07	; 7
   3e56a:	84 b9       	out	0x04, r24	; 4

	#if (ETH_SS != SS)
	/** Initialize extra SS pin used in some boards (mega) */
	/** Set ethernet SS high */
	ETH_PORT |= _BV(ETH_SS);
   3e56c:	2c 9a       	sbi	0x05, 4	; 5
	/** Set ethernet SS as output */
	ETH_DDR |= _BV(ETH_SS);
   3e56e:	24 9a       	sbi	0x04, 4	; 4
	#endif

	/** Disable SD card */
	/** Set SD SS pin high */
	SD_PORT |= _BV(SD_SS);
   3e570:	a5 9a       	sbi	0x14, 5	; 20
	/** Set SD SS pin as output */
	SD_DDR |= _BV(SD_SS);
   3e572:	9d 9a       	sbi	0x13, 5	; 19

	#if (LED != SCK)
	/** Set up pins to flash the onboard led */
	/** Set led pin to high */
	LED_PORT |= _BV(LED);
   3e574:	2f 9a       	sbi	0x05, 7	; 5
	/** Set led pin as output */
	LED_DDR |= _BV(LED);
   3e576:	27 9a       	sbi	0x04, 7	; 4
	#endif

	/** Set up SPI
	 ** Set the Double SPI Speed Bit */
	SPSR = (1 << SPI2X);
   3e578:	81 e0       	ldi	r24, 0x01	; 1
   3e57a:	8d bd       	out	0x2d, r24	; 45
   3e57c:	08 95       	ret

0003e57e <netInit>:
	0x55          // TMSR Tx Memory Size Register, 2K per socket
};


void netInit(void)
{
   3e57e:	0f 93       	push	r16
   3e580:	1f 93       	push	r17
   3e582:	cf 93       	push	r28
   3e584:	df 93       	push	r29
	uint8_t i;

	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
   3e586:	83 e0       	ldi	r24, 0x03	; 3
   3e588:	90 e0       	ldi	r25, 0x00	; 0
   3e58a:	5d d7       	rcall	.+3770   	; 0x3f446 <__eerd_byte_m2560>
   3e58c:	85 35       	cpi	r24, 0x55	; 85
   3e58e:	a9 f4       	brne	.+42     	; 0x3e5ba <netInit+0x3c>
   3e590:	84 e0       	ldi	r24, 0x04	; 4
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
   3e592:	90 e0       	ldi	r25, 0x00	; 0
   3e594:	58 d7       	rcall	.+3760   	; 0x3f446 <__eerd_byte_m2560>
   3e596:	8a 3a       	cpi	r24, 0xAA	; 170
   3e598:	81 f4       	brne	.+32     	; 0x3e5ba <netInit+0x3c>
   3e59a:	01 e0       	ldi	r16, 0x01	; 1
   3e59c:	12 e0       	ldi	r17, 0x02	; 2
   3e59e:	c5 e0       	ldi	r28, 0x05	; 5
   3e5a0:	d0 e0       	ldi	r29, 0x00	; 0
   3e5a2:	ce 01       	movw	r24, r28
   3e5a4:	50 d7       	rcall	.+3744   	; 0x3f446 <__eerd_byte_m2560>

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
   3e5a6:	f8 01       	movw	r30, r16
   3e5a8:	81 93       	st	Z+, r24
   3e5aa:	8f 01       	movw	r16, r30
   3e5ac:	21 96       	adiw	r28, 0x01	; 1
   3e5ae:	c7 31       	cpi	r28, 0x17	; 23
   3e5b0:	d1 05       	cpc	r29, r1
   3e5b2:	b9 f7       	brne	.-18     	; 0x3e5a2 <netInit+0x24>
	/* Pull in altered network settings, if available,
	 * from AVR EEPROM (if signature bytes are set) */
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {

		for(i = 0; i < EEPROM_SETTINGS_SIZE; i++)
   3e5b4:	64 e7       	ldi	r22, 0x74	; 116
   3e5b6:	71 ee       	ldi	r23, 0xE1	; 225
   3e5b8:	02 c0       	rjmp	.+4      	; 0x3e5be <netInit+0x40>
			registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);

		DBG_NET(tracePGMlnNet(mDebugNet_EEPROM);)
   3e5ba:	62 e6       	ldi	r22, 0x62	; 98
   3e5bc:	71 ee       	ldi	r23, 0xE1	; 225
   3e5be:	84 e8       	ldi	r24, 0x84	; 132

	} DBG_NET(
   3e5c0:	91 ee       	ldi	r25, 0xE1	; 225
   3e5c2:	d2 d3       	rcall	.+1956   	; 0x3ed68 <tracePGMln>
   3e5c4:	67 e5       	ldi	r22, 0x57	; 87
   3e5c6:	71 ee       	ldi	r23, 0xE1	; 225
   3e5c8:	84 e8       	ldi	r24, 0x84	; 132
   3e5ca:	91 ee       	ldi	r25, 0xE1	; 225
		else tracePGMlnNet(mDebugNet_BUILTIN);
	)


	DBG_NET(
   3e5cc:	cd d3       	rcall	.+1946   	; 0x3ed68 <tracePGMln>
   3e5ce:	cf e0       	ldi	r28, 0x0F	; 15
   3e5d0:	d2 e0       	ldi	r29, 0x02	; 2
   3e5d2:	1f e0       	ldi	r17, 0x0F	; 15
   3e5d4:	89 91       	ld	r24, Y+
   3e5d6:	62 e0       	ldi	r22, 0x02	; 2
   3e5d8:	90 e0       	ldi	r25, 0x00	; 0
   3e5da:	f7 d3       	rcall	.+2030   	; 0x3edca <tracehex>
   3e5dc:	12 31       	cpi	r17, 0x12	; 18
   3e5de:	11 f0       	breq	.+4      	; 0x3e5e4 <netInit+0x66>
   3e5e0:	8e e2       	ldi	r24, 0x2E	; 46
   3e5e2:	1f d4       	rcall	.+2110   	; 0x3ee22 <putch>
   3e5e4:	1f 5f       	subi	r17, 0xFF	; 255
   3e5e6:	13 31       	cpi	r17, 0x13	; 19
   3e5e8:	a9 f7       	brne	.-22     	; 0x3e5d4 <netInit+0x56>
   3e5ea:	6c e4       	ldi	r22, 0x4C	; 76
   3e5ec:	71 ee       	ldi	r23, 0xE1	; 225
   3e5ee:	84 e8       	ldi	r24, 0x84	; 132
   3e5f0:	91 ee       	ldi	r25, 0xE1	; 225
   3e5f2:	ba d3       	rcall	.+1908   	; 0x3ed68 <tracePGMln>
   3e5f4:	c5 e0       	ldi	r28, 0x05	; 5
   3e5f6:	d2 e0       	ldi	r29, 0x02	; 2
   3e5f8:	15 e0       	ldi	r17, 0x05	; 5
   3e5fa:	89 91       	ld	r24, Y+
   3e5fc:	62 e0       	ldi	r22, 0x02	; 2
   3e5fe:	90 e0       	ldi	r25, 0x00	; 0
   3e600:	e4 d3       	rcall	.+1992   	; 0x3edca <tracehex>
   3e602:	18 30       	cpi	r17, 0x08	; 8
   3e604:	11 f0       	breq	.+4      	; 0x3e60a <netInit+0x8c>
   3e606:	8e e2       	ldi	r24, 0x2E	; 46
   3e608:	0c d4       	rcall	.+2072   	; 0x3ee22 <putch>
   3e60a:	1f 5f       	subi	r17, 0xFF	; 255
   3e60c:	19 30       	cpi	r17, 0x09	; 9
   3e60e:	a9 f7       	brne	.-22     	; 0x3e5fa <netInit+0x7c>
   3e610:	61 e4       	ldi	r22, 0x41	; 65
   3e612:	71 ee       	ldi	r23, 0xE1	; 225
   3e614:	84 e8       	ldi	r24, 0x84	; 132
   3e616:	91 ee       	ldi	r25, 0xE1	; 225
   3e618:	a7 d3       	rcall	.+1870   	; 0x3ed68 <tracePGMln>
   3e61a:	c1 e0       	ldi	r28, 0x01	; 1
   3e61c:	d2 e0       	ldi	r29, 0x02	; 2
   3e61e:	01 e0       	ldi	r16, 0x01	; 1
   3e620:	89 91       	ld	r24, Y+
   3e622:	62 e0       	ldi	r22, 0x02	; 2
   3e624:	90 e0       	ldi	r25, 0x00	; 0
   3e626:	d1 d3       	rcall	.+1954   	; 0x3edca <tracehex>
   3e628:	04 30       	cpi	r16, 0x04	; 4
   3e62a:	11 f0       	breq	.+4      	; 0x3e630 <netInit+0xb2>
   3e62c:	8e e2       	ldi	r24, 0x2E	; 46
   3e62e:	f9 d3       	rcall	.+2034   	; 0x3ee22 <putch>
   3e630:	0f 5f       	subi	r16, 0xFF	; 255
   3e632:	05 30       	cpi	r16, 0x05	; 5
   3e634:	a9 f7       	brne	.-22     	; 0x3e620 <netInit+0xa2>
   3e636:	66 e3       	ldi	r22, 0x36	; 54
   3e638:	71 ee       	ldi	r23, 0xE1	; 225
   3e63a:	84 e8       	ldi	r24, 0x84	; 132
   3e63c:	91 ee       	ldi	r25, 0xE1	; 225
   3e63e:	94 d3       	rcall	.+1832   	; 0x3ed68 <tracePGMln>
   3e640:	c9 e0       	ldi	r28, 0x09	; 9
   3e642:	d2 e0       	ldi	r29, 0x02	; 2
   3e644:	89 91       	ld	r24, Y+
   3e646:	62 e0       	ldi	r22, 0x02	; 2
   3e648:	90 e0       	ldi	r25, 0x00	; 0
   3e64a:	bf d3       	rcall	.+1918   	; 0x3edca <tracehex>
   3e64c:	1e 30       	cpi	r17, 0x0E	; 14
   3e64e:	11 f0       	breq	.+4      	; 0x3e654 <netInit+0xd6>
   3e650:	8e e2       	ldi	r24, 0x2E	; 46
   3e652:	e7 d3       	rcall	.+1998   	; 0x3ee22 <putch>
   3e654:	1f 5f       	subi	r17, 0xFF	; 255
   3e656:	1f 30       	cpi	r17, 0x0F	; 15
   3e658:	a9 f7       	brne	.-22     	; 0x3e644 <netInit+0xc6>
   3e65a:	00 e0       	ldi	r16, 0x00	; 0
   3e65c:	12 e0       	ldi	r17, 0x02	; 2
   3e65e:	c0 e0       	ldi	r28, 0x00	; 0
   3e660:	d0 e0       	ldi	r29, 0x00	; 0
   3e662:	f8 01       	movw	r30, r16
   3e664:	61 91       	ld	r22, Z+
   3e666:	8f 01       	movw	r16, r30
   3e668:	ce 01       	movw	r24, r28
   3e66a:	24 df       	rcall	.-440    	; 0x3e4b4 <spiWriteReg>
   3e66c:	21 96       	adiw	r28, 0x01	; 1
   3e66e:	cc 31       	cpi	r28, 0x1C	; 28
   3e670:	d1 05       	cpc	r29, r1
   3e672:	b9 f7       	brne	.-18     	; 0x3e662 <netInit+0xe4>
   3e674:	64 e2       	ldi	r22, 0x24	; 36
   3e676:	71 ee       	ldi	r23, 0xE1	; 225
   3e678:	84 e8       	ldi	r24, 0x84	; 132
   3e67a:	91 ee       	ldi	r25, 0xE1	; 225
   3e67c:	df 91       	pop	r29
   3e67e:	cf 91       	pop	r28
   3e680:	1f 91       	pop	r17
		}
	)

	/** Configure Wiznet chip. Network settings */
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		spiWriteReg(i, registerBuffer[i]);
   3e682:	0f 91       	pop	r16
   3e684:	71 c3       	rjmp	.+1762   	; 0x3ed68 <tracePGMln>

0003e686 <sockInit>:

uint16_t lastPacket = 0, highPacket = 0;


static void sockInit(uint16_t port)
{
   3e686:	cf 93       	push	r28
   3e688:	df 93       	push	r29
   3e68a:	ec 01       	movw	r28, r24
	DBG_TFTP(
   3e68c:	65 ec       	ldi	r22, 0xC5	; 197
   3e68e:	71 ee       	ldi	r23, 0xE1	; 225
   3e690:	8b e3       	ldi	r24, 0x3B	; 59
   3e692:	93 ee       	ldi	r25, 0xE3	; 227
   3e694:	69 d3       	rcall	.+1746   	; 0x3ed68 <tracePGMln>
   3e696:	64 e0       	ldi	r22, 0x04	; 4
   3e698:	ce 01       	movw	r24, r28
   3e69a:	97 d3       	rcall	.+1838   	; 0x3edca <tracehex>
   3e69c:	60 e1       	ldi	r22, 0x10	; 16
   3e69e:	81 e0       	ldi	r24, 0x01	; 1
		tracePGMlnTftp(mDebugTftp_SOCK);
		tracenum(port);
	)

	spiWriteReg(REG_S3_CR, CR_CLOSE);
   3e6a0:	97 e0       	ldi	r25, 0x07	; 7
   3e6a2:	08 df       	rcall	.-496    	; 0x3e4b4 <spiWriteReg>
   3e6a4:	be 01       	movw	r22, r28
   3e6a6:	84 e0       	ldi	r24, 0x04	; 4
   3e6a8:	97 e0       	ldi	r25, 0x07	; 7

	do {
		// Write TFTP Port
		spiWriteWord(REG_S3_PORT0, port);
   3e6aa:	1d df       	rcall	.-454    	; 0x3e4e6 <spiWriteWord>
   3e6ac:	62 e0       	ldi	r22, 0x02	; 2
   3e6ae:	80 e0       	ldi	r24, 0x00	; 0
   3e6b0:	97 e0       	ldi	r25, 0x07	; 7
   3e6b2:	00 df       	rcall	.-512    	; 0x3e4b4 <spiWriteReg>
		// Write mode
		spiWriteReg(REG_S3_MR, MR_UDP);
   3e6b4:	61 e0       	ldi	r22, 0x01	; 1
   3e6b6:	81 e0       	ldi	r24, 0x01	; 1
   3e6b8:	97 e0       	ldi	r25, 0x07	; 7
   3e6ba:	fc de       	rcall	.-520    	; 0x3e4b4 <spiWriteReg>
   3e6bc:	83 e0       	ldi	r24, 0x03	; 3
		// Open Socket
		spiWriteReg(REG_S3_CR, CR_OPEN);
   3e6be:	97 e0       	ldi	r25, 0x07	; 7
   3e6c0:	23 df       	rcall	.-442    	; 0x3e508 <spiReadReg>
   3e6c2:	82 32       	cpi	r24, 0x22	; 34
   3e6c4:	21 f0       	breq	.+8      	; 0x3e6ce <sockInit+0x48>
   3e6c6:	60 e1       	ldi	r22, 0x10	; 16

		// Read Status
		if(spiReadReg(REG_S3_SR) != SOCK_UDP)
   3e6c8:	81 e0       	ldi	r24, 0x01	; 1
   3e6ca:	97 e0       	ldi	r25, 0x07	; 7
   3e6cc:	f3 de       	rcall	.-538    	; 0x3e4b4 <spiWriteReg>
   3e6ce:	83 e0       	ldi	r24, 0x03	; 3
   3e6d0:	97 e0       	ldi	r25, 0x07	; 7
   3e6d2:	1a df       	rcall	.-460    	; 0x3e508 <spiReadReg>
			// Close Socket if it wasn't initialized correctly
			spiWriteReg(REG_S3_CR, CR_CLOSE);
   3e6d4:	82 32       	cpi	r24, 0x22	; 34
   3e6d6:	31 f7       	brne	.-52     	; 0x3e6a4 <sockInit+0x1e>
   3e6d8:	df 91       	pop	r29
   3e6da:	cf 91       	pop	r28
   3e6dc:	08 95       	ret

0003e6de <processPacket>:
#if (DEBUG_TFTP > 0)
static uint8_t processPacket(uint16_t packetSize)
#else
static uint8_t processPacket(void)
#endif
{
   3e6de:	2f 92       	push	r2
   3e6e0:	3f 92       	push	r3
   3e6e2:	4f 92       	push	r4
   3e6e4:	5f 92       	push	r5
   3e6e6:	6f 92       	push	r6
   3e6e8:	7f 92       	push	r7
   3e6ea:	8f 92       	push	r8
   3e6ec:	9f 92       	push	r9
   3e6ee:	af 92       	push	r10
   3e6f0:	bf 92       	push	r11
   3e6f2:	cf 92       	push	r12
   3e6f4:	df 92       	push	r13
   3e6f6:	ef 92       	push	r14
   3e6f8:	ff 92       	push	r15
   3e6fa:	0f 93       	push	r16
   3e6fc:	1f 93       	push	r17
   3e6fe:	cf 93       	push	r28
   3e700:	df 93       	push	r29
   3e702:	cd b7       	in	r28, 0x3d	; 61
   3e704:	de b7       	in	r29, 0x3e	; 62
   3e706:	cc 50       	subi	r28, 0x0C	; 12
   3e708:	d2 40       	sbci	r29, 0x02	; 2
   3e70a:	de bf       	out	0x3e, r29	; 62
   3e70c:	cd bf       	out	0x3d, r28	; 61
   3e70e:	8c 01       	movw	r16, r24
	address_t writeAddr;
	// Transfer entire packet to RAM
	uint8_t* bufPtr = buffer;
	uint16_t count;

	DBG_TFTP(
   3e710:	60 e2       	ldi	r22, 0x20	; 32
   3e712:	73 ee       	ldi	r23, 0xE3	; 227
   3e714:	8b e3       	ldi	r24, 0x3B	; 59
   3e716:	93 ee       	ldi	r25, 0xE3	; 227
   3e718:	27 d3       	rcall	.+1614   	; 0x3ed68 <tracePGMln>
   3e71a:	64 e0       	ldi	r22, 0x04	; 4
   3e71c:	c8 01       	movw	r24, r16
   3e71e:	55 d3       	rcall	.+1706   	; 0x3edca <tracehex>
   3e720:	01 15       	cp	r16, r1
   3e722:	18 40       	sbci	r17, 0x08	; 8
   3e724:	28 f0       	brcs	.+10     	; 0x3e730 <processPacket+0x52>
   3e726:	67 e1       	ldi	r22, 0x17	; 23
   3e728:	73 ee       	ldi	r23, 0xE3	; 227
   3e72a:	8b e3       	ldi	r24, 0x3B	; 59
   3e72c:	93 ee       	ldi	r25, 0xE3	; 227
   3e72e:	1c d3       	rcall	.+1592   	; 0x3ed68 <tracePGMln>
   3e730:	88 e2       	ldi	r24, 0x28	; 40
   3e732:	97 e0       	ldi	r25, 0x07	; 7
   3e734:	03 df       	rcall	.-506    	; 0x3e53c <spiReadWord>

		DBG_BTN(button();)
	)

	// Read data from chip to buffer
	readPointer = spiReadWord(REG_S3_RX_RD0);
   3e736:	00 97       	sbiw	r24, 0x00	; 0
   3e738:	11 f4       	brne	.+4      	; 0x3e73e <processPacket+0x60>
   3e73a:	80 e0       	ldi	r24, 0x00	; 0
   3e73c:	98 e7       	ldi	r25, 0x78	; 120
	DBG_TFTP_EX(
		tracePGMlnTftp(mDebugTftp_RPTR);
		tracenum(readPointer);
	)

	if(readPointer == 0) readPointer += S3_RX_START;
   3e73e:	8e 01       	movw	r16, r28
   3e740:	0f 5f       	subi	r16, 0xFF	; 255
   3e742:	1f 4f       	sbci	r17, 0xFF	; 255
   3e744:	6e 01       	movw	r12, r28
   3e746:	e3 ef       	ldi	r30, 0xF3	; 243
   3e748:	ce 1a       	sub	r12, r30
   3e74a:	ed ef       	ldi	r30, 0xFD	; 253
   3e74c:	de 0a       	sbc	r13, r30
   3e74e:	58 01       	movw	r10, r16
   3e750:	0c 15       	cp	r16, r12
   3e752:	1d 05       	cpc	r17, r13
   3e754:	89 f0       	breq	.+34     	; 0x3e778 <processPacket+0x9a>
   3e756:	7c 01       	movw	r14, r24

	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
   3e758:	ff ef       	ldi	r31, 0xFF	; 255
   3e75a:	ef 1a       	sub	r14, r31
   3e75c:	ff 0a       	sbc	r15, r31
				tracePGMlnTftp(mDebugTftp_RPOS);
				tracenum(readPointer);
			}
		)

		*bufPtr++ = spiReadReg(readPointer++);
   3e75e:	d4 de       	rcall	.-600    	; 0x3e508 <spiReadReg>
   3e760:	f8 01       	movw	r30, r16
   3e762:	81 93       	st	Z+, r24
   3e764:	8f 01       	movw	r16, r30
   3e766:	e1 14       	cp	r14, r1
   3e768:	f0 e8       	ldi	r31, 0x80	; 128
   3e76a:	ff 06       	cpc	r15, r31
   3e76c:	19 f4       	brne	.+6      	; 0x3e774 <processPacket+0x96>
   3e76e:	e1 2c       	mov	r14, r1

		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
   3e770:	e8 e7       	ldi	r30, 0x78	; 120
   3e772:	fe 2e       	mov	r15, r30
   3e774:	c7 01       	movw	r24, r14
   3e776:	ec cf       	rjmp	.-40     	; 0x3e750 <processPacket+0x72>
   3e778:	bc 01       	movw	r22, r24
   3e77a:	88 e2       	ldi	r24, 0x28	; 40
   3e77c:	97 e0       	ldi	r25, 0x07	; 7
   3e77e:	b3 de       	rcall	.-666    	; 0x3e4e6 <spiWriteWord>
   3e780:	60 e4       	ldi	r22, 0x40	; 64
	}

	spiWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
   3e782:	81 e0       	ldi	r24, 0x01	; 1
   3e784:	97 e0       	ldi	r25, 0x07	; 7
   3e786:	96 de       	rcall	.-724    	; 0x3e4b4 <spiWriteReg>
   3e788:	81 e0       	ldi	r24, 0x01	; 1
   3e78a:	97 e0       	ldi	r25, 0x07	; 7
	spiWriteReg(REG_S3_CR, CR_RECV);
   3e78c:	bd de       	rcall	.-646    	; 0x3e508 <spiReadReg>
   3e78e:	81 11       	cpse	r24, r1
   3e790:	fb cf       	rjmp	.-10     	; 0x3e788 <processPacket+0xaa>
   3e792:	75 01       	movw	r14, r10
   3e794:	0c e0       	ldi	r16, 0x0C	; 12

	while(spiReadReg(REG_S3_CR));
   3e796:	17 e0       	ldi	r17, 0x07	; 7
   3e798:	f7 01       	movw	r30, r14
   3e79a:	61 91       	ld	r22, Z+
   3e79c:	7f 01       	movw	r14, r30
   3e79e:	c8 01       	movw	r24, r16
   3e7a0:	89 de       	rcall	.-750    	; 0x3e4b4 <spiWriteReg>
   3e7a2:	0f 5f       	subi	r16, 0xFF	; 255
   3e7a4:	1f 4f       	sbci	r17, 0xFF	; 255
   3e7a6:	02 31       	cpi	r16, 0x12	; 18
	)

	// Set up return IP address and port
	uint8_t i;

	for(i = 0; i < 6; i++) spiWriteReg(REG_S3_DIPR0 + i, buffer[i]);
   3e7a8:	f7 e0       	ldi	r31, 0x07	; 7
   3e7aa:	1f 07       	cpc	r17, r31
   3e7ac:	a9 f7       	brne	.-22     	; 0x3e798 <processPacket+0xba>
   3e7ae:	61 e0       	ldi	r22, 0x01	; 1
   3e7b0:	73 ee       	ldi	r23, 0xE3	; 227
   3e7b2:	8b e3       	ldi	r24, 0x3B	; 59
   3e7b4:	93 ee       	ldi	r25, 0xE3	; 227
   3e7b6:	d8 d2       	rcall	.+1456   	; 0x3ed68 <tracePGMln>
   3e7b8:	8f 80       	ldd	r8, Y+7	; 0x07
   3e7ba:	91 2c       	mov	r9, r1
   3e7bc:	98 2c       	mov	r9, r8
   3e7be:	88 24       	eor	r8, r8

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RADDR);)
   3e7c0:	88 85       	ldd	r24, Y+8	; 0x08
   3e7c2:	88 0e       	add	r8, r24
   3e7c4:	91 1c       	adc	r9, r1
   3e7c6:	e9 84       	ldd	r14, Y+9	; 0x09
   3e7c8:	f1 2c       	mov	r15, r1
   3e7ca:	fe 2c       	mov	r15, r14

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
   3e7cc:	ee 24       	eor	r14, r14
   3e7ce:	8a 85       	ldd	r24, Y+10	; 0x0a
   3e7d0:	e8 0e       	add	r14, r24
   3e7d2:	f1 1c       	adc	r15, r1
   3e7d4:	cb 84       	ldd	r12, Y+11	; 0x0b
   3e7d6:	d1 2c       	mov	r13, r1
   3e7d8:	dc 2c       	mov	r13, r12
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
   3e7da:	cc 24       	eor	r12, r12
   3e7dc:	8c 85       	ldd	r24, Y+12	; 0x0c
   3e7de:	c8 0e       	add	r12, r24
   3e7e0:	d1 1c       	adc	r13, r1
   3e7e2:	62 ef       	ldi	r22, 0xF2	; 242
   3e7e4:	72 ee       	ldi	r23, 0xE2	; 226
   3e7e6:	8b e3       	ldi	r24, 0x3B	; 59
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
   3e7e8:	93 ee       	ldi	r25, 0xE3	; 227
   3e7ea:	be d2       	rcall	.+1404   	; 0x3ed68 <tracePGMln>
   3e7ec:	64 e0       	ldi	r22, 0x04	; 4
   3e7ee:	c6 01       	movw	r24, r12
   3e7f0:	ec d2       	rcall	.+1496   	; 0x3edca <tracehex>
   3e7f2:	84 ee       	ldi	r24, 0xE4	; 228
   3e7f4:	92 ee       	ldi	r25, 0xE2	; 226

	DBG_TFTP(
   3e7f6:	94 d2       	rcall	.+1320   	; 0x3ed20 <tracePGM>
   3e7f8:	64 e0       	ldi	r22, 0x04	; 4
   3e7fa:	c7 01       	movw	r24, r14
   3e7fc:	e6 d2       	rcall	.+1484   	; 0x3edca <tracehex>
   3e7fe:	82 ed       	ldi	r24, 0xD2	; 210
   3e800:	92 ee       	ldi	r25, 0xE2	; 226
   3e802:	8e d2       	rcall	.+1308   	; 0x3ed20 <tracePGM>
   3e804:	84 01       	movw	r16, r8
   3e806:	04 50       	subi	r16, 0x04	; 4
   3e808:	11 09       	sbc	r17, r1
   3e80a:	64 e0       	ldi	r22, 0x04	; 4
   3e80c:	c8 01       	movw	r24, r16
   3e80e:	dd d2       	rcall	.+1466   	; 0x3edca <tracehex>
   3e810:	23 e0       	ldi	r18, 0x03	; 3
   3e812:	e2 16       	cp	r14, r18
   3e814:	f1 04       	cpc	r15, r1
   3e816:	99 f4       	brne	.+38     	; 0x3e83e <processPacket+0x160>
   3e818:	89 ef       	ldi	r24, 0xF9	; 249
   3e81a:	c8 16       	cp	r12, r24
   3e81c:	81 e0       	ldi	r24, 0x01	; 1
   3e81e:	d8 06       	cpc	r13, r24
   3e820:	60 f4       	brcc	.+24     	; 0x3e83a <processPacket+0x15c>
   3e822:	80 91 20 02 	lds	r24, 0x0220
   3e826:	90 91 21 02 	lds	r25, 0x0221
   3e82a:	c8 16       	cp	r12, r24
   3e82c:	d9 06       	cpc	r13, r25
   3e82e:	28 f0       	brcs	.+10     	; 0x3e83a <processPacket+0x15c>
		tracenum(tftpOpcode);
		tracePGM(mDebugTftp_DLEN);
		tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
	)

	if((tftpOpcode == TFTP_OPCODE_DATA)
   3e830:	01 96       	adiw	r24, 0x01	; 1
   3e832:	8c 15       	cp	r24, r12
   3e834:	9d 05       	cpc	r25, r13
   3e836:	08 f0       	brcs	.+2      	; 0x3e83a <processPacket+0x15c>
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
   3e838:	4c c0       	rjmp	.+152    	; 0x3e8d2 <processPacket+0x1f4>
   3e83a:	e1 2c       	mov	r14, r1
   3e83c:	f1 2c       	mov	r15, r1
   3e83e:	e5 e0       	ldi	r30, 0x05	; 5
   3e840:	8e 16       	cp	r8, r30
   3e842:	e2 e0       	ldi	r30, 0x02	; 2
   3e844:	9e 06       	cpc	r9, r30
   3e846:	08 f0       	brcs	.+2      	; 0x3e84a <processPacket+0x16c>
   3e848:	e5 c0       	rjmp	.+458    	; 0x3ea14 <processPacket+0x336>
   3e84a:	f3 e0       	ldi	r31, 0x03	; 3
   3e84c:	ef 16       	cp	r14, r31
   3e84e:	f1 04       	cpc	r15, r1
   3e850:	09 f4       	brne	.+2      	; 0x3e854 <processPacket+0x176>
   3e852:	45 c0       	rjmp	.+138    	; 0x3e8de <processPacket+0x200>
   3e854:	70 f5       	brcc	.+92     	; 0x3e8b2 <processPacket+0x1d4>
   3e856:	81 e0       	ldi	r24, 0x01	; 1
   3e858:	e8 16       	cp	r14, r24
		tftpOpcode = TFTP_OPCODE_UKN;
   3e85a:	f1 04       	cpc	r15, r1
   3e85c:	b9 f1       	breq	.+110    	; 0x3e8cc <processPacket+0x1ee>

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3e85e:	e2 e0       	ldi	r30, 0x02	; 2
   3e860:	ee 16       	cp	r14, r30
   3e862:	f1 04       	cpc	r15, r1
   3e864:	09 f0       	breq	.+2      	; 0x3e868 <processPacket+0x18a>
   3e866:	d8 c0       	rjmp	.+432    	; 0x3ea18 <processPacket+0x33a>
   3e868:	21 d3       	rcall	.+1602   	; 0x3eeac <resetTick>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3e86a:	67 eb       	ldi	r22, 0xB7	; 183
   3e86c:	72 ee       	ldi	r23, 0xE2	; 226
   3e86e:	8b e3       	ldi	r24, 0x3B	; 59
   3e870:	93 ee       	ldi	r25, 0xE3	; 227
   3e872:	7a d2       	rcall	.+1268   	; 0x3ed68 <tracePGMln>
   3e874:	6f ef       	ldi	r22, 0xFF	; 255
   3e876:	82 e0       	ldi	r24, 0x02	; 2
   3e878:	90 e0       	ldi	r25, 0x00	; 0
   3e87a:	ed d5       	rcall	.+3034   	; 0x3f456 <__eewr_byte_m2560>
   3e87c:	80 91 28 02 	lds	r24, 0x0228
   3e880:	90 91 29 02 	lds	r25, 0x0229
   3e884:	00 df       	rcall	.-512    	; 0x3e686 <sockInit>
   3e886:	6b e9       	ldi	r22, 0x9B	; 155
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
			break;

		case TFTP_OPCODE_WRQ: // Write request
			// Valid WRQ -> reset timer
			resetTick();
   3e888:	72 ee       	ldi	r23, 0xE2	; 226
   3e88a:	8b e3       	ldi	r24, 0x3B	; 59

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPWRQ);)
   3e88c:	93 ee       	ldi	r25, 0xE3	; 227
   3e88e:	6c d2       	rcall	.+1240   	; 0x3ed68 <tracePGMln>
   3e890:	64 e0       	ldi	r22, 0x04	; 4
   3e892:	80 91 28 02 	lds	r24, 0x0228
   3e896:	90 91 29 02 	lds	r25, 0x0229

			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
   3e89a:	97 d2       	rcall	.+1326   	; 0x3edca <tracehex>
   3e89c:	10 92 21 02 	sts	0x0221, r1
   3e8a0:	10 92 20 02 	sts	0x0220, r1

#if defined(RANDOM_TFTP_DATA_PORT)
			sockInit((buffer[4] << 8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
			sockInit(tftpTransferPort);
   3e8a4:	10 92 23 02 	sts	0x0223, r1
   3e8a8:	10 92 22 02 	sts	0x0222, r1
   3e8ac:	42 e0       	ldi	r20, 0x02	; 2
#endif

			DBG_TFTP(
   3e8ae:	94 2e       	mov	r9, r20
   3e8b0:	c2 c0       	rjmp	.+388    	; 0x3ea36 <processPacket+0x358>
   3e8b2:	f4 e0       	ldi	r31, 0x04	; 4
   3e8b4:	ef 16       	cp	r14, r31
   3e8b6:	f1 04       	cpc	r15, r1
   3e8b8:	09 f4       	brne	.+2      	; 0x3e8bc <processPacket+0x1de>
   3e8ba:	a5 c0       	rjmp	.+330    	; 0x3ea06 <processPacket+0x328>
   3e8bc:	25 e0       	ldi	r18, 0x05	; 5
   3e8be:	e2 16       	cp	r14, r18
   3e8c0:	f1 04       	cpc	r15, r1
   3e8c2:	09 f0       	breq	.+2      	; 0x3e8c6 <processPacket+0x1e8>
   3e8c4:	a9 c0       	rjmp	.+338    	; 0x3ea18 <processPacket+0x33a>
   3e8c6:	63 e3       	ldi	r22, 0x33	; 51
#else
				tracenum(tftpTransferPort);
#endif
			)

			lastPacket = highPacket = 0;
   3e8c8:	72 ee       	ldi	r23, 0xE2	; 226
   3e8ca:	9f c0       	rjmp	.+318    	; 0x3ea0a <processPacket+0x32c>
   3e8cc:	65 ec       	ldi	r22, 0xC5	; 197
   3e8ce:	72 ee       	ldi	r23, 0xE2	; 226
   3e8d0:	9c c0       	rjmp	.+312    	; 0x3ea0a <processPacket+0x32c>
   3e8d2:	f5 e0       	ldi	r31, 0x05	; 5
   3e8d4:	8f 16       	cp	r8, r31
   3e8d6:	f2 e0       	ldi	r31, 0x02	; 2
			returnCode = ACK; // Send back acknowledge for packet 0
   3e8d8:	9f 06       	cpc	r9, r31
   3e8da:	08 f0       	brcs	.+2      	; 0x3e8de <processPacket+0x200>
			break;
   3e8dc:	9b c0       	rjmp	.+310    	; 0x3ea14 <processPacket+0x336>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
   3e8de:	e6 d2       	rcall	.+1484   	; 0x3eeac <resetTick>
   3e8e0:	6c ea       	ldi	r22, 0xAC	; 172
   3e8e2:	72 ee       	ldi	r23, 0xE2	; 226
   3e8e4:	8b e3       	ldi	r24, 0x3B	; 59
   3e8e6:	93 ee       	ldi	r25, 0xE3	; 227
   3e8e8:	3f d2       	rcall	.+1150   	; 0x3ed68 <tracePGMln>
   3e8ea:	d0 92 23 02 	sts	0x0223, r13
   3e8ee:	c0 92 22 02 	sts	0x0222, r12
			break;

		// Error signal
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)
   3e8f2:	46 01       	movw	r8, r12
   3e8f4:	81 e0       	ldi	r24, 0x01	; 1
   3e8f6:	88 1a       	sub	r8, r24


	switch(tftpOpcode) {

		case TFTP_OPCODE_RRQ: // Read request
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPRRQ);)
   3e8f8:	91 08       	sbc	r9, r1
   3e8fa:	98 2c       	mov	r9, r8
   3e8fc:	88 24       	eor	r8, r8

	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
   3e8fe:	99 0c       	add	r9, r9
   3e900:	64 01       	movw	r12, r8
   3e902:	e1 2c       	mov	r14, r1
   3e904:	f1 2c       	mov	r15, r1
   3e906:	62 e7       	ldi	r22, 0x72	; 114
   3e908:	72 ee       	ldi	r23, 0xE2	; 226
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			// Valid Data Packet -> reset timer
			resetTick();
   3e90a:	8b e3       	ldi	r24, 0x3B	; 59
   3e90c:	93 ee       	ldi	r25, 0xE3	; 227

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPDATA);)
   3e90e:	2c d2       	rcall	.+1112   	; 0x3ed68 <tracePGMln>
   3e910:	64 e0       	ldi	r22, 0x04	; 4
   3e912:	c4 01       	movw	r24, r8
   3e914:	5a d2       	rcall	.+1204   	; 0x3edca <tracehex>
   3e916:	01 15       	cp	r16, r1
   3e918:	e2 e0       	ldi	r30, 0x02	; 2

			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
			lastPacket = tftpBlock;
   3e91a:	1e 07       	cpc	r17, r30
   3e91c:	18 f4       	brcc	.+6      	; 0x3e924 <processPacket+0x246>
   3e91e:	24 e0       	ldi	r18, 0x04	; 4
   3e920:	92 2e       	mov	r9, r18
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
   3e922:	02 c0       	rjmp	.+4      	; 0x3e928 <processPacket+0x24a>
   3e924:	92 e0       	ldi	r25, 0x02	; 2
   3e926:	99 2e       	mov	r9, r25
   3e928:	00 23       	and	r16, r16
   3e92a:	19 f0       	breq	.+6      	; 0x3e932 <processPacket+0x254>
   3e92c:	0f 5f       	subi	r16, 0xFF	; 255
   3e92e:	1f 4f       	sbci	r17, 0xFF	; 255
   3e930:	fb cf       	rjmp	.-10     	; 0x3e928 <processPacket+0x24a>
   3e932:	67 e5       	ldi	r22, 0x57	; 87
   3e934:	72 ee       	ldi	r23, 0xE2	; 226
				DBG_TFTP(tracePGMlnTftp(mDebugTftp_FULL);)

				returnCode = ERROR_FULL;
			} else {

				DBG_TFTP(
   3e936:	8b e3       	ldi	r24, 0x3B	; 59
   3e938:	93 ee       	ldi	r25, 0xE3	; 227
   3e93a:	16 d2       	rcall	.+1068   	; 0x3ed68 <tracePGMln>
   3e93c:	64 e0       	ldi	r22, 0x04	; 4
   3e93e:	c8 01       	movw	r24, r16
   3e940:	44 d2       	rcall	.+1160   	; 0x3edca <tracehex>
   3e942:	c1 14       	cp	r12, r1
   3e944:	d1 04       	cpc	r13, r1
   3e946:	e1 04       	cpc	r14, r1
   3e948:	f1 04       	cpc	r15, r1
				uint8_t* pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset


				// Set the return code before packetLength gets rounded up
				if(packetLength < TFTP_DATA_SIZE) returnCode = FINAL_ACK;
   3e94a:	19 f4       	brne	.+6      	; 0x3e952 <processPacket+0x274>
   3e94c:	ce 01       	movw	r24, r28
   3e94e:	0d 96       	adiw	r24, 0x0d	; 13
   3e950:	8f d1       	rcall	.+798    	; 0x3ec70 <validImage>
   3e952:	de 01       	movw	r26, r28
   3e954:	1d 96       	adiw	r26, 0x0d	; 13
   3e956:	20 e0       	ldi	r18, 0x00	; 0
				else returnCode = ACK;
   3e958:	30 e0       	ldi	r19, 0x00	; 0
   3e95a:	26 01       	movw	r4, r12

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
   3e95c:	37 01       	movw	r6, r14
   3e95e:	f1 e0       	ldi	r31, 0x01	; 1
   3e960:	5f 1a       	sub	r5, r31
   3e962:	61 08       	sbc	r6, r1
   3e964:	71 08       	sbc	r7, r1

				DBG_TFTP(
   3e966:	f5 e0       	ldi	r31, 0x05	; 5
   3e968:	3f 2e       	mov	r3, r31
   3e96a:	81 e1       	ldi	r24, 0x11	; 17
   3e96c:	28 2e       	mov	r2, r24
   3e96e:	20 17       	cp	r18, r16
   3e970:	31 07       	cpc	r19, r17
   3e972:	08 f0       	brcs	.+2      	; 0x3e976 <processPacket+0x298>
   3e974:	3b c0       	rjmp	.+118    	; 0x3e9ec <processPacket+0x30e>
   3e976:	c7 01       	movw	r24, r14
   3e978:	b6 01       	movw	r22, r12
					tracePGMlnTftp(mDebugTftp_PLEN);
					tracenum(packetLength);
				)

				if(writeAddr == 0) {
   3e97a:	62 0f       	add	r22, r18
   3e97c:	73 1f       	adc	r23, r19
   3e97e:	81 1d       	adc	r24, r1
   3e980:	91 1d       	adc	r25, r1
   3e982:	f5 01       	movw	r30, r10
					// First sector - validate
					if(!validImage(pageBase)) {
   3e984:	e2 0f       	add	r30, r18
   3e986:	f3 1f       	adc	r31, r19
   3e988:	45 85       	ldd	r20, Z+13	; 0x0d
   3e98a:	50 e0       	ldi	r21, 0x00	; 0
   3e98c:	54 2f       	mov	r21, r20
   3e98e:	44 27       	eor	r20, r20
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e990:	ec 91       	ld	r30, X
   3e992:	4e 2b       	or	r20, r30
					)

					offset += 2;

					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3e994:	88 24       	eor	r8, r8
   3e996:	83 94       	inc	r8
   3e998:	0a 01       	movw	r0, r20
   3e99a:	fb 01       	movw	r30, r22
   3e99c:	80 93 5b 00 	sts	0x005B, r24
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3e9a0:	80 92 57 00 	sts	0x0057, r8
						boot_spm_busy_wait();
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3e9a4:	e8 95       	spm
   3e9a6:	11 24       	eor	r1, r1
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
   3e9a8:	2e 5f       	subi	r18, 0xFE	; 254
   3e9aa:	3f 4f       	sbci	r19, 0xFF	; 255
   3e9ac:	21 11       	cpse	r18, r1
   3e9ae:	1c c0       	rjmp	.+56     	; 0x3e9e8 <processPacket+0x30a>
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
   3e9b0:	b3 01       	movw	r22, r6
   3e9b2:	a2 01       	movw	r20, r4
   3e9b4:	42 0f       	add	r20, r18
   3e9b6:	53 1f       	adc	r21, r19
   3e9b8:	61 1d       	adc	r22, r1
   3e9ba:	71 1d       	adc	r23, r1
   3e9bc:	83 e0       	ldi	r24, 0x03	; 3
   3e9be:	fa 01       	movw	r30, r20
   3e9c0:	60 93 5b 00 	sts	0x005B, r22
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
   3e9c4:	80 93 57 00 	sts	0x0057, r24
   3e9c8:	e8 95       	spm
   3e9ca:	07 b6       	in	r0, 0x37	; 55
   3e9cc:	00 fc       	sbrc	r0, 0
					boot_page_fill(writeAddr + offset, writeValue);
   3e9ce:	fd cf       	rjmp	.-6      	; 0x3e9ca <processPacket+0x2ec>
   3e9d0:	fa 01       	movw	r30, r20
   3e9d2:	60 93 5b 00 	sts	0x005B, r22
   3e9d6:	30 92 57 00 	sts	0x0057, r3
   3e9da:	e8 95       	spm
   3e9dc:	07 b6       	in	r0, 0x37	; 55
   3e9de:	00 fc       	sbrc	r0, 0
   3e9e0:	fd cf       	rjmp	.-6      	; 0x3e9dc <processPacket+0x2fe>
							tracePGM(mDebugTftp_OFFSET);
							tracenum(writeAddr + offset);
						}
					)

					offset += 2;
   3e9e2:	20 92 57 00 	sts	0x0057, r2

					if(offset % SPM_PAGESIZE == 0) {
   3e9e6:	e8 95       	spm
   3e9e8:	12 96       	adiw	r26, 0x02	; 2
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
   3e9ea:	c1 cf       	rjmp	.-126    	; 0x3e96e <processPacket+0x290>
   3e9ec:	e4 e0       	ldi	r30, 0x04	; 4
   3e9ee:	9e 12       	cpse	r9, r30
   3e9f0:	22 c0       	rjmp	.+68     	; 0x3ea36 <processPacket+0x358>
   3e9f2:	65 e4       	ldi	r22, 0x45	; 69
   3e9f4:	72 ee       	ldi	r23, 0xE2	; 226
   3e9f6:	8b e3       	ldi	r24, 0x3B	; 59
   3e9f8:	93 ee       	ldi	r25, 0xE3	; 227
   3e9fa:	b6 d1       	rcall	.+876    	; 0x3ed68 <tracePGMln>
   3e9fc:	6e ee       	ldi	r22, 0xEE	; 238
   3e9fe:	82 e0       	ldi	r24, 0x02	; 2
   3ea00:	90 e0       	ldi	r25, 0x00	; 0
   3ea02:	29 d5       	rcall	.+2642   	; 0x3f456 <__eewr_byte_m2560>
						boot_spm_busy_wait();
   3ea04:	18 c0       	rjmp	.+48     	; 0x3ea36 <processPacket+0x358>
   3ea06:	69 e3       	ldi	r22, 0x39	; 57
   3ea08:	72 ee       	ldi	r23, 0xE2	; 226
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
   3ea0a:	8b e3       	ldi	r24, 0x3B	; 59
   3ea0c:	93 ee       	ldi	r25, 0xE3	; 227
   3ea0e:	ac d1       	rcall	.+856    	; 0x3ed68 <tracePGMln>
   3ea10:	91 2c       	mov	r9, r1
   3ea12:	11 c0       	rjmp	.+34     	; 0x3ea36 <processPacket+0x358>
   3ea14:	e1 2c       	mov	r14, r1
						boot_spm_busy_wait();
   3ea16:	f1 2c       	mov	r15, r1
   3ea18:	63 e2       	ldi	r22, 0x23	; 35
   3ea1a:	72 ee       	ldi	r23, 0xE2	; 226
#if defined(RWWSRE)
						// Reenable read access to flash
						boot_rww_enable();
   3ea1c:	8b e3       	ldi	r24, 0x3B	; 59
   3ea1e:	93 ee       	ldi	r25, 0xE3	; 227
   3ea20:	a3 d1       	rcall	.+838    	; 0x3ed68 <tracePGMln>
   3ea22:	64 e0       	ldi	r22, 0x04	; 4
   3ea24:	c7 01       	movw	r24, r14
#endif
					}
				}

				if(returnCode == FINAL_ACK) {
   3ea26:	d1 d1       	rcall	.+930    	; 0x3edca <tracehex>
   3ea28:	80 91 28 02 	lds	r24, 0x0228
					// Flash is complete
					// Hand over to application

					DBG_TFTP(tracePGMlnTftp(mDebugTftp_DONE);)
   3ea2c:	90 91 29 02 	lds	r25, 0x0229
   3ea30:	2a de       	rcall	.-940    	; 0x3e686 <sockInit>
   3ea32:	99 24       	eor	r9, r9
   3ea34:	93 94       	inc	r9
   3ea36:	89 2d       	mov	r24, r9

					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3ea38:	c4 5f       	subi	r28, 0xF4	; 244
   3ea3a:	dd 4f       	sbci	r29, 0xFD	; 253
   3ea3c:	de bf       	out	0x3e, r29	; 62
   3ea3e:	cd bf       	out	0x3d, r28	; 61
   3ea40:	df 91       	pop	r29
   3ea42:	cf 91       	pop	r28
			break;

		// Acknowledgment
		case TFTP_OPCODE_ACK:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPACK);)
   3ea44:	1f 91       	pop	r17
   3ea46:	0f 91       	pop	r16
			break;

		// Error signal
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)
   3ea48:	ff 90       	pop	r15
   3ea4a:	ef 90       	pop	r14
   3ea4c:	df 90       	pop	r13
   3ea4e:	cf 90       	pop	r12
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;

	uint8_t returnCode = ERROR_UNKNOWN;
   3ea50:	bf 90       	pop	r11
		case TFTP_OPCODE_ERROR:

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_OPERR);)

			/* FIXME: Resetting might be needed here too */
			break;
   3ea52:	af 90       	pop	r10
	if((tftpOpcode == TFTP_OPCODE_DATA)
		&& ((tftpBlock > MAX_ADDR / 0x200) || (tftpBlock < highPacket) || (tftpBlock > highPacket + 1)))
		tftpOpcode = TFTP_OPCODE_UKN;

	if(tftpDataLen > (0x200 + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE))
		tftpOpcode = TFTP_OPCODE_UKN;
   3ea54:	9f 90       	pop	r9
   3ea56:	8f 90       	pop	r8

			/* FIXME: Resetting might be needed here too */
			break;

		default:
			DBG_TFTP(
   3ea58:	7f 90       	pop	r7
   3ea5a:	6f 90       	pop	r6
   3ea5c:	5f 90       	pop	r5
   3ea5e:	4f 90       	pop	r4
   3ea60:	3f 90       	pop	r3
   3ea62:	2f 90       	pop	r2
   3ea64:	08 95       	ret

0003ea66 <tftpInit>:

/**
 * Initializes the network controller
 */
void tftpInit(void)
{
   3ea66:	cf 93       	push	r28
	// Open socket
	sockInit(TFTP_PORT);
   3ea68:	85 e4       	ldi	r24, 0x45	; 69
   3ea6a:	90 e0       	ldi	r25, 0x00	; 0
   3ea6c:	0c de       	rcall	.-1000   	; 0x3e686 <sockInit>
   3ea6e:	87 e1       	ldi	r24, 0x17	; 23

#if defined(RANDOM_TFTP_DATA_PORT)
#else
	if(eeprom_read_byte(EEPROM_SIG_3) == EEPROM_SIG_3_VALUE)
   3ea70:	90 e0       	ldi	r25, 0x00	; 0
   3ea72:	e9 d4       	rcall	.+2514   	; 0x3f446 <__eerd_byte_m2560>
   3ea74:	8b 3b       	cpi	r24, 0xBB	; 187
   3ea76:	91 f4       	brne	.+36     	; 0x3ea9c <tftpInit+0x36>
   3ea78:	89 e1       	ldi	r24, 0x19	; 25
   3ea7a:	90 e0       	ldi	r25, 0x00	; 0
		tftpTransferPort = ((eeprom_read_byte(EEPROM_PORT + 1) << 8) + eeprom_read_byte(EEPROM_PORT));
   3ea7c:	e4 d4       	rcall	.+2504   	; 0x3f446 <__eerd_byte_m2560>
   3ea7e:	c8 2f       	mov	r28, r24
   3ea80:	88 e1       	ldi	r24, 0x18	; 24
   3ea82:	90 e0       	ldi	r25, 0x00	; 0
   3ea84:	e0 d4       	rcall	.+2496   	; 0x3f446 <__eerd_byte_m2560>
   3ea86:	2c 2f       	mov	r18, r28
   3ea88:	30 e0       	ldi	r19, 0x00	; 0
   3ea8a:	32 2f       	mov	r19, r18
   3ea8c:	22 27       	eor	r18, r18
   3ea8e:	28 0f       	add	r18, r24
   3ea90:	31 1d       	adc	r19, r1
   3ea92:	30 93 29 02 	sts	0x0229, r19
   3ea96:	20 93 28 02 	sts	0x0228, r18
   3ea9a:	06 c0       	rjmp	.+12     	; 0x3eaa8 <tftpInit+0x42>
   3ea9c:	89 e7       	ldi	r24, 0x79	; 121
   3ea9e:	97 eb       	ldi	r25, 0xB7	; 183
   3eaa0:	90 93 29 02 	sts	0x0229, r25
	else
		tftpTransferPort = TFTP_DATA_PORT;
   3eaa4:	80 93 28 02 	sts	0x0228, r24
   3eaa8:	67 ee       	ldi	r22, 0xE7	; 231
   3eaaa:	71 ee       	ldi	r23, 0xE1	; 225
   3eaac:	8b e3       	ldi	r24, 0x3B	; 59
   3eaae:	93 ee       	ldi	r25, 0xE3	; 227
#endif

	DBG_TFTP(
   3eab0:	5b d1       	rcall	.+694    	; 0x3ed68 <tracePGMln>
   3eab2:	6a ed       	ldi	r22, 0xDA	; 218
   3eab4:	71 ee       	ldi	r23, 0xE1	; 225
   3eab6:	8b e3       	ldi	r24, 0x3B	; 59
   3eab8:	93 ee       	ldi	r25, 0xE3	; 227
   3eaba:	56 d1       	rcall	.+684    	; 0x3ed68 <tracePGMln>
   3eabc:	64 e0       	ldi	r22, 0x04	; 4
   3eabe:	80 91 28 02 	lds	r24, 0x0228
   3eac2:	90 91 29 02 	lds	r25, 0x0229
   3eac6:	cf 91       	pop	r28
   3eac8:	80 c1       	rjmp	.+768    	; 0x3edca <tracehex>

0003eaca <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll(void)
{
   3eaca:	af 92       	push	r10
   3eacc:	bf 92       	push	r11
   3eace:	cf 92       	push	r12
   3ead0:	df 92       	push	r13
   3ead2:	ef 92       	push	r14
   3ead4:	ff 92       	push	r15
   3ead6:	0f 93       	push	r16
   3ead8:	1f 93       	push	r17
   3eada:	cf 93       	push	r28
   3eadc:	df 93       	push	r29
   3eade:	cd b7       	in	r28, 0x3d	; 61
   3eae0:	de b7       	in	r29, 0x3e	; 62
   3eae2:	c4 56       	subi	r28, 0x64	; 100
   3eae4:	d1 09       	sbc	r29, r1
   3eae6:	de bf       	out	0x3e, r29	; 62
   3eae8:	cd bf       	out	0x3d, r28	; 61
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = spiReadWord(REG_S3_RX_RSR0);
   3eaea:	86 e2       	ldi	r24, 0x26	; 38
   3eaec:	97 e0       	ldi	r25, 0x07	; 7
   3eaee:	26 dd       	rcall	.-1460   	; 0x3e53c <spiReadWord>
   3eaf0:	89 2b       	or	r24, r25
// 			_delay_ms(400);
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
   3eaf2:	11 f4       	brne	.+4      	; 0x3eaf8 <tftpPoll+0x2e>
   3eaf4:	81 e0       	ldi	r24, 0x01	; 1
		// Complete
		return(0);
	}

	// Tftp continues
	return(1);
   3eaf6:	ad c0       	rjmp	.+346    	; 0x3ec52 <tftpPoll+0x188>
   3eaf8:	81 e0       	ldi	r24, 0x01	; 1
// 			packetSize = spiReadWord(REG_S3_RX_RSR0);
// 		}
// 	} while (packetSize != incSize);

	if(packetSize) {
		tftpFlashing = TRUE;
   3eafa:	80 93 2b 02 	sts	0x022B, r24
   3eafe:	82 e0       	ldi	r24, 0x02	; 2

		while((spiReadReg(REG_S3_IR) & IR_RECV)) {
   3eb00:	97 e0       	ldi	r25, 0x07	; 7
   3eb02:	02 dd       	rcall	.-1532   	; 0x3e508 <spiReadReg>
   3eb04:	82 ff       	sbrs	r24, 2
   3eb06:	0e c0       	rjmp	.+28     	; 0x3eb24 <tftpPoll+0x5a>
   3eb08:	64 e0       	ldi	r22, 0x04	; 4
   3eb0a:	82 e0       	ldi	r24, 0x02	; 2
			spiWriteReg(REG_S3_IR, IR_RECV);
   3eb0c:	97 e0       	ldi	r25, 0x07	; 7
   3eb0e:	d2 dc       	rcall	.-1628   	; 0x3e4b4 <spiWriteReg>
   3eb10:	2f ef       	ldi	r18, 0xFF	; 255
   3eb12:	37 e8       	ldi	r19, 0x87	; 135
   3eb14:	83 e1       	ldi	r24, 0x13	; 19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
   3eb16:	21 50       	subi	r18, 0x01	; 1
   3eb18:	30 40       	sbci	r19, 0x00	; 0
   3eb1a:	80 40       	sbci	r24, 0x00	; 0
   3eb1c:	e1 f7       	brne	.-8      	; 0x3eb16 <tftpPoll+0x4c>
   3eb1e:	00 c0       	rjmp	.+0      	; 0x3eb20 <tftpPoll+0x56>
   3eb20:	00 00       	nop
   3eb22:	ed cf       	rjmp	.-38     	; 0x3eafe <tftpPoll+0x34>
   3eb24:	86 e2       	ldi	r24, 0x26	; 38
   3eb26:	97 e0       	ldi	r25, 0x07	; 7
   3eb28:	09 dd       	rcall	.-1518   	; 0x3e53c <spiReadWord>
			_delay_ms(TFTP_PACKET_DELAY);
		}

		// Process Packet and get TFTP response code
#if (DEBUG_TFTP > 0)
		packetSize = spiReadWord(REG_S3_RX_RSR0);
   3eb2a:	d9 dd       	rcall	.-1102   	; 0x3e6de <processPacket>
   3eb2c:	f8 2e       	mov	r15, r24
   3eb2e:	84 e2       	ldi	r24, 0x24	; 36
   3eb30:	97 e0       	ldi	r25, 0x07	; 7
		response = processPacket(packetSize);
   3eb32:	04 dd       	rcall	.-1528   	; 0x3e53c <spiReadWord>
   3eb34:	8c 01       	movw	r16, r24
   3eb36:	18 5a       	subi	r17, 0xA8	; 168
	uint8_t txBuffer[100];
	uint8_t* txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = spiReadWord(REG_S3_TX_WR0) + S3_TX_START;
   3eb38:	92 e0       	ldi	r25, 0x02	; 2
   3eb3a:	f9 16       	cp	r15, r25
   3eb3c:	c9 f1       	breq	.+114    	; 0x3ebb0 <tftpPoll+0xe6>
   3eb3e:	9f 15       	cp	r25, r15
   3eb40:	20 f0       	brcs	.+8      	; 0x3eb4a <tftpPoll+0x80>
   3eb42:	e1 e0       	ldi	r30, 0x01	; 1

	switch(response) {
   3eb44:	fe 16       	cp	r15, r30
   3eb46:	d1 f0       	breq	.+52     	; 0x3eb7c <tftpPoll+0xb2>
   3eb48:	07 c0       	rjmp	.+14     	; 0x3eb58 <tftpPoll+0x8e>
   3eb4a:	f3 e0       	ldi	r31, 0x03	; 3
   3eb4c:	ff 16       	cp	r15, r31
   3eb4e:	19 f1       	breq	.+70     	; 0x3eb96 <tftpPoll+0xcc>
   3eb50:	24 e0       	ldi	r18, 0x04	; 4
   3eb52:	f2 16       	cp	r15, r18
   3eb54:	09 f4       	brne	.+2      	; 0x3eb58 <tftpPoll+0x8e>
   3eb56:	7a c0       	rjmp	.+244    	; 0x3ec4c <tftpPoll+0x182>
   3eb58:	43 ea       	ldi	r20, 0xA3	; 163
   3eb5a:	51 ee       	ldi	r21, 0xE1	; 225
   3eb5c:	60 e0       	ldi	r22, 0x00	; 0
   3eb5e:	70 e0       	ldi	r23, 0x00	; 0
   3eb60:	6d 5f       	subi	r22, 0xFD	; 253
   3eb62:	7f 4f       	sbci	r23, 0xFF	; 255

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_unknown_error_packet, packetLength);
   3eb64:	2a e0       	ldi	r18, 0x0A	; 10
   3eb66:	30 e0       	ldi	r19, 0x00	; 0
   3eb68:	ce 01       	movw	r24, r28
   3eb6a:	01 96       	adiw	r24, 0x01	; 1
   3eb6c:	63 d4       	rcall	.+2246   	; 0x3f434 <memcpy_PF>
   3eb6e:	8a e0       	ldi	r24, 0x0A	; 10
   3eb70:	fe 01       	movw	r30, r28
   3eb72:	31 96       	adiw	r30, 0x01	; 1
   3eb74:	6f 01       	movw	r12, r30
   3eb76:	e8 2e       	mov	r14, r24
   3eb78:	ee 0e       	add	r14, r30
   3eb7a:	4a c0       	rjmp	.+148    	; 0x3ec10 <tftpPoll+0x146>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
   3eb7c:	48 eb       	ldi	r20, 0xB8	; 184
	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3eb7e:	51 ee       	ldi	r21, 0xE1	; 225
   3eb80:	60 e0       	ldi	r22, 0x00	; 0
   3eb82:	70 e0       	ldi	r23, 0x00	; 0
   3eb84:	6d 5f       	subi	r22, 0xFD	; 253
   3eb86:	7f 4f       	sbci	r23, 0xFF	; 255
   3eb88:	2c e0       	ldi	r18, 0x0C	; 12

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_opcode_error_packet, packetLength);
   3eb8a:	30 e0       	ldi	r19, 0x00	; 0
   3eb8c:	ce 01       	movw	r24, r28
   3eb8e:	01 96       	adiw	r24, 0x01	; 1
   3eb90:	51 d4       	rcall	.+2210   	; 0x3f434 <memcpy_PF>
   3eb92:	8c e0       	ldi	r24, 0x0C	; 12
   3eb94:	ed cf       	rjmp	.-38     	; 0x3eb70 <tftpPoll+0xa6>
   3eb96:	4e ea       	ldi	r20, 0xAE	; 174
   3eb98:	51 ee       	ldi	r21, 0xE1	; 225
   3eb9a:	60 e0       	ldi	r22, 0x00	; 0
   3eb9c:	70 e0       	ldi	r23, 0x00	; 0
   3eb9e:	6d 5f       	subi	r22, 0xFD	; 253
   3eba0:	7f 4f       	sbci	r23, 0xFF	; 255
#endif
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
   3eba2:	29 e0       	ldi	r18, 0x09	; 9
   3eba4:	30 e0       	ldi	r19, 0x00	; 0

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
#if (FLASHEND > 0x10000)
			memcpy_PF(txBuffer, PROGMEM_OFFSET + (uint32_t)(uint16_t)tftp_full_error_packet, packetLength);
   3eba6:	ce 01       	movw	r24, r28
   3eba8:	01 96       	adiw	r24, 0x01	; 1
   3ebaa:	44 d4       	rcall	.+2184   	; 0x3f434 <memcpy_PF>
   3ebac:	89 e0       	ldi	r24, 0x09	; 9
   3ebae:	e0 cf       	rjmp	.-64     	; 0x3eb70 <tftpPoll+0xa6>
   3ebb0:	80 91 22 02 	lds	r24, 0x0222
   3ebb4:	90 91 23 02 	lds	r25, 0x0223
   3ebb8:	20 91 20 02 	lds	r18, 0x0220
   3ebbc:	30 91 21 02 	lds	r19, 0x0221
#endif
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
   3ebc0:	28 17       	cp	r18, r24
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
#endif
			break;

		case ACK:
			if(lastPacket > highPacket) highPacket = lastPacket;
   3ebc2:	39 07       	cpc	r19, r25
   3ebc4:	20 f4       	brcc	.+8      	; 0x3ebce <tftpPoll+0x104>
   3ebc6:	90 93 21 02 	sts	0x0221, r25
   3ebca:	80 93 20 02 	sts	0x0220, r24
   3ebce:	6a e1       	ldi	r22, 0x1A	; 26
   3ebd0:	72 ee       	ldi	r23, 0xE2	; 226
   3ebd2:	8b e3       	ldi	r24, 0x3B	; 59
   3ebd4:	93 ee       	ldi	r25, 0xE3	; 227
   3ebd6:	c8 d0       	rcall	.+400    	; 0x3ed68 <tracePGMln>
   3ebd8:	19 82       	std	Y+1, r1	; 0x01
   3ebda:	84 e0       	ldi	r24, 0x04	; 4
   3ebdc:	8a 83       	std	Y+2, r24	; 0x02
   3ebde:	80 91 22 02 	lds	r24, 0x0222

			DBG_TFTP(tracePGMlnTftp(mDebugTftp_SACK);)
   3ebe2:	90 91 23 02 	lds	r25, 0x0223
   3ebe6:	9b 83       	std	Y+3, r25	; 0x03
   3ebe8:	8c 83       	std	Y+4, r24	; 0x04
   3ebea:	84 e0       	ldi	r24, 0x04	; 4
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
   3ebec:	c1 cf       	rjmp	.-126    	; 0x3eb70 <tftpPoll+0xa6>
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
   3ebee:	f6 01       	movw	r30, r12
   3ebf0:	61 91       	ld	r22, Z+
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
   3ebf2:	6f 01       	movw	r12, r30
   3ebf4:	58 01       	movw	r10, r16
   3ebf6:	ff ef       	ldi	r31, 0xFF	; 255
   3ebf8:	af 1a       	sub	r10, r31
   3ebfa:	bf 0a       	sbc	r11, r31
			*txPtr = lastPacket & 0xff;
   3ebfc:	c8 01       	movw	r24, r16
			DBG_TFTP(
				if(response == FINAL_ACK)
					tracePGMlnTftp(mDebugTftp_SFACK);
			)

			packetLength = 4;
   3ebfe:	5a dc       	rcall	.-1868   	; 0x3e4b4 <spiWriteReg>
   3ec00:	a1 14       	cp	r10, r1
	}

	txPtr = txBuffer;

	while(packetLength--) {
		spiWriteReg(writePointer++, *txPtr++);
   3ec02:	20 e6       	ldi	r18, 0x60	; 96
   3ec04:	b2 06       	cpc	r11, r18
   3ec06:	19 f4       	brne	.+6      	; 0x3ec0e <tftpPoll+0x144>
   3ec08:	a1 2c       	mov	r10, r1
   3ec0a:	a8 e5       	ldi	r26, 0x58	; 88
   3ec0c:	ba 2e       	mov	r11, r26
   3ec0e:	85 01       	movw	r16, r10
   3ec10:	ec 10       	cpse	r14, r12
   3ec12:	ed cf       	rjmp	.-38     	; 0x3ebee <tftpPoll+0x124>
   3ec14:	b8 01       	movw	r22, r16

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
   3ec16:	78 55       	subi	r23, 0x58	; 88
   3ec18:	84 e2       	ldi	r24, 0x24	; 36
   3ec1a:	97 e0       	ldi	r25, 0x07	; 7
   3ec1c:	64 dc       	rcall	.-1848   	; 0x3e4e6 <spiWriteWord>
   3ec1e:	60 e2       	ldi	r22, 0x20	; 32
   3ec20:	81 e0       	ldi	r24, 0x01	; 1
   3ec22:	97 e0       	ldi	r25, 0x07	; 7
   3ec24:	47 dc       	rcall	.-1906   	; 0x3e4b4 <spiWriteReg>
			break;
	}

	txPtr = txBuffer;

	while(packetLength--) {
   3ec26:	81 e0       	ldi	r24, 0x01	; 1
   3ec28:	97 e0       	ldi	r25, 0x07	; 7
		spiWriteReg(writePointer++, *txPtr++);

		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}

	spiWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
   3ec2a:	6e dc       	rcall	.-1828   	; 0x3e508 <spiReadReg>
   3ec2c:	81 11       	cpse	r24, r1
   3ec2e:	fb cf       	rjmp	.-10     	; 0x3ec26 <tftpPoll+0x15c>
   3ec30:	6d ef       	ldi	r22, 0xFD	; 253
   3ec32:	71 ee       	ldi	r23, 0xE1	; 225
   3ec34:	8b e3       	ldi	r24, 0x3B	; 59
	spiWriteReg(REG_S3_CR, CR_SEND);
   3ec36:	93 ee       	ldi	r25, 0xE3	; 227
   3ec38:	97 d0       	rcall	.+302    	; 0x3ed68 <tracePGMln>
   3ec3a:	34 e0       	ldi	r19, 0x04	; 4
   3ec3c:	f3 12       	cpse	r15, r19
   3ec3e:	5a cf       	rjmp	.-332    	; 0x3eaf4 <tftpPoll+0x2a>

	while(spiReadReg(REG_S3_CR));
   3ec40:	60 e1       	ldi	r22, 0x10	; 16
   3ec42:	81 e0       	ldi	r24, 0x01	; 1
   3ec44:	97 e0       	ldi	r25, 0x07	; 7
   3ec46:	36 dc       	rcall	.-1940   	; 0x3e4b4 <spiWriteReg>
   3ec48:	80 e0       	ldi	r24, 0x00	; 0
   3ec4a:	03 c0       	rjmp	.+6      	; 0x3ec52 <tftpPoll+0x188>

	DBG_TFTP(tracePGMlnTftp(mDebugTftp_RESP);)
   3ec4c:	6b e0       	ldi	r22, 0x0B	; 11
   3ec4e:	72 ee       	ldi	r23, 0xE2	; 226
   3ec50:	c0 cf       	rjmp	.-128    	; 0x3ebd2 <tftpPoll+0x108>
   3ec52:	cc 59       	subi	r28, 0x9C	; 156
   3ec54:	df 4f       	sbci	r29, 0xFF	; 255
   3ec56:	de bf       	out	0x3e, r29	; 62
#endif
		// Send the response
		sendResponse(response);
	}

	if(response == FINAL_ACK) {
   3ec58:	cd bf       	out	0x3d, r28	; 61
   3ec5a:	df 91       	pop	r29
   3ec5c:	cf 91       	pop	r28
		spiWriteReg(REG_S3_CR, CR_CLOSE);
   3ec5e:	1f 91       	pop	r17
   3ec60:	0f 91       	pop	r16
   3ec62:	ff 90       	pop	r15
   3ec64:	ef 90       	pop	r14
   3ec66:	df 90       	pop	r13
		// Complete
		return(0);
   3ec68:	cf 90       	pop	r12
   3ec6a:	bf 90       	pop	r11
			DBG_TFTP(tracePGMlnTftp(mDebugTftp_SACK);)
			/* no break */

		case FINAL_ACK:

			DBG_TFTP(
   3ec6c:	af 90       	pop	r10
   3ec6e:	08 95       	ret

0003ec70 <validImage>:
#include "serial.h"
#include "debug.h"
#include "debug_vald.h"

uint8_t validImage(uint8_t* base)
{
   3ec70:	df 92       	push	r13
   3ec72:	ef 92       	push	r14
   3ec74:	ff 92       	push	r15
   3ec76:	0f 93       	push	r16
   3ec78:	1f 93       	push	r17
   3ec7a:	cf 93       	push	r28
   3ec7c:	df 93       	push	r29
   3ec7e:	8c 01       	movw	r16, r24
   3ec80:	7c 01       	movw	r14, r24
   3ec82:	8f ef       	ldi	r24, 0xFF	; 255
   3ec84:	e8 1a       	sub	r14, r24
   3ec86:	f8 0a       	sbc	r15, r24
   3ec88:	c0 e0       	ldi	r28, 0x00	; 0
   3ec8a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {

		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
   3ec8c:	f8 01       	movw	r30, r16
   3ec8e:	80 81       	ld	r24, Z
   3ec90:	8c 30       	cpi	r24, 0x0C	; 12
   3ec92:	99 f0       	breq	.+38     	; 0x3ecba <validImage+0x4a>
			DBG_VALD(
   3ec94:	6b e6       	ldi	r22, 0x6B	; 107
   3ec96:	73 ee       	ldi	r23, 0xE3	; 227
   3ec98:	82 e8       	ldi	r24, 0x82	; 130
   3ec9a:	93 ee       	ldi	r25, 0xE3	; 227
   3ec9c:	65 d0       	rcall	.+202    	; 0x3ed68 <tracePGMln>
   3ec9e:	64 e0       	ldi	r22, 0x04	; 4
   3eca0:	ce 01       	movw	r24, r28
   3eca2:	93 d0       	rcall	.+294    	; 0x3edca <tracehex>
   3eca4:	84 e6       	ldi	r24, 0x64	; 100
   3eca6:	93 ee       	ldi	r25, 0xE3	; 227
   3eca8:	3b d0       	rcall	.+118    	; 0x3ed20 <tracePGM>
   3ecaa:	f8 01       	movw	r30, r16
   3ecac:	80 81       	ld	r24, Z
   3ecae:	64 e0       	ldi	r22, 0x04	; 4
   3ecb0:	90 e0       	ldi	r25, 0x00	; 0
   3ecb2:	8b d0       	rcall	.+278    	; 0x3edca <tracehex>
   3ecb4:	83 e5       	ldi	r24, 0x53	; 83
   3ecb6:	93 ee       	ldi	r25, 0xE3	; 227
   3ecb8:	18 c0       	rjmp	.+48     	; 0x3ecea <validImage+0x7a>
   3ecba:	f7 01       	movw	r30, r14
   3ecbc:	80 81       	ld	r24, Z
   3ecbe:	84 39       	cpi	r24, 0x94	; 148
   3ecc0:	b9 f0       	breq	.+46     	; 0x3ecf0 <validImage+0x80>
				tracePGM(mDebugVald_0x0C);
			)
			return(0);
		}
		
		if(base[i + 1] != 0x94) {
   3ecc2:	6b e6       	ldi	r22, 0x6B	; 107
   3ecc4:	73 ee       	ldi	r23, 0xE3	; 227
   3ecc6:	82 e8       	ldi	r24, 0x82	; 130
   3ecc8:	93 ee       	ldi	r25, 0xE3	; 227
			DBG_VALD(
   3ecca:	4e d0       	rcall	.+156    	; 0x3ed68 <tracePGMln>
   3eccc:	8c 2f       	mov	r24, r28
   3ecce:	90 e0       	ldi	r25, 0x00	; 0
   3ecd0:	64 e0       	ldi	r22, 0x04	; 4
   3ecd2:	01 96       	adiw	r24, 0x01	; 1
   3ecd4:	7a d0       	rcall	.+244    	; 0x3edca <tracehex>
   3ecd6:	84 e6       	ldi	r24, 0x64	; 100
   3ecd8:	93 ee       	ldi	r25, 0xE3	; 227
   3ecda:	22 d0       	rcall	.+68     	; 0x3ed20 <tracePGM>
   3ecdc:	f7 01       	movw	r30, r14
   3ecde:	80 81       	ld	r24, Z
   3ece0:	64 e0       	ldi	r22, 0x04	; 4
   3ece2:	90 e0       	ldi	r25, 0x00	; 0
   3ece4:	72 d0       	rcall	.+228    	; 0x3edca <tracehex>
   3ece6:	82 e4       	ldi	r24, 0x42	; 66
   3ece8:	93 ee       	ldi	r25, 0xE3	; 227
   3ecea:	1a d0       	rcall	.+52     	; 0x3ed20 <tracePGM>
   3ecec:	80 e0       	ldi	r24, 0x00	; 0
   3ecee:	10 c0       	rjmp	.+32     	; 0x3ed10 <validImage+0xa0>
   3ecf0:	24 96       	adiw	r28, 0x04	; 4
   3ecf2:	0c 5f       	subi	r16, 0xFC	; 252
   3ecf4:	1f 4f       	sbci	r17, 0xFF	; 255
   3ecf6:	f4 e0       	ldi	r31, 0x04	; 4
   3ecf8:	ef 0e       	add	r14, r31
   3ecfa:	f1 1c       	adc	r15, r1
   3ecfc:	c4 33       	cpi	r28, 0x34	; 52
				tracenum(i + 1);
				tracePGM(mDebugVald_WITH);
				tracenum(base[i + 1]);
				tracePGM(mDebugVald_0x94);
			)
			return(0);
   3ecfe:	d1 05       	cpc	r29, r1
   3ed00:	09 f0       	breq	.+2      	; 0x3ed04 <validImage+0x94>
   3ed02:	c4 cf       	rjmp	.-120    	; 0x3ec8c <validImage+0x1c>
   3ed04:	66 e7       	ldi	r22, 0x76	; 118
   3ed06:	73 ee       	ldi	r23, 0xE3	; 227
   3ed08:	82 e8       	ldi	r24, 0x82	; 130
   3ed0a:	93 ee       	ldi	r25, 0xE3	; 227
   3ed0c:	2d d0       	rcall	.+90     	; 0x3ed68 <tracePGMln>

uint8_t validImage(uint8_t* base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
   3ed0e:	81 e0       	ldi	r24, 0x01	; 1
   3ed10:	df 91       	pop	r29
   3ed12:	cf 91       	pop	r28
   3ed14:	1f 91       	pop	r17
			)
			return(0);
		}
	}

	DBG_VALD(tracePGMlnVald(mDebugVald_VALID);)
   3ed16:	0f 91       	pop	r16
   3ed18:	ff 90       	pop	r15
   3ed1a:	ef 90       	pop	r14
   3ed1c:	df 90       	pop	r13
   3ed1e:	08 95       	ret

0003ed20 <tracePGM>:
 */
const unsigned char mDebug_NEWLINE[]	PROGMEM =	"\r\n";
const unsigned char mDebug_HEXPREF[]	PROGMEM =	"0x";

void tracePGM(const void* p_msg)
{
   3ed20:	cf 92       	push	r12
   3ed22:	df 92       	push	r13
   3ed24:	ef 92       	push	r14
   3ed26:	ff 92       	push	r15
   3ed28:	cf 93       	push	r28
   3ed2a:	df 93       	push	r29
	uint8_t	c = 1, i = 0;
   3ed2c:	d0 e0       	ldi	r29, 0x00	; 0
#if (FLASHEND > 0x10000)
		/* 0x30000 was added to fix the issues of progmem with >64Kb flash.
		 * 0x30000 is specific to atmega2560 and won't work on smaller or larger flashes.
		 * I should find a way to macro the calculation of this value
		 */
		c = pgm_read_byte_far(PROGMEM_OFFSET + (uint32_t)(uint16_t)p_msg + i);
   3ed2e:	6c 01       	movw	r12, r24
   3ed30:	e1 2c       	mov	r14, r1
   3ed32:	f1 2c       	mov	r15, r1
   3ed34:	83 e0       	ldi	r24, 0x03	; 3
   3ed36:	e8 0e       	add	r14, r24
   3ed38:	f1 1c       	adc	r15, r1
   3ed3a:	d7 01       	movw	r26, r14
   3ed3c:	c6 01       	movw	r24, r12
   3ed3e:	8d 0f       	add	r24, r29
   3ed40:	91 1d       	adc	r25, r1
   3ed42:	a1 1d       	adc	r26, r1
   3ed44:	b1 1d       	adc	r27, r1
   3ed46:	ab bf       	out	0x3b, r26	; 59
   3ed48:	fc 01       	movw	r30, r24
   3ed4a:	c7 91       	elpm	r28, Z+
#else
		c = pgm_read_byte_near((uint16_t)p_msg + i);
#endif
		if (c != 0) putch(c);
   3ed4c:	cc 23       	and	r28, r28
   3ed4e:	11 f0       	breq	.+4      	; 0x3ed54 <tracePGM+0x34>
   3ed50:	8c 2f       	mov	r24, r28
   3ed52:	67 d0       	rcall	.+206    	; 0x3ee22 <putch>
   3ed54:	df 5f       	subi	r29, 0xFF	; 255
		i++;
   3ed56:	c1 11       	cpse	r28, r1

void tracePGM(const void* p_msg)
{
	uint8_t	c = 1, i = 0;

	while(c != 0){
   3ed58:	f0 cf       	rjmp	.-32     	; 0x3ed3a <tracePGM+0x1a>
   3ed5a:	df 91       	pop	r29
		c = pgm_read_byte_near((uint16_t)p_msg + i);
#endif
		if (c != 0) putch(c);
		i++;
	}
}
   3ed5c:	cf 91       	pop	r28
   3ed5e:	ff 90       	pop	r15
   3ed60:	ef 90       	pop	r14
   3ed62:	df 90       	pop	r13
   3ed64:	cf 90       	pop	r12
   3ed66:	08 95       	ret

0003ed68 <tracePGMln>:


void tracePGMln(const void* p_prefix, const void* p_msg)
{
   3ed68:	0f 93       	push	r16
   3ed6a:	1f 93       	push	r17
   3ed6c:	cf 93       	push	r28
   3ed6e:	df 93       	push	r29
   3ed70:	ec 01       	movw	r28, r24
   3ed72:	8b 01       	movw	r16, r22
	tracePGM(mDebug_NEWLINE);
   3ed74:	8c e8       	ldi	r24, 0x8C	; 140
   3ed76:	93 ee       	ldi	r25, 0xE3	; 227
   3ed78:	d3 df       	rcall	.-90     	; 0x3ed20 <tracePGM>
   3ed7a:	ce 01       	movw	r24, r28
	tracePGM(p_prefix);
   3ed7c:	d1 df       	rcall	.-94     	; 0x3ed20 <tracePGM>
   3ed7e:	c8 01       	movw	r24, r16
   3ed80:	df 91       	pop	r29
	tracePGM(p_msg);
   3ed82:	cf 91       	pop	r28
}
   3ed84:	1f 91       	pop	r17
   3ed86:	0f 91       	pop	r16
   3ed88:	cb cf       	rjmp	.-106    	; 0x3ed20 <tracePGM>

0003ed8a <trace>:


void trace(char* msg)
{
   3ed8a:	cf 93       	push	r28
   3ed8c:	df 93       	push	r29
	uint8_t c;

	if(*msg != '\0') {
   3ed8e:	fc 01       	movw	r30, r24
   3ed90:	20 81       	ld	r18, Z
   3ed92:	22 23       	and	r18, r18
   3ed94:	31 f0       	breq	.+12     	; 0x3eda2 <trace+0x18>
   3ed96:	ec 01       	movw	r28, r24
		while((c = *msg++)) putch(c);
   3ed98:	89 91       	ld	r24, Y+
   3ed9a:	88 23       	and	r24, r24
   3ed9c:	11 f0       	breq	.+4      	; 0x3eda2 <trace+0x18>
   3ed9e:	41 d0       	rcall	.+130    	; 0x3ee22 <putch>
   3eda0:	fb cf       	rjmp	.-10     	; 0x3ed98 <trace+0xe>
   3eda2:	df 91       	pop	r29
	}
}
   3eda4:	cf 91       	pop	r28
   3eda6:	08 95       	ret

0003eda8 <traceln>:


void traceln(const void* p_prefix, char* msg)
{
   3eda8:	0f 93       	push	r16
   3edaa:	1f 93       	push	r17
   3edac:	cf 93       	push	r28
   3edae:	df 93       	push	r29
   3edb0:	ec 01       	movw	r28, r24
   3edb2:	8b 01       	movw	r16, r22
	tracePGM(mDebug_NEWLINE);
   3edb4:	8c e8       	ldi	r24, 0x8C	; 140
   3edb6:	93 ee       	ldi	r25, 0xE3	; 227
   3edb8:	b3 df       	rcall	.-154    	; 0x3ed20 <tracePGM>
   3edba:	ce 01       	movw	r24, r28
	tracePGM(p_prefix);
   3edbc:	b1 df       	rcall	.-158    	; 0x3ed20 <tracePGM>
   3edbe:	c8 01       	movw	r24, r16
   3edc0:	df 91       	pop	r29
	trace(msg);
   3edc2:	cf 91       	pop	r28
}
   3edc4:	1f 91       	pop	r17
   3edc6:	0f 91       	pop	r16
   3edc8:	e0 cf       	rjmp	.-64     	; 0x3ed8a <trace>

0003edca <tracehex>:


void tracehex(uint16_t num, uint8_t len)
{
   3edca:	1f 93       	push	r17
   3edcc:	cf 93       	push	r28
   3edce:	df 93       	push	r29
   3edd0:	ec 01       	movw	r28, r24
   3edd2:	16 2f       	mov	r17, r22
	tracePGM(mDebug_HEXPREF);
   3edd4:	89 e8       	ldi	r24, 0x89	; 137
   3edd6:	93 ee       	ldi	r25, 0xE3	; 227
   3edd8:	a3 df       	rcall	.-186    	; 0x3ed20 <tracePGM>
   3edda:	11 23       	and	r17, r17

	while(len > 0) {
   3eddc:	89 f0       	breq	.+34     	; 0x3ee00 <tracehex+0x36>
   3edde:	21 2f       	mov	r18, r17
		puthex(num >> (4 * (len - 1)));
   3ede0:	30 e0       	ldi	r19, 0x00	; 0
   3ede2:	21 50       	subi	r18, 0x01	; 1
   3ede4:	31 09       	sbc	r19, r1
   3ede6:	22 0f       	add	r18, r18
   3ede8:	33 1f       	adc	r19, r19
   3edea:	22 0f       	add	r18, r18
   3edec:	33 1f       	adc	r19, r19
   3edee:	ce 01       	movw	r24, r28
   3edf0:	02 c0       	rjmp	.+4      	; 0x3edf6 <tracehex+0x2c>
   3edf2:	96 95       	lsr	r25
   3edf4:	87 95       	ror	r24
   3edf6:	2a 95       	dec	r18
   3edf8:	e2 f7       	brpl	.-8      	; 0x3edf2 <tracehex+0x28>
   3edfa:	1a d0       	rcall	.+52     	; 0x3ee30 <puthex>
   3edfc:	11 50       	subi	r17, 0x01	; 1
   3edfe:	ed cf       	rjmp	.-38     	; 0x3edda <tracehex+0x10>
		len--;
   3ee00:	df 91       	pop	r29
   3ee02:	cf 91       	pop	r28
	}
}
   3ee04:	1f 91       	pop	r17
   3ee06:	08 95       	ret

0003ee08 <serialInit>:


void serialInit(void)
{
	// Double speed mode USART0
	UART_STATUS_REG		= _BV(UART_DOUBLE_SPEED);
   3ee08:	82 e0       	ldi	r24, 0x02	; 2
   3ee0a:	80 93 c0 00 	sts	0x00C0, r24
	// Enable receiver and transiter on USART0
	UART_CONTROL_REG	= _BV(UART_ENABLE_RECEIVER) | _BV(UART_ENABLE_TRANSMITTER);
   3ee0e:	88 e1       	ldi	r24, 0x18	; 24
   3ee10:	80 93 c1 00 	sts	0x00C1, r24
	// Set 8bit character length on USART0
	UART_MODE_REG		= _BV(UART_CHAR_SIZE_LOW) | _BV(UART_CHAR_SIZE_MID);
   3ee14:	86 e0       	ldi	r24, 0x06	; 6
   3ee16:	80 93 c2 00 	sts	0x00C2, r24
	// Set USART0 baud rate
	UART_BAUD_RATE_LOW	= (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
   3ee1a:	80 e1       	ldi	r24, 0x10	; 16
   3ee1c:	80 93 c4 00 	sts	0x00C4, r24
   3ee20:	08 95       	ret

0003ee22 <putch>:
}


void putch(uint8_t c)
{
	while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
   3ee22:	90 91 c0 00 	lds	r25, 0x00C0
   3ee26:	95 ff       	sbrs	r25, 5
   3ee28:	fc cf       	rjmp	.-8      	; 0x3ee22 <putch>
	UART_DATA_REG = c;
   3ee2a:	80 93 c6 00 	sts	0x00C6, r24
   3ee2e:	08 95       	ret

0003ee30 <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
   3ee30:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
   3ee32:	8a 30       	cpi	r24, 0x0A	; 10
   3ee34:	08 f0       	brcs	.+2      	; 0x3ee38 <puthex+0x8>
   3ee36:	89 5f       	subi	r24, 0xF9	; 249
	//while(!(UART_STATUS_REG & _BV(UART_DATA_REG_EMPTY)));
	//UART_DATA_REG = c + '0';
	putch(c + '0');
   3ee38:	80 5d       	subi	r24, 0xD0	; 208
   3ee3a:	f3 cf       	rjmp	.-26     	; 0x3ee22 <putch>

0003ee3c <getch>:

uint8_t getch(void)
{
	//uint8_t ch;

	while(!(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)));
   3ee3c:	80 91 c0 00 	lds	r24, 0x00C0
   3ee40:	87 ff       	sbrs	r24, 7
   3ee42:	fc cf       	rjmp	.-8      	; 0x3ee3c <getch>
	if(!(UART_STATUS_REG & _BV(UART_FRAME_ERROR))) {
   3ee44:	80 91 c0 00 	lds	r24, 0x00C0
   3ee48:	84 fd       	sbrc	r24, 4
   3ee4a:	01 c0       	rjmp	.+2      	; 0x3ee4e <getch+0x12>
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		wdt_reset();
   3ee4c:	a8 95       	wdr
	}

	//ch = UART_DATA_REG;
	//return ch;

	return(UART_DATA_REG);
   3ee4e:	80 91 c6 00 	lds	r24, 0x00C6
}
   3ee52:	08 95       	ret

0003ee54 <serialPoll>:


uint8_t serialPoll(void)
{
	if(UART_STATUS_REG & _BV(UART_RECEIVE_COMPLETE)) {
   3ee54:	80 91 c0 00 	lds	r24, 0x00C0
   3ee58:	87 ff       	sbrs	r24, 7
   3ee5a:	05 c0       	rjmp	.+10     	; 0x3ee66 <serialPoll+0x12>
		resetTick();
   3ee5c:	27 d0       	rcall	.+78     	; 0x3eeac <resetTick>
   3ee5e:	81 e0       	ldi	r24, 0x01	; 1
		serialFlashing = TRUE;
   3ee60:	80 93 2a 02 	sts	0x022A, r24
   3ee64:	3f c0       	rjmp	.+126    	; 0x3eee4 <processStk500boot>
#if defined(__AVR_ATmega328__) || defined(__AVR_ATmega328P__)
		return(processOptiboot());
#elif defined(__AVR_ATmega2560__)
		return(processStk500boot());
   3ee66:	81 e0       	ldi	r24, 0x01	; 1
   3ee68:	08 95       	ret

0003ee6a <updateLed>:
static uint16_t tick = 0;


void updateLed(void)
{
	uint16_t next_timer_1 = TCNT1;
   3ee6a:	80 91 84 00 	lds	r24, 0x0084
   3ee6e:	90 91 85 00 	lds	r25, 0x0085

	if(next_timer_1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
   3ee72:	92 ff       	sbrs	r25, 2
   3ee74:	04 c0       	rjmp	.+8      	; 0x3ee7e <updateLed+0x14>
   3ee76:	25 b1       	in	r18, 0x05	; 5
   3ee78:	20 58       	subi	r18, 0x80	; 128
   3ee7a:	25 b9       	out	0x05, r18	; 5
   3ee7c:	01 c0       	rjmp	.+2      	; 0x3ee80 <updateLed+0x16>
	else LED_PORT &= ~_BV(LED); // Led pin low
   3ee7e:	2f 98       	cbi	0x05, 7	; 5

	if(next_timer_1 < last_timer_1) {
   3ee80:	20 91 26 02 	lds	r18, 0x0226
   3ee84:	30 91 27 02 	lds	r19, 0x0227
   3ee88:	82 17       	cp	r24, r18
   3ee8a:	93 07       	cpc	r25, r19
   3ee8c:	50 f4       	brcc	.+20     	; 0x3eea2 <updateLed+0x38>
		tick++;
   3ee8e:	20 91 24 02 	lds	r18, 0x0224
   3ee92:	30 91 25 02 	lds	r19, 0x0225
   3ee96:	2f 5f       	subi	r18, 0xFF	; 255
   3ee98:	3f 4f       	sbci	r19, 0xFF	; 255
   3ee9a:	30 93 25 02 	sts	0x0225, r19
   3ee9e:	20 93 24 02 	sts	0x0224, r18
		    tracePGMlnUtil(mDebugUtil_LAST);
		    tracenum(last_timer_1);
		)
	}

	last_timer_1 = next_timer_1;
   3eea2:	90 93 27 02 	sts	0x0227, r25
   3eea6:	80 93 26 02 	sts	0x0226, r24
   3eeaa:	08 95       	ret

0003eeac <resetTick>:
}

void resetTick(void)
{
	TCNT1 = 0;
   3eeac:	10 92 85 00 	sts	0x0085, r1
   3eeb0:	10 92 84 00 	sts	0x0084, r1
	tick = 0;
   3eeb4:	10 92 25 02 	sts	0x0225, r1
   3eeb8:	10 92 24 02 	sts	0x0224, r1
   3eebc:	08 95       	ret

0003eebe <timedOut>:

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   3eebe:	80 e0       	ldi	r24, 0x00	; 0
   3eec0:	90 e0       	ldi	r25, 0x00	; 0
   3eec2:	dc 01       	movw	r26, r24
   3eec4:	ab bf       	out	0x3b, r26	; 59
   3eec6:	fc 01       	movw	r30, r24
   3eec8:	87 91       	elpm	r24, Z+
   3eeca:	96 91       	elpm	r25, Z
   3eecc:	01 96       	adiw	r24, 0x01	; 1
   3eece:	41 f0       	breq	.+16     	; 0x3eee0 <timedOut+0x22>
#else
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
   3eed0:	81 e0       	ldi	r24, 0x01	; 1
   3eed2:	20 91 24 02 	lds	r18, 0x0224
   3eed6:	30 91 25 02 	lds	r19, 0x0225
   3eeda:	25 30       	cpi	r18, 0x05	; 5
   3eedc:	31 05       	cpc	r19, r1
   3eede:	08 f4       	brcc	.+2      	; 0x3eee2 <timedOut+0x24>

uint8_t timedOut(void)
{
	// Never timeout if there is no code in Flash
#if (FLASHEND > 0x10000)
	if(pgm_read_word_far(0x0000) == 0xFFFF) return(0);
   3eee0:	80 e0       	ldi	r24, 0x00	; 0
	if(pgm_read_word_near(0x0000) == 0xFFFF) return(0);
#endif

	if(tick > TIMEOUT) return(1);
	else return(0);
}
   3eee2:	08 95       	ret

0003eee4 <processStk500boot>:
// 	return UART_DATA_REG;
// }


uint8_t processStk500boot(void)
{
   3eee4:	2f 92       	push	r2
   3eee6:	3f 92       	push	r3
   3eee8:	4f 92       	push	r4
   3eeea:	5f 92       	push	r5
   3eeec:	6f 92       	push	r6
   3eeee:	7f 92       	push	r7
   3eef0:	8f 92       	push	r8
   3eef2:	9f 92       	push	r9
   3eef4:	af 92       	push	r10
   3eef6:	bf 92       	push	r11
   3eef8:	cf 92       	push	r12
   3eefa:	df 92       	push	r13
   3eefc:	ef 92       	push	r14
   3eefe:	ff 92       	push	r15
   3ef00:	0f 93       	push	r16
   3ef02:	1f 93       	push	r17
   3ef04:	cf 93       	push	r28
   3ef06:	df 93       	push	r29
   3ef08:	cd b7       	in	r28, 0x3d	; 61
   3ef0a:	de b7       	in	r29, 0x3e	; 62
   3ef0c:	c0 52       	subi	r28, 0x20	; 32
   3ef0e:	d1 40       	sbci	r29, 0x01	; 1
   3ef10:	de bf       	out	0x3e, r29	; 62
   3ef12:	cd bf       	out	0x3d, r28	; 61
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
	unsigned char	checksum		=	0;
	unsigned char	seqNum			=	0;
   3ef14:	c2 5e       	subi	r28, 0xE2	; 226
   3ef16:	de 4f       	sbci	r29, 0xFE	; 254
   3ef18:	18 82       	st	Y, r1
   3ef1a:	ce 51       	subi	r28, 0x1E	; 30
   3ef1c:	d1 40       	sbci	r29, 0x01	; 1
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
	unsigned char	checksum		=	0;
   3ef1e:	81 2c       	mov	r8, r1
uint8_t processStk500boot(void)
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
	unsigned char	msgParseState;
	unsigned int	ii				=	0;
   3ef20:	21 2c       	mov	r2, r1
   3ef22:	31 2c       	mov	r3, r1


uint8_t processStk500boot(void)
{
	address_t		address			=	0;
	address_t		eraseAddress	=	0;
   3ef24:	41 2c       	mov	r4, r1
   3ef26:	51 2c       	mov	r5, r1
   3ef28:	32 01       	movw	r6, r4
// }


uint8_t processStk500boot(void)
{
	address_t		address			=	0;
   3ef2a:	c1 2c       	mov	r12, r1
   3ef2c:	d1 2c       	mov	r13, r1
   3ef2e:	76 01       	movw	r14, r12
// 	return UART_DATA_REG;
// }


uint8_t processStk500boot(void)
{
   3ef30:	00 e0       	ldi	r16, 0x00	; 0
   3ef32:	10 e0       	ldi	r17, 0x00	; 0
				case ST_GET_CHECK:

					if(c == checksum) {
						msgParseState	=	ST_PROCESS;
					} else {
						msgParseState	=	ST_START;
   3ef34:	40 e0       	ldi	r20, 0x00	; 0
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
// 			if(boot_state == 1) {
// 				boot_state	=	0;
 				c			=	getch();
   3ef36:	c1 5e       	subi	r28, 0xE1	; 225
   3ef38:	de 4f       	sbci	r29, 0xFE	; 254
   3ef3a:	48 83       	st	Y, r20
   3ef3c:	cf 51       	subi	r28, 0x1F	; 31
   3ef3e:	d1 40       	sbci	r29, 0x01	; 1
   3ef40:	7d df       	rcall	.-262    	; 0x3ee3c <getch>
   3ef42:	c1 5e       	subi	r28, 0xE1	; 225
// 			} else {
// 				//	c	=	recchar();
// 				c = recchar_timeout();
// 			}

			switch(msgParseState) {
   3ef44:	de 4f       	sbci	r29, 0xFE	; 254
   3ef46:	48 81       	ld	r20, Y
   3ef48:	cf 51       	subi	r28, 0x1F	; 31
   3ef4a:	d1 40       	sbci	r29, 0x01	; 1
   3ef4c:	43 30       	cpi	r20, 0x03	; 3
   3ef4e:	01 f1       	breq	.+64     	; 0x3ef90 <processStk500boot+0xac>
   3ef50:	20 f4       	brcc	.+8      	; 0x3ef5a <processStk500boot+0x76>
   3ef52:	41 30       	cpi	r20, 0x01	; 1
   3ef54:	71 f0       	breq	.+28     	; 0x3ef72 <processStk500boot+0x8e>
   3ef56:	38 f0       	brcs	.+14     	; 0x3ef66 <processStk500boot+0x82>
   3ef58:	14 c0       	rjmp	.+40     	; 0x3ef82 <processStk500boot+0x9e>
   3ef5a:	45 30       	cpi	r20, 0x05	; 5
   3ef5c:	21 f1       	breq	.+72     	; 0x3efa6 <processStk500boot+0xc2>
   3ef5e:	e0 f0       	brcs	.+56     	; 0x3ef98 <processStk500boot+0xb4>
   3ef60:	46 30       	cpi	r20, 0x06	; 6
   3ef62:	91 f1       	breq	.+100    	; 0x3efc8 <processStk500boot+0xe4>
   3ef64:	7c c0       	rjmp	.+248    	; 0x3f05e <processStk500boot+0x17a>
   3ef66:	8b 31       	cpi	r24, 0x1B	; 27
				case ST_START:

					if(c == MESSAGE_START) {
   3ef68:	31 f7       	brne	.-52     	; 0x3ef36 <processStk500boot+0x52>
   3ef6a:	8b e1       	ldi	r24, 0x1B	; 27
						msgParseState	=	ST_GET_SEQ_NUM;
						checksum		=	MESSAGE_START ^ 0;
   3ef6c:	88 2e       	mov	r8, r24
   3ef6e:	41 e0       	ldi	r20, 0x01	; 1

			switch(msgParseState) {
				case ST_START:

					if(c == MESSAGE_START) {
						msgParseState	=	ST_GET_SEQ_NUM;
   3ef70:	e2 cf       	rjmp	.-60     	; 0x3ef36 <processStk500boot+0x52>
   3ef72:	88 26       	eor	r8, r24

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum			=	c;
					msgParseState	=	ST_MSG_SIZE_1;
					checksum		^=	c;
   3ef74:	c2 5e       	subi	r28, 0xE2	; 226
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
// 			if(boot_state == 1) {
// 				boot_state	=	0;
 				c			=	getch();
   3ef76:	de 4f       	sbci	r29, 0xFE	; 254
   3ef78:	88 83       	st	Y, r24
   3ef7a:	ce 51       	subi	r28, 0x1E	; 30
   3ef7c:	d1 40       	sbci	r29, 0x01	; 1
   3ef7e:	42 e0       	ldi	r20, 0x02	; 2
					break;

				case ST_GET_SEQ_NUM:
#ifdef _FIX_ISSUE_505_
					seqNum			=	c;
					msgParseState	=	ST_MSG_SIZE_1;
   3ef80:	da cf       	rjmp	.-76     	; 0x3ef36 <processStk500boot+0x52>
					} else {
						msgParseState	=	ST_START;
					}

#endif
					break;
   3ef82:	08 2f       	mov	r16, r24

				case ST_MSG_SIZE_1:
					msgLength		=	c << 8;
   3ef84:	10 e0       	ldi	r17, 0x00	; 0
   3ef86:	10 2f       	mov	r17, r16
   3ef88:	00 27       	eor	r16, r16
   3ef8a:	88 26       	eor	r8, r24
					msgParseState	=	ST_MSG_SIZE_2;
					checksum		^=	c;
   3ef8c:	43 e0       	ldi	r20, 0x03	; 3
#endif
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c << 8;
					msgParseState	=	ST_MSG_SIZE_2;
   3ef8e:	d3 cf       	rjmp	.-90     	; 0x3ef36 <processStk500boot+0x52>
					checksum		^=	c;
					break;
   3ef90:	08 2b       	or	r16, r24

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
   3ef92:	88 26       	eor	r8, r24
					msgParseState	=	ST_GET_TOKEN;
					checksum		^=	c;
   3ef94:	44 e0       	ldi	r20, 0x04	; 4
					checksum		^=	c;
					break;

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
					msgParseState	=	ST_GET_TOKEN;
   3ef96:	cf cf       	rjmp	.-98     	; 0x3ef36 <processStk500boot+0x52>
					checksum		^=	c;
					break;
   3ef98:	8e 30       	cpi	r24, 0x0E	; 14

				case ST_GET_TOKEN:

					if(c == TOKEN) {
   3ef9a:	61 f6       	brne	.-104    	; 0x3ef34 <processStk500boot+0x50>
   3ef9c:	88 26       	eor	r8, r24
						msgParseState	=	ST_GET_DATA;
						checksum		^=	c;
   3ef9e:	21 2c       	mov	r2, r1
						ii				=	0;
   3efa0:	31 2c       	mov	r3, r1
   3efa2:	45 e0       	ldi	r20, 0x05	; 5
					break;

				case ST_GET_TOKEN:

					if(c == TOKEN) {
						msgParseState	=	ST_GET_DATA;
   3efa4:	c8 cf       	rjmp	.-112    	; 0x3ef36 <processStk500boot+0x52>
   3efa6:	91 01       	movw	r18, r2
					}

					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
   3efa8:	2f 5f       	subi	r18, 0xFF	; 255
   3efaa:	3f 4f       	sbci	r19, 0xFF	; 255
   3efac:	e1 e0       	ldi	r30, 0x01	; 1
   3efae:	f0 e0       	ldi	r31, 0x00	; 0
   3efb0:	ec 0f       	add	r30, r28
   3efb2:	fd 1f       	adc	r31, r29
   3efb4:	e2 0d       	add	r30, r2
   3efb6:	f3 1d       	adc	r31, r3
   3efb8:	80 83       	st	Z, r24
   3efba:	88 26       	eor	r8, r24
					checksum		^=	c;
   3efbc:	20 17       	cp	r18, r16

					if(ii == msgLength) {
   3efbe:	31 07       	cpc	r19, r17
   3efc0:	09 f4       	brne	.+2      	; 0x3efc4 <processStk500boot+0xe0>
   3efc2:	35 c2       	rjmp	.+1130   	; 0x3f42e <processStk500boot+0x54a>
   3efc4:	19 01       	movw	r2, r18
   3efc6:	b7 cf       	rjmp	.-146    	; 0x3ef36 <processStk500boot+0x52>
   3efc8:	88 11       	cpse	r24, r8

					break;

				case ST_GET_CHECK:

					if(c == checksum) {
   3efca:	b4 cf       	rjmp	.-152    	; 0x3ef34 <processStk500boot+0x50>
   3efcc:	49 81       	ldd	r20, Y+1	; 0x01

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3efce:	43 31       	cpi	r20, 0x13	; 19
   3efd0:	09 f4       	brne	.+2      	; 0x3efd4 <processStk500boot+0xf0>
   3efd2:	e2 c0       	rjmp	.+452    	; 0x3f198 <processStk500boot+0x2b4>
   3efd4:	60 f5       	brcc	.+88     	; 0x3f02e <processStk500boot+0x14a>
   3efd6:	46 30       	cpi	r20, 0x06	; 6
   3efd8:	09 f4       	brne	.+2      	; 0x3efdc <processStk500boot+0xf8>
   3efda:	cb c0       	rjmp	.+406    	; 0x3f172 <processStk500boot+0x28e>
   3efdc:	00 f5       	brcc	.+64     	; 0x3f01e <processStk500boot+0x13a>
   3efde:	42 30       	cpi	r20, 0x02	; 2
   3efe0:	09 f4       	brne	.+2      	; 0x3efe4 <processStk500boot+0x100>
   3efe2:	41 c0       	rjmp	.+130    	; 0x3f066 <processStk500boot+0x182>
   3efe4:	43 30       	cpi	r20, 0x03	; 3
   3efe6:	09 f4       	brne	.+2      	; 0x3efea <processStk500boot+0x106>
   3efe8:	6b c0       	rjmp	.+214    	; 0x3f0c0 <processStk500boot+0x1dc>
   3efea:	41 30       	cpi	r20, 0x01	; 1
   3efec:	09 f0       	breq	.+2      	; 0x3eff0 <processStk500boot+0x10c>
   3efee:	9d c1       	rjmp	.+826    	; 0x3f32a <processStk500boot+0x446>
   3eff0:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;
#endif
			case CMD_SIGN_ON:
				msgLength		=	11;
				msgBuffer[1] 	=	STATUS_CMD_OK;
   3eff2:	88 e0       	ldi	r24, 0x08	; 8
				msgBuffer[2] 	=	8;
   3eff4:	8b 83       	std	Y+3, r24	; 0x03
   3eff6:	81 e4       	ldi	r24, 0x41	; 65
				msgBuffer[3] 	=	'A';
   3eff8:	8c 83       	std	Y+4, r24	; 0x04
   3effa:	86 e5       	ldi	r24, 0x56	; 86
				msgBuffer[4] 	=	'V';
   3effc:	8d 83       	std	Y+5, r24	; 0x05
   3effe:	82 e5       	ldi	r24, 0x52	; 82
				msgBuffer[5] 	=	'R';
   3f000:	8e 83       	std	Y+6, r24	; 0x06
   3f002:	89 e4       	ldi	r24, 0x49	; 73
				msgBuffer[6] 	=	'I';
   3f004:	8f 83       	std	Y+7, r24	; 0x07
   3f006:	83 e5       	ldi	r24, 0x53	; 83
				msgBuffer[7] 	=	'S';
   3f008:	88 87       	std	Y+8, r24	; 0x08
   3f00a:	80 e5       	ldi	r24, 0x50	; 80
				msgBuffer[8] 	=	'P';
   3f00c:	89 87       	std	Y+9, r24	; 0x09
   3f00e:	8f e5       	ldi	r24, 0x5F	; 95
				msgBuffer[9] 	=	'_';
   3f010:	8a 87       	std	Y+10, r24	; 0x0a
   3f012:	82 e3       	ldi	r24, 0x32	; 50
				msgBuffer[10]	=	'2';
   3f014:	8b 87       	std	Y+11, r24	; 0x0b
   3f016:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3f018:	0b e0       	ldi	r16, 0x0B	; 11
				}
			}
			break;
#endif
			case CMD_SIGN_ON:
				msgLength		=	11;
   3f01a:	10 e0       	ldi	r17, 0x00	; 0
   3f01c:	8b c1       	rjmp	.+790    	; 0x3f334 <processStk500boot+0x450>
				msgBuffer[6] 	=	'I';
				msgBuffer[7] 	=	'S';
				msgBuffer[8] 	=	'P';
				msgBuffer[9] 	=	'_';
				msgBuffer[10]	=	'2';
				break;
   3f01e:	41 31       	cpi	r20, 0x11	; 17

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3f020:	09 f4       	brne	.+2      	; 0x3f024 <processStk500boot+0x140>
   3f022:	5b c0       	rjmp	.+182    	; 0x3f0da <processStk500boot+0x1f6>
   3f024:	08 f0       	brcs	.+2      	; 0x3f028 <processStk500boot+0x144>
   3f026:	9c c0       	rjmp	.+312    	; 0x3f160 <processStk500boot+0x27c>
   3f028:	40 31       	cpi	r20, 0x10	; 16
   3f02a:	e9 f0       	breq	.+58     	; 0x3f066 <processStk500boot+0x182>
   3f02c:	7e c1       	rjmp	.+764    	; 0x3f32a <processStk500boot+0x446>
   3f02e:	48 31       	cpi	r20, 0x18	; 24
   3f030:	09 f4       	brne	.+2      	; 0x3f034 <processStk500boot+0x150>
   3f032:	6e c0       	rjmp	.+220    	; 0x3f110 <processStk500boot+0x22c>
   3f034:	48 f4       	brcc	.+18     	; 0x3f048 <processStk500boot+0x164>
   3f036:	45 31       	cpi	r20, 0x15	; 21
   3f038:	09 f4       	brne	.+2      	; 0x3f03c <processStk500boot+0x158>
   3f03a:	ae c0       	rjmp	.+348    	; 0x3f198 <processStk500boot+0x2b4>
   3f03c:	08 f4       	brcc	.+2      	; 0x3f040 <processStk500boot+0x15c>
   3f03e:	25 c1       	rjmp	.+586    	; 0x3f28a <processStk500boot+0x3a6>
   3f040:	46 31       	cpi	r20, 0x16	; 22
   3f042:	09 f4       	brne	.+2      	; 0x3f046 <processStk500boot+0x162>
   3f044:	22 c1       	rjmp	.+580    	; 0x3f28a <processStk500boot+0x3a6>
   3f046:	71 c1       	rjmp	.+738    	; 0x3f32a <processStk500boot+0x446>
   3f048:	4a 31       	cpi	r20, 0x1A	; 26
   3f04a:	09 f4       	brne	.+2      	; 0x3f04e <processStk500boot+0x16a>
   3f04c:	54 c0       	rjmp	.+168    	; 0x3f0f6 <processStk500boot+0x212>
   3f04e:	08 f4       	brcc	.+2      	; 0x3f052 <processStk500boot+0x16e>
   3f050:	75 c0       	rjmp	.+234    	; 0x3f13c <processStk500boot+0x258>
   3f052:	4b 31       	cpi	r20, 0x1B	; 27
   3f054:	09 f4       	brne	.+2      	; 0x3f058 <processStk500boot+0x174>
   3f056:	44 c0       	rjmp	.+136    	; 0x3f0e0 <processStk500boot+0x1fc>
   3f058:	4d 31       	cpi	r20, 0x1D	; 29
   3f05a:	39 f0       	breq	.+14     	; 0x3f06a <processStk500boot+0x186>
   3f05c:	66 c1       	rjmp	.+716    	; 0x3f32a <processStk500boot+0x446>
   3f05e:	47 30       	cpi	r20, 0x07	; 7
		/*
		 * Collect received bytes to a complete message
		 */
		msgParseState	=	ST_START;

		while(msgParseState != ST_PROCESS) {
   3f060:	09 f4       	brne	.+2      	; 0x3f064 <processStk500boot+0x180>
   3f062:	b4 cf       	rjmp	.-152    	; 0x3efcc <processStk500boot+0xe8>
   3f064:	68 cf       	rjmp	.-304    	; 0x3ef36 <processStk500boot+0x52>
   3f066:	20 e0       	ldi	r18, 0x00	; 0

		/*
		 * Now process the STK500 commands, see Atmel Appnote AVR068
		 */

		switch(msgBuffer[0]) {
   3f068:	39 c0       	rjmp	.+114    	; 0x3f0dc <processStk500boot+0x1f8>
   3f06a:	8d 81       	ldd	r24, Y+5	; 0x05
#ifndef REMOVE_CMD_SPI_MULTI
			case CMD_SPI_MULTI: {
				unsigned char answerByte;
				unsigned char flag = 0;

				if(msgBuffer[4] == 0x30) {
   3f06c:	80 33       	cpi	r24, 0x30	; 48
   3f06e:	39 f4       	brne	.+14     	; 0x3f07e <processStk500boot+0x19a>
   3f070:	9f 81       	ldd	r25, Y+7	; 0x07
					unsigned char signatureIndex	=	msgBuffer[6];
   3f072:	99 23       	and	r25, r25

					if(signatureIndex == 0) {
   3f074:	b1 f0       	breq	.+44     	; 0x3f0a2 <processStk500boot+0x1be>
   3f076:	91 30       	cpi	r25, 0x01	; 1
						//answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
						answerByte	=	SIGNATURE_0;
					} else if(signatureIndex == 1) {
   3f078:	b1 f4       	brne	.+44     	; 0x3f0a6 <processStk500boot+0x1c2>
   3f07a:	98 e9       	ldi	r25, 0x98	; 152
						//answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						answerByte	=	SIGNATURE_1;
   3f07c:	17 c0       	rjmp	.+46     	; 0x3f0ac <processStk500boot+0x1c8>
   3f07e:	98 2f       	mov	r25, r24
					} else {
						//answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						answerByte	=	SIGNATURE_2;
					}
				} else if(msgBuffer[4] & 0x50) {
   3f080:	90 75       	andi	r25, 0x50	; 80
   3f082:	99 f0       	breq	.+38     	; 0x3f0aa <processStk500boot+0x1c6>
   3f084:	80 35       	cpi	r24, 0x50	; 80
					//*	Issue 544: 	stk500v2 bootloader doesn't support reading fuses
					//*	I cant find the docs that say what these are supposed to be but this was figured out by trial and error
					//	answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					//	answerByte	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
					if(msgBuffer[4] == 0x50) {
   3f086:	21 f4       	brne	.+8      	; 0x3f090 <processStk500boot+0x1ac>
   3f088:	99 e0       	ldi	r25, 0x09	; 9
						answerByte	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3f08a:	e0 e0       	ldi	r30, 0x00	; 0
   3f08c:	f0 e0       	ldi	r31, 0x00	; 0
   3f08e:	05 c0       	rjmp	.+10     	; 0x3f09a <processStk500boot+0x1b6>
   3f090:	88 35       	cpi	r24, 0x58	; 88
					} else if(msgBuffer[4] == 0x58) {
   3f092:	59 f4       	brne	.+22     	; 0x3f0aa <processStk500boot+0x1c6>
   3f094:	e3 e0       	ldi	r30, 0x03	; 3
						answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3f096:	f0 e0       	ldi	r31, 0x00	; 0
   3f098:	99 e0       	ldi	r25, 0x09	; 9
   3f09a:	90 93 57 00 	sts	0x0057, r25
   3f09e:	94 91       	lpm	r25, Z
   3f0a0:	05 c0       	rjmp	.+10     	; 0x3f0ac <processStk500boot+0x1c8>
   3f0a2:	9e e1       	ldi	r25, 0x1E	; 30
				if(msgBuffer[4] == 0x30) {
					unsigned char signatureIndex	=	msgBuffer[6];

					if(signatureIndex == 0) {
						//answerByte	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
						answerByte	=	SIGNATURE_0;
   3f0a4:	03 c0       	rjmp	.+6      	; 0x3f0ac <processStk500boot+0x1c8>
   3f0a6:	91 e0       	ldi	r25, 0x01	; 1
					} else if(signatureIndex == 1) {
						//answerByte	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
						answerByte	=	SIGNATURE_1;
					} else {
						//answerByte	=	SIGNATURE_BYTES & 0x000000FF;
						answerByte	=	SIGNATURE_2;
   3f0a8:	01 c0       	rjmp	.+2      	; 0x3f0ac <processStk500boot+0x1c8>
   3f0aa:	90 e0       	ldi	r25, 0x00	; 0
						answerByte	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
					} else {
						answerByte	=	0;
					}
				} else {
					answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
   3f0ac:	1a 82       	std	Y+2, r1	; 0x02
				}

				if(!flag) {
					msgLength		=	7;
					msgBuffer[1]	=	STATUS_CMD_OK;
   3f0ae:	1b 82       	std	Y+3, r1	; 0x03
					msgBuffer[2]	=	0;
   3f0b0:	8c 83       	std	Y+4, r24	; 0x04
					msgBuffer[3]	=	msgBuffer[4];
   3f0b2:	1d 82       	std	Y+5, r1	; 0x05
					msgBuffer[4]	=	0;
   3f0b4:	9e 83       	std	Y+6, r25	; 0x06
					msgBuffer[5]	=	answerByte;
   3f0b6:	1f 82       	std	Y+7, r1	; 0x07
					msgBuffer[6]	=	STATUS_CMD_OK;
   3f0b8:	20 e0       	ldi	r18, 0x00	; 0
   3f0ba:	07 e0       	ldi	r16, 0x07	; 7
				} else {
					answerByte	=	0; // for all others command are not implemented, return dummy value for AVRDUDE happy <Worapoht>
				}

				if(!flag) {
					msgLength		=	7;
   3f0bc:	10 e0       	ldi	r17, 0x00	; 0
   3f0be:	3a c1       	rjmp	.+628    	; 0x3f334 <processStk500boot+0x450>
   3f0c0:	ea 81       	ldd	r30, Y+2	; 0x02
   3f0c2:	e0 59       	subi	r30, 0x90	; 144
   3f0c4:	e3 30       	cpi	r30, 0x03	; 3
   3f0c6:	28 f4       	brcc	.+10     	; 0x3f0d2 <processStk500boot+0x1ee>
   3f0c8:	f0 e0       	ldi	r31, 0x00	; 0
   3f0ca:	e4 5e       	subi	r30, 0xE4	; 228
   3f0cc:	fd 4f       	sbci	r31, 0xFD	; 253
   3f0ce:	80 81       	ld	r24, Z
   3f0d0:	01 c0       	rjmp	.+2      	; 0x3f0d4 <processStk500boot+0x1f0>
   3f0d2:	80 e0       	ldi	r24, 0x00	; 0
				break;

			case CMD_GET_PARAMETER: {
				unsigned char value;

				switch(msgBuffer[1]) {
   3f0d4:	1a 82       	std	Y+2, r1	; 0x02
						value	=	0;
						break;
				}

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f0d6:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[2]	=	value;
   3f0d8:	3f c0       	rjmp	.+126    	; 0x3f158 <processStk500boot+0x274>
   3f0da:	21 e0       	ldi	r18, 0x01	; 1
			}
			break;

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave	=	1;
   3f0dc:	1a 82       	std	Y+2, r1	; 0x02
				//*	fall thru

			case CMD_SET_PARAMETER:
			case CMD_ENTER_PROGMODE_ISP:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f0de:	28 c1       	rjmp	.+592    	; 0x3f330 <processStk500boot+0x44c>
   3f0e0:	8d 81       	ldd	r24, Y+5	; 0x05
				break;

			case CMD_READ_SIGNATURE_ISP: {
				unsigned char signatureIndex	=	msgBuffer[4];
   3f0e2:	88 23       	and	r24, r24
				unsigned char signature;

				if(signatureIndex == 0)
   3f0e4:	21 f0       	breq	.+8      	; 0x3f0ee <processStk500boot+0x20a>
   3f0e6:	81 30       	cpi	r24, 0x01	; 1
					//signature	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
					signature	=	SIGNATURE_0;
				else if(signatureIndex == 1)
   3f0e8:	21 f4       	brne	.+8      	; 0x3f0f2 <processStk500boot+0x20e>
   3f0ea:	88 e9       	ldi	r24, 0x98	; 152
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
   3f0ec:	24 c0       	rjmp	.+72     	; 0x3f136 <processStk500boot+0x252>
   3f0ee:	8e e1       	ldi	r24, 0x1E	; 30
				unsigned char signatureIndex	=	msgBuffer[4];
				unsigned char signature;

				if(signatureIndex == 0)
					//signature	=	(SIGNATURE_BYTES >> 16) & 0x000000FF;
					signature	=	SIGNATURE_0;
   3f0f0:	22 c0       	rjmp	.+68     	; 0x3f136 <processStk500boot+0x252>
   3f0f2:	81 e0       	ldi	r24, 0x01	; 1
				else if(signatureIndex == 1)
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
				else
					//signature	=	SIGNATURE_BYTES & 0x000000FF;
					signature	=	SIGNATURE_2;
   3f0f4:	20 c0       	rjmp	.+64     	; 0x3f136 <processStk500boot+0x252>
   3f0f6:	1a 82       	std	Y+2, r1	; 0x02
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f0f8:	e1 e0       	ldi	r30, 0x01	; 1
				msgBuffer[2]	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
   3f0fa:	f0 e0       	ldi	r31, 0x00	; 0
   3f0fc:	89 e0       	ldi	r24, 0x09	; 9
   3f0fe:	80 93 57 00 	sts	0x0057, r24
   3f102:	e4 91       	lpm	r30, Z
   3f104:	eb 83       	std	Y+3, r30	; 0x03
   3f106:	1c 82       	std	Y+4, r1	; 0x04
				msgBuffer[3]	=	STATUS_CMD_OK;
   3f108:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3f10a:	04 e0       	ldi	r16, 0x04	; 4
				msgBuffer[3]	=	STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength		=	4;
   3f10c:	10 e0       	ldi	r17, 0x00	; 0
   3f10e:	12 c1       	rjmp	.+548    	; 0x3f334 <processStk500boot+0x450>
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	boot_lock_fuse_bits_get(GET_LOCK_BITS);
				msgBuffer[3]	=	STATUS_CMD_OK;
				break;
   3f110:	8b 81       	ldd	r24, Y+3	; 0x03

			case CMD_READ_FUSE_ISP: {
				unsigned char fuseBits;

				if(msgBuffer[2] == 0x50) {
   3f112:	80 35       	cpi	r24, 0x50	; 80
   3f114:	51 f4       	brne	.+20     	; 0x3f12a <processStk500boot+0x246>
   3f116:	8c 81       	ldd	r24, Y+4	; 0x04
					if(msgBuffer[3] == 0x08)
   3f118:	88 30       	cpi	r24, 0x08	; 8
   3f11a:	19 f4       	brne	.+6      	; 0x3f122 <processStk500boot+0x23e>
   3f11c:	e2 e0       	ldi	r30, 0x02	; 2
						fuseBits	=	boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS);
   3f11e:	f0 e0       	ldi	r31, 0x00	; 0
   3f120:	06 c0       	rjmp	.+12     	; 0x3f12e <processStk500boot+0x24a>
   3f122:	89 e0       	ldi	r24, 0x09	; 9
					else
						fuseBits	=	boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS);
   3f124:	e0 e0       	ldi	r30, 0x00	; 0
   3f126:	f0 e0       	ldi	r31, 0x00	; 0
   3f128:	03 c0       	rjmp	.+6      	; 0x3f130 <processStk500boot+0x24c>
   3f12a:	e3 e0       	ldi	r30, 0x03	; 3
				} else {
					fuseBits	=	boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS);
   3f12c:	f0 e0       	ldi	r31, 0x00	; 0
   3f12e:	89 e0       	ldi	r24, 0x09	; 9
   3f130:	80 93 57 00 	sts	0x0057, r24
   3f134:	84 91       	lpm	r24, Z
   3f136:	1a 82       	std	Y+2, r1	; 0x02
				}

				msgLength		=	4;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f138:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[2]	=	fuseBits;
   3f13a:	e5 cf       	rjmp	.-54     	; 0x3f106 <processStk500boot+0x222>
   3f13c:	8d 81       	ldd	r24, Y+5	; 0x05

#ifndef REMOVE_PROGRAM_LOCK_BIT_SUPPORT
			case CMD_PROGRAM_LOCK_ISP: {
				unsigned char lockBits	=	msgBuffer[4];

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
   3f13e:	83 6c       	ori	r24, 0xC3	; 195
				boot_lock_bits_set(lockBits);		// and program it
   3f140:	99 e0       	ldi	r25, 0x09	; 9
   3f142:	e1 e0       	ldi	r30, 0x01	; 1
   3f144:	f0 e0       	ldi	r31, 0x00	; 0
   3f146:	08 2e       	mov	r0, r24
   3f148:	90 93 57 00 	sts	0x0057, r25
   3f14c:	e8 95       	spm
   3f14e:	07 b6       	in	r0, 0x37	; 55
				boot_spm_busy_wait();
   3f150:	00 fc       	sbrc	r0, 0
   3f152:	fd cf       	rjmp	.-6      	; 0x3f14e <processStk500boot+0x26a>
   3f154:	1a 82       	std	Y+2, r1	; 0x02

				msgLength		=	3;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f156:	1b 82       	std	Y+3, r1	; 0x03
				msgBuffer[2]	=	STATUS_CMD_OK;
   3f158:	20 e0       	ldi	r18, 0x00	; 0
			}
			break;
   3f15a:	03 e0       	ldi	r16, 0x03	; 3

				lockBits	=	(~lockBits) & 0x3C;	// mask BLBxx bits
				boot_lock_bits_set(lockBits);		// and program it
				boot_spm_busy_wait();

				msgLength		=	3;
   3f15c:	10 e0       	ldi	r17, 0x00	; 0
   3f15e:	ea c0       	rjmp	.+468    	; 0x3f334 <processStk500boot+0x450>
				msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
   3f160:	80 ec       	ldi	r24, 0xC0	; 192
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
   3f162:	8a 83       	std	Y+2, r24	; 0x02
   3f164:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3f166:	02 e0       	ldi	r16, 0x02	; 2
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
				msgLength		=	2;
   3f168:	10 e0       	ldi	r17, 0x00	; 0
   3f16a:	41 2c       	mov	r4, r1
				msgBuffer[2]	=	STATUS_CMD_OK;
			}
			break;
#endif
			case CMD_CHIP_ERASE_ISP:
				eraseAddress	=	0;
   3f16c:	51 2c       	mov	r5, r1
   3f16e:	32 01       	movw	r6, r4
   3f170:	e1 c0       	rjmp	.+450    	; 0x3f334 <processStk500boot+0x450>
				msgLength		=	2;
				//	msgBuffer[1]	=	STATUS_CMD_OK;
				msgBuffer[1]	=	STATUS_CMD_FAILED;	//*	isue 543, return FAILED instead of OK
				break;
   3f172:	8a 81       	ldd	r24, Y+2	; 0x02

			case CMD_LOAD_ADDRESS:
#if defined(RAMPZ)
				address	=	(((address_t)(msgBuffer[1]) << 24) | ((address_t)(msgBuffer[2]) << 16) | ((address_t)(msgBuffer[3]) << 8) | (msgBuffer[4])) << 1;
   3f174:	cb 80       	ldd	r12, Y+3	; 0x03
   3f176:	d1 2c       	mov	r13, r1
   3f178:	e1 2c       	mov	r14, r1
   3f17a:	f1 2c       	mov	r15, r1
   3f17c:	76 01       	movw	r14, r12
   3f17e:	dd 24       	eor	r13, r13
   3f180:	cc 24       	eor	r12, r12
   3f182:	f8 2a       	or	r15, r24
   3f184:	8d 81       	ldd	r24, Y+5	; 0x05
   3f186:	c8 2a       	or	r12, r24
   3f188:	8c 81       	ldd	r24, Y+4	; 0x04
   3f18a:	d8 2a       	or	r13, r24
   3f18c:	cc 0c       	add	r12, r12
   3f18e:	dd 1c       	adc	r13, r13
   3f190:	ee 1c       	adc	r14, r14
   3f192:	ff 1c       	adc	r15, r15
   3f194:	1a 82       	std	Y+2, r1	; 0x02
#else
				address	=	(((msgBuffer[3]) << 8) | (msgBuffer[4])) << 1;		//convert word to byte address
#endif
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f196:	cb c0       	rjmp	.+406    	; 0x3f32e <processStk500boot+0x44a>
   3f198:	8a 81       	ldd	r24, Y+2	; 0x02
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP: {
				unsigned int	size	=	((msgBuffer[1]) << 8) | msgBuffer[2];
   3f19a:	90 e0       	ldi	r25, 0x00	; 0
   3f19c:	98 2f       	mov	r25, r24
   3f19e:	88 27       	eor	r24, r24
   3f1a0:	2b 81       	ldd	r18, Y+3	; 0x03
   3f1a2:	82 2b       	or	r24, r18
   3f1a4:	43 31       	cpi	r20, 0x13	; 19
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if(msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3f1a6:	09 f0       	breq	.+2      	; 0x3f1aa <processStk500boot+0x2c6>
   3f1a8:	45 c0       	rjmp	.+138    	; 0x3f234 <processStk500boot+0x350>
   3f1aa:	41 14       	cp	r4, r1
					// erase only main section (bootloader protection)
					if(eraseAddress < APP_END) {
   3f1ac:	f0 ec       	ldi	r31, 0xC0	; 192
   3f1ae:	5f 06       	cpc	r5, r31
   3f1b0:	f3 e0       	ldi	r31, 0x03	; 3
   3f1b2:	6f 06       	cpc	r6, r31
   3f1b4:	71 04       	cpc	r7, r1
   3f1b6:	70 f4       	brcc	.+28     	; 0x3f1d4 <processStk500boot+0x2f0>
   3f1b8:	23 e0       	ldi	r18, 0x03	; 3
						boot_page_erase(eraseAddress);	// Perform page erase
   3f1ba:	f2 01       	movw	r30, r4
   3f1bc:	60 92 5b 00 	sts	0x005B, r6
   3f1c0:	20 93 57 00 	sts	0x0057, r18
   3f1c4:	e8 95       	spm
   3f1c6:	07 b6       	in	r0, 0x37	; 55
						boot_spm_busy_wait();		// Wait until the memory is erased.
   3f1c8:	00 fc       	sbrc	r0, 0
   3f1ca:	fd cf       	rjmp	.-6      	; 0x3f1c6 <processStk500boot+0x2e2>
   3f1cc:	4f ef       	ldi	r20, 0xFF	; 255
						eraseAddress += SPM_PAGESIZE;	// point to next page to be erase
   3f1ce:	54 1a       	sub	r5, r20
   3f1d0:	64 0a       	sbc	r6, r20
   3f1d2:	74 0a       	sbc	r7, r20
   3f1d4:	4b 85       	ldd	r20, Y+11	; 0x0b
   3f1d6:	46 01       	movw	r8, r12
				else if(signatureIndex == 1)
					//signature	=	(SIGNATURE_BYTES >> 8) & 0x000000FF;
					signature	=	SIGNATURE_1;
				else
					//signature	=	SIGNATURE_BYTES & 0x000000FF;
					signature	=	SIGNATURE_2;
   3f1d8:	57 01       	movw	r10, r14
   3f1da:	9e 01       	movw	r18, r28
   3f1dc:	25 5f       	subi	r18, 0xF5	; 245
   3f1de:	3f 4f       	sbci	r19, 0xFF	; 255
   3f1e0:	d9 01       	movw	r26, r18
   3f1e2:	12 96       	adiw	r26, 0x02	; 2
   3f1e4:	9d 01       	movw	r18, r26
   3f1e6:	fd 01       	movw	r30, r26
   3f1e8:	31 97       	sbiw	r30, 0x01	; 1
   3f1ea:	60 81       	ld	r22, Z
					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;

						data		=	(highByte << 8) | lowByte;
   3f1ec:	50 e0       	ldi	r21, 0x00	; 0
   3f1ee:	56 2b       	or	r21, r22
   3f1f0:	61 e0       	ldi	r22, 0x01	; 1
						boot_page_fill(address, data);
   3f1f2:	0a 01       	movw	r0, r20
   3f1f4:	f4 01       	movw	r30, r8
   3f1f6:	a0 92 5b 00 	sts	0x005B, r10
   3f1fa:	60 93 57 00 	sts	0x0057, r22
   3f1fe:	e8 95       	spm
   3f200:	11 24       	eor	r1, r1
   3f202:	e2 e0       	ldi	r30, 0x02	; 2

						address	=	address + 2;	// Select next word in memory
   3f204:	8e 0e       	add	r8, r30
   3f206:	91 1c       	adc	r9, r1
   3f208:	a1 1c       	adc	r10, r1
   3f20a:	b1 1c       	adc	r11, r1
   3f20c:	02 97       	sbiw	r24, 0x02	; 2
						size	-=	2;				// Reduce number of bytes to write by two
   3f20e:	00 97       	sbiw	r24, 0x00	; 0
					} while(size);					// Loop until all bytes written
   3f210:	11 f0       	breq	.+4      	; 0x3f216 <processStk500boot+0x332>
   3f212:	4c 91       	ld	r20, X
					}

					/* Write FLASH */
					do {
						lowByte		=	*p++;
						highByte 	=	*p++;
   3f214:	e5 cf       	rjmp	.-54     	; 0x3f1e0 <processStk500boot+0x2fc>
   3f216:	85 e0       	ldi	r24, 0x05	; 5

						address	=	address + 2;	// Select next word in memory
						size	-=	2;				// Reduce number of bytes to write by two
					} while(size);					// Loop until all bytes written

					boot_page_write(tempaddress);
   3f218:	f6 01       	movw	r30, r12
   3f21a:	e0 92 5b 00 	sts	0x005B, r14
   3f21e:	80 93 57 00 	sts	0x0057, r24
   3f222:	e8 95       	spm
   3f224:	07 b6       	in	r0, 0x37	; 55
					boot_spm_busy_wait();
   3f226:	00 fc       	sbrc	r0, 0
   3f228:	fd cf       	rjmp	.-6      	; 0x3f224 <processStk500boot+0x340>
   3f22a:	81 e1       	ldi	r24, 0x11	; 17
					boot_rww_enable();				// Re-enable the RWW section
   3f22c:	80 93 57 00 	sts	0x0057, r24
   3f230:	e8 95       	spm
   3f232:	27 c0       	rjmp	.+78     	; 0x3f282 <processStk500boot+0x39e>
   3f234:	fe 01       	movw	r30, r28
   3f236:	3b 96       	adiw	r30, 0x0b	; 11
   3f238:	9c 01       	movw	r18, r24
				unsigned int	data;
				unsigned char	highByte, lowByte;
				address_t		tempaddress	=	address;


				if(msgBuffer[0] == CMD_PROGRAM_FLASH_ISP) {
   3f23a:	b7 01       	movw	r22, r14
   3f23c:	a6 01       	movw	r20, r12
   3f23e:	41 bd       	out	0x21, r20	; 33
					//*	issue 543, this should work, It has not been tested.
					//	#if (!defined(__AVR_ATmega1280__) && !defined(__AVR_ATmega2560__)  && !defined(__AVR_ATmega2561__)  && !defined(__AVR_ATmega1284P__)  && !defined(__AVR_ATmega640__))
#if (defined(EEARL) && defined(EEARH)  && defined(EEMWE)  && defined(EEWE)  && defined(EEDR))
					/* write EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3f240:	85 2e       	mov	r8, r21
						EEARH	=	(address >> 8);
   3f242:	96 2e       	mov	r9, r22
   3f244:	a7 2e       	mov	r10, r23
   3f246:	bb 24       	eor	r11, r11
   3f248:	82 bc       	out	0x22, r8	; 34
   3f24a:	4f 5f       	subi	r20, 0xFF	; 255
						address++;						// Select next EEPROM byte
   3f24c:	5f 4f       	sbci	r21, 0xFF	; 255
   3f24e:	6f 4f       	sbci	r22, 0xFF	; 255
   3f250:	7f 4f       	sbci	r23, 0xFF	; 255
   3f252:	a1 91       	ld	r26, Z+

						EEDR	=	*p++;				// get byte from buffer
   3f254:	a0 bd       	out	0x20, r26	; 32
   3f256:	fa 9a       	sbi	0x1f, 2	; 31
						EECR	|=	(1 << EEMWE);			// Write data into EEPROM
   3f258:	f9 9a       	sbi	0x1f, 1	; 31
						EECR	|=	(1 << EEWE);
   3f25a:	f9 99       	sbic	0x1f, 1	; 31

						while(EECR & (1 << EEWE))
   3f25c:	fe cf       	rjmp	.-4      	; 0x3f25a <processStk500boot+0x376>
   3f25e:	21 50       	subi	r18, 0x01	; 1
							;	// Wait for write operation to finish

						size--;						// Decrease number of bytes to write
   3f260:	31 09       	sbc	r19, r1
   3f262:	21 15       	cp	r18, r1
					} while(size);					// Loop until all bytes written
   3f264:	31 05       	cpc	r19, r1
   3f266:	59 f7       	brne	.-42     	; 0x3f23e <processStk500boot+0x35a>
   3f268:	01 97       	sbiw	r24, 0x01	; 1
   3f26a:	4c 01       	movw	r8, r24
   3f26c:	a1 2c       	mov	r10, r1
   3f26e:	b1 2c       	mov	r11, r1
   3f270:	ff ef       	ldi	r31, 0xFF	; 255
   3f272:	8f 1a       	sub	r8, r31
   3f274:	9f 0a       	sbc	r9, r31
   3f276:	af 0a       	sbc	r10, r31
   3f278:	bf 0a       	sbc	r11, r31
   3f27a:	8c 0c       	add	r8, r12
   3f27c:	9d 1c       	adc	r9, r13
   3f27e:	ae 1c       	adc	r10, r14
   3f280:	bf 1c       	adc	r11, r15
   3f282:	1a 82       	std	Y+2, r1	; 0x02

#endif
				}

				msgLength	=	2;
				msgBuffer[1]	=	STATUS_CMD_OK;
   3f284:	75 01       	movw	r14, r10
			}
			break;
   3f286:	64 01       	movw	r12, r8
   3f288:	52 c0       	rjmp	.+164    	; 0x3f32e <processStk500boot+0x44a>
   3f28a:	2a 81       	ldd	r18, Y+2	; 0x02

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP: {
				unsigned int	size	=	((msgBuffer[1]) << 8) | msgBuffer[2];
   3f28c:	30 e0       	ldi	r19, 0x00	; 0
   3f28e:	32 2f       	mov	r19, r18
   3f290:	22 27       	eor	r18, r18
   3f292:	8b 81       	ldd	r24, Y+3	; 0x03
   3f294:	28 2b       	or	r18, r24
   3f296:	89 01       	movw	r16, r18
				unsigned char*	p		=	msgBuffer + 1;
				msgLength				=	size + 3;
   3f298:	0d 5f       	subi	r16, 0xFD	; 253
   3f29a:	1f 4f       	sbci	r17, 0xFF	; 255
   3f29c:	1a 82       	std	Y+2, r1	; 0x02

				*p++	=	STATUS_CMD_OK;
   3f29e:	44 31       	cpi	r20, 0x14	; 20

				if(msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3f2a0:	b1 f4       	brne	.+44     	; 0x3f2ce <processStk500boot+0x3ea>
   3f2a2:	de 01       	movw	r26, r28
   3f2a4:	13 96       	adiw	r26, 0x03	; 3
   3f2a6:	eb be       	out	0x3b, r14	; 59

					// Read FLASH
					do {
						//#if defined(RAMPZ)
#if (FLASHEND > 0x10000)
						data	=	pgm_read_word_far(address);
   3f2a8:	f6 01       	movw	r30, r12
   3f2aa:	87 91       	elpm	r24, Z+
   3f2ac:	96 91       	elpm	r25, Z
   3f2ae:	8c 93       	st	X, r24
#else
						data	=	pgm_read_word_near(address);
#endif
						*p++	=	(unsigned char)data;		//LSB
   3f2b0:	12 96       	adiw	r26, 0x02	; 2
   3f2b2:	fd 01       	movw	r30, r26
   3f2b4:	31 97       	sbiw	r30, 0x01	; 1
   3f2b6:	90 83       	st	Z, r25
						*p++	=	(unsigned char)(data >> 8);	//MSB
   3f2b8:	42 e0       	ldi	r20, 0x02	; 2
						address	+=	2;							// Select next word in memory
   3f2ba:	c4 0e       	add	r12, r20
   3f2bc:	d1 1c       	adc	r13, r1
   3f2be:	e1 1c       	adc	r14, r1
   3f2c0:	f1 1c       	adc	r15, r1
   3f2c2:	22 50       	subi	r18, 0x02	; 2
						size	-=	2;
   3f2c4:	31 09       	sbc	r19, r1
   3f2c6:	21 15       	cp	r18, r1
					} while(size);
   3f2c8:	31 05       	cpc	r19, r1
   3f2ca:	69 f7       	brne	.-38     	; 0x3f2a6 <processStk500boot+0x3c2>
   3f2cc:	2b c0       	rjmp	.+86     	; 0x3f324 <processStk500boot+0x440>
   3f2ce:	ce 01       	movw	r24, r28
   3f2d0:	03 96       	adiw	r24, 0x03	; 3
   3f2d2:	5c 01       	movw	r10, r24
   3f2d4:	49 01       	movw	r8, r18
				unsigned char*	p		=	msgBuffer + 1;
				msgLength				=	size + 3;

				*p++	=	STATUS_CMD_OK;

				if(msgBuffer[0] == CMD_READ_FLASH_ISP) {
   3f2d6:	d7 01       	movw	r26, r14
   3f2d8:	c6 01       	movw	r24, r12
   3f2da:	81 bd       	out	0x21, r24	; 33
						size	-=	2;
					} while(size);
				} else {
					/* Read EEPROM */
					do {
						EEARL	=	address;			// Setup EEPROM address
   3f2dc:	49 2f       	mov	r20, r25
						EEARH	=	((address >> 8));
   3f2de:	5a 2f       	mov	r21, r26
   3f2e0:	6b 2f       	mov	r22, r27
   3f2e2:	77 27       	eor	r23, r23
   3f2e4:	42 bd       	out	0x22, r20	; 34
   3f2e6:	01 96       	adiw	r24, 0x01	; 1
						address++;					// Select next EEPROM byte
   3f2e8:	a1 1d       	adc	r26, r1
   3f2ea:	b1 1d       	adc	r27, r1
   3f2ec:	f8 9a       	sbi	0x1f, 0	; 31
						EECR	|=	(1 << EERE);			// Read EEPROM
   3f2ee:	40 b5       	in	r20, 0x20	; 32
						*p++	=	EEDR;				// Send EEPROM data
   3f2f0:	f5 01       	movw	r30, r10
   3f2f2:	41 93       	st	Z+, r20
   3f2f4:	5f 01       	movw	r10, r30
   3f2f6:	f1 e0       	ldi	r31, 0x01	; 1
						size--;
   3f2f8:	8f 1a       	sub	r8, r31
   3f2fa:	91 08       	sbc	r9, r1
   3f2fc:	81 14       	cp	r8, r1
					} while(size);
   3f2fe:	91 04       	cpc	r9, r1
   3f300:	61 f7       	brne	.-40     	; 0x3f2da <processStk500boot+0x3f6>
   3f302:	c9 01       	movw	r24, r18
   3f304:	01 97       	sbiw	r24, 0x01	; 1
   3f306:	a0 e0       	ldi	r26, 0x00	; 0
   3f308:	b0 e0       	ldi	r27, 0x00	; 0
   3f30a:	01 96       	adiw	r24, 0x01	; 1
   3f30c:	a1 1d       	adc	r26, r1
   3f30e:	b1 1d       	adc	r27, r1
   3f310:	c8 0e       	add	r12, r24
   3f312:	d9 1e       	adc	r13, r25
   3f314:	ea 1e       	adc	r14, r26
   3f316:	fb 1e       	adc	r15, r27
   3f318:	a3 e0       	ldi	r26, 0x03	; 3
   3f31a:	b0 e0       	ldi	r27, 0x00	; 0
   3f31c:	ac 0f       	add	r26, r28
   3f31e:	bd 1f       	adc	r27, r29
   3f320:	a2 0f       	add	r26, r18
   3f322:	b3 1f       	adc	r27, r19
   3f324:	1c 92       	st	X, r1
				}

				*p++	=	STATUS_CMD_OK;
   3f326:	20 e0       	ldi	r18, 0x00	; 0
			}
			break;
   3f328:	05 c0       	rjmp	.+10     	; 0x3f334 <processStk500boot+0x450>
   3f32a:	80 ec       	ldi	r24, 0xC0	; 192

			default:
				msgLength		=	2;
				msgBuffer[1]	=	STATUS_CMD_FAILED;
   3f32c:	8a 83       	std	Y+2, r24	; 0x02
   3f32e:	20 e0       	ldi	r18, 0x00	; 0
				break;
   3f330:	02 e0       	ldi	r16, 0x02	; 2
				*p++	=	STATUS_CMD_OK;
			}
			break;

			default:
				msgLength		=	2;
   3f332:	10 e0       	ldi	r17, 0x00	; 0
   3f334:	8b e1       	ldi	r24, 0x1B	; 27
		}

		/*
		 * Now send answer message back
		 */
		putch(MESSAGE_START);
   3f336:	c0 5e       	subi	r28, 0xE0	; 224
   3f338:	de 4f       	sbci	r29, 0xFE	; 254
   3f33a:	28 83       	st	Y, r18
   3f33c:	c0 52       	subi	r28, 0x20	; 32
   3f33e:	d1 40       	sbci	r29, 0x01	; 1
   3f340:	70 dd       	rcall	.-1312   	; 0x3ee22 <putch>
   3f342:	c2 5e       	subi	r28, 0xE2	; 226
   3f344:	de 4f       	sbci	r29, 0xFE	; 254
		checksum	=	MESSAGE_START ^ 0;

		putch(seqNum);
   3f346:	88 81       	ld	r24, Y
   3f348:	ce 51       	subi	r28, 0x1E	; 30
   3f34a:	d1 40       	sbci	r29, 0x01	; 1
   3f34c:	6a dd       	rcall	.-1324   	; 0x3ee22 <putch>
   3f34e:	a1 2e       	mov	r10, r17
   3f350:	bb 24       	eor	r11, r11
   3f352:	8a 2d       	mov	r24, r10
		checksum	^=	seqNum;

		c			=	((msgLength >> 8) & 0xFF);
   3f354:	66 dd       	rcall	.-1332   	; 0x3ee22 <putch>
   3f356:	80 2f       	mov	r24, r16
		putch(c);
   3f358:	64 dd       	rcall	.-1336   	; 0x3ee22 <putch>
   3f35a:	8e e0       	ldi	r24, 0x0E	; 14
   3f35c:	62 dd       	rcall	.-1340   	; 0x3ee22 <putch>
		checksum	^=	c;

		c			=	msgLength & 0x00FF;
		putch(c);
   3f35e:	25 e1       	ldi	r18, 0x15	; 21
   3f360:	82 2e       	mov	r8, r18
   3f362:	c2 5e       	subi	r28, 0xE2	; 226
		checksum ^= c;

		putch(TOKEN);
   3f364:	de 4f       	sbci	r29, 0xFE	; 254
   3f366:	48 81       	ld	r20, Y
   3f368:	ce 51       	subi	r28, 0x1E	; 30
		putch(seqNum);
		checksum	^=	seqNum;

		c			=	((msgLength >> 8) & 0xFF);
		putch(c);
		checksum	^=	c;
   3f36a:	d1 40       	sbci	r29, 0x01	; 1
   3f36c:	84 26       	eor	r8, r20
   3f36e:	80 26       	eor	r8, r16
   3f370:	8a 24       	eor	r8, r10
   3f372:	ce 01       	movw	r24, r28
   3f374:	01 96       	adiw	r24, 0x01	; 1
   3f376:	5c 01       	movw	r10, r24
   3f378:	08 0f       	add	r16, r24

		c			=	msgLength & 0x00FF;
		putch(c);
		checksum ^= c;
   3f37a:	19 1f       	adc	r17, r25

		putch(TOKEN);
		checksum ^= TOKEN;
   3f37c:	c0 5e       	subi	r28, 0xE0	; 224
   3f37e:	de 4f       	sbci	r29, 0xFE	; 254
   3f380:	28 81       	ld	r18, Y
   3f382:	c0 52       	subi	r28, 0x20	; 32
   3f384:	d1 40       	sbci	r29, 0x01	; 1
   3f386:	a0 16       	cp	r10, r16
		p	=	msgBuffer;

		while(msgLength) {
			c	=	*p++;
			putch(c);
			checksum ^= c;
   3f388:	b1 06       	cpc	r11, r17
   3f38a:	b1 f0       	breq	.+44     	; 0x3f3b8 <processStk500boot+0x4d4>
   3f38c:	f5 01       	movw	r30, r10
   3f38e:	31 91       	ld	r19, Z+
   3f390:	5f 01       	movw	r10, r30
		putch(TOKEN);
		checksum ^= TOKEN;

		p	=	msgBuffer;

		while(msgLength) {
   3f392:	83 2f       	mov	r24, r19
   3f394:	c0 5e       	subi	r28, 0xE0	; 224
   3f396:	de 4f       	sbci	r29, 0xFE	; 254
			c	=	*p++;
   3f398:	28 83       	st	Y, r18
   3f39a:	c0 52       	subi	r28, 0x20	; 32
   3f39c:	d1 40       	sbci	r29, 0x01	; 1
			putch(c);
   3f39e:	c1 5e       	subi	r28, 0xE1	; 225
   3f3a0:	de 4f       	sbci	r29, 0xFE	; 254
   3f3a2:	38 83       	st	Y, r19
   3f3a4:	cf 51       	subi	r28, 0x1F	; 31
   3f3a6:	d1 40       	sbci	r29, 0x01	; 1
   3f3a8:	3c dd       	rcall	.-1416   	; 0x3ee22 <putch>
   3f3aa:	c1 5e       	subi	r28, 0xE1	; 225
   3f3ac:	de 4f       	sbci	r29, 0xFE	; 254
   3f3ae:	38 81       	ld	r19, Y
   3f3b0:	cf 51       	subi	r28, 0x1F	; 31
   3f3b2:	d1 40       	sbci	r29, 0x01	; 1
   3f3b4:	83 26       	eor	r8, r19
   3f3b6:	e2 cf       	rjmp	.-60     	; 0x3f37c <processStk500boot+0x498>
			checksum ^= c;
   3f3b8:	88 2d       	mov	r24, r8
   3f3ba:	c0 5e       	subi	r28, 0xE0	; 224
   3f3bc:	de 4f       	sbci	r29, 0xFE	; 254
   3f3be:	28 83       	st	Y, r18
   3f3c0:	c0 52       	subi	r28, 0x20	; 32
   3f3c2:	d1 40       	sbci	r29, 0x01	; 1
   3f3c4:	2e dd       	rcall	.-1444   	; 0x3ee22 <putch>
			msgLength--;
		}

		putch(checksum);
   3f3c6:	c2 5e       	subi	r28, 0xE2	; 226
   3f3c8:	de 4f       	sbci	r29, 0xFE	; 254
   3f3ca:	48 81       	ld	r20, Y
   3f3cc:	ce 51       	subi	r28, 0x1E	; 30
   3f3ce:	d1 40       	sbci	r29, 0x01	; 1
   3f3d0:	4f 5f       	subi	r20, 0xFF	; 255
   3f3d2:	c2 5e       	subi	r28, 0xE2	; 226
   3f3d4:	de 4f       	sbci	r29, 0xFE	; 254
		seqNum++;
   3f3d6:	48 83       	st	Y, r20
   3f3d8:	ce 51       	subi	r28, 0x1E	; 30
   3f3da:	d1 40       	sbci	r29, 0x01	; 1
   3f3dc:	c0 5e       	subi	r28, 0xE0	; 224
   3f3de:	de 4f       	sbci	r29, 0xFE	; 254
   3f3e0:	28 81       	ld	r18, Y
   3f3e2:	c0 52       	subi	r28, 0x20	; 32
   3f3e4:	d1 40       	sbci	r29, 0x01	; 1
   3f3e6:	22 23       	and	r18, r18
   3f3e8:	09 f4       	brne	.+2      	; 0x3f3ec <processStk500boot+0x508>
   3f3ea:	a2 cd       	rjmp	.-1212   	; 0x3ef30 <processStk500boot+0x4c>
	unsigned int	msgLength		=	0;
	unsigned char	msgBuffer[285];
	unsigned char	c, *p;
	unsigned char   isLeave = 0;

	while(!isLeave) {
   3f3ec:	00 00       	nop
   3f3ee:	81 e1       	ldi	r24, 0x11	; 17
   3f3f0:	80 93 57 00 	sts	0x0057, r24
   3f3f4:	e8 95       	spm
   3f3f6:	6e ee       	ldi	r22, 0xEE	; 238
   3f3f8:	82 e0       	ldi	r24, 0x02	; 2
   3f3fa:	90 e0       	ldi	r25, 0x00	; 0
		putch(checksum);
		seqNum++;

	}

	asm volatile("nop");			// wait until port has changed
   3f3fc:	2c d0       	rcall	.+88     	; 0x3f456 <__eewr_byte_m2560>
	 * Now leave bootloader
	 */
	//TODO: find out what this does
	//UART_STATUS_REG	&=	0xfd;
#if defined(RWWSRE)
	boot_rww_enable();				// enable application section
   3f3fe:	80 e0       	ldi	r24, 0x00	; 0
   3f400:	c0 5e       	subi	r28, 0xE0	; 224
   3f402:	de 4f       	sbci	r29, 0xFE	; 254
   3f404:	de bf       	out	0x3e, r29	; 62
#endif
	eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
   3f406:	cd bf       	out	0x3d, r28	; 61
   3f408:	df 91       	pop	r29
   3f40a:	cf 91       	pop	r28
   3f40c:	1f 91       	pop	r17
   3f40e:	0f 91       	pop	r16
	return(0);
}
   3f410:	ff 90       	pop	r15
   3f412:	ef 90       	pop	r14
   3f414:	df 90       	pop	r13
   3f416:	cf 90       	pop	r12
   3f418:	bf 90       	pop	r11
   3f41a:	af 90       	pop	r10
   3f41c:	9f 90       	pop	r9
   3f41e:	8f 90       	pop	r8
   3f420:	7f 90       	pop	r7
   3f422:	6f 90       	pop	r6
   3f424:	5f 90       	pop	r5
   3f426:	4f 90       	pop	r4
   3f428:	3f 90       	pop	r3
   3f42a:	2f 90       	pop	r2
   3f42c:	08 95       	ret
   3f42e:	18 01       	movw	r2, r16
   3f430:	46 e0       	ldi	r20, 0x06	; 6
   3f432:	81 cd       	rjmp	.-1278   	; 0x3ef36 <processStk500boot+0x52>

0003f434 <memcpy_PF>:
   3f434:	fa 01       	movw	r30, r20
   3f436:	dc 01       	movw	r26, r24
   3f438:	02 c0       	rjmp	.+4      	; 0x3f43e <memcpy_PF+0xa>
   3f43a:	05 90       	lpm	r0, Z+
   3f43c:	0d 92       	st	X+, r0
   3f43e:	21 50       	subi	r18, 0x01	; 1
   3f440:	30 40       	sbci	r19, 0x00	; 0
   3f442:	d8 f7       	brcc	.-10     	; 0x3f43a <memcpy_PF+0x6>
   3f444:	08 95       	ret

0003f446 <__eerd_byte_m2560>:
   3f446:	f9 99       	sbic	0x1f, 1	; 31
   3f448:	fe cf       	rjmp	.-4      	; 0x3f446 <__eerd_byte_m2560>
   3f44a:	92 bd       	out	0x22, r25	; 34
   3f44c:	81 bd       	out	0x21, r24	; 33
   3f44e:	f8 9a       	sbi	0x1f, 0	; 31
   3f450:	99 27       	eor	r25, r25
   3f452:	80 b5       	in	r24, 0x20	; 32
   3f454:	08 95       	ret

0003f456 <__eewr_byte_m2560>:
   3f456:	26 2f       	mov	r18, r22

0003f458 <__eewr_r18_m2560>:
   3f458:	f9 99       	sbic	0x1f, 1	; 31
   3f45a:	fe cf       	rjmp	.-4      	; 0x3f458 <__eewr_r18_m2560>
   3f45c:	1f ba       	out	0x1f, r1	; 31
   3f45e:	92 bd       	out	0x22, r25	; 34
   3f460:	81 bd       	out	0x21, r24	; 33
   3f462:	20 bd       	out	0x20, r18	; 32
   3f464:	0f b6       	in	r0, 0x3f	; 63
   3f466:	f8 94       	cli
   3f468:	fa 9a       	sbi	0x1f, 2	; 31
   3f46a:	f9 9a       	sbi	0x1f, 1	; 31
   3f46c:	0f be       	out	0x3f, r0	; 63
   3f46e:	01 96       	adiw	r24, 0x01	; 1
   3f470:	08 95       	ret

0003f472 <_exit>:
   3f472:	f8 94       	cli

0003f474 <__stop_program>:
   3f474:	ff cf       	rjmp	.-2      	; 0x3f474 <__stop_program>
