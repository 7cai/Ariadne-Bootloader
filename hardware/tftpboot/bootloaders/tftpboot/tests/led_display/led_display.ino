#include <string.h>
#include <avr/pgmspace.h>

void setup()
{
	DDRD = B11111111;  // Set Port D as Output
	DDRC = B111111;
	pinMode(10,OUTPUT);
	pinMode(11,OUTPUT);
	pinMode(8,OUTPUT);  // Set Clock for the shift register
	digitalWrite(8,LOW);  // The D flip-flops of the shift register respond to the rising edge
	set_shiftregister();  // Give initial state to the shift register (B10000000)
	init_output();
}

const unsigned char char_tab[128][8] PROGMEM = {
	{0, 0, 0, 0, 0, 0, 0, 0},                 // null    (0)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // Strtfhea(1)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // Strtftex(2)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // endftext(3)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // endftran(4)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // enquiry (5)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // acknowle(6)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // bell    (7)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // backspac(8)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // horiztab(9)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // NLinefee(10)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // verticta(11)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // NPformfe(12)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // carretur(13)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // shiftout(14)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // shiftin (15)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // datlikes(16)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // devcont1(17)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // devcont2(18)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // devcont3(19)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // devcont4(20)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // negatack(21)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // syncidle(22)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // edftranb(23)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // cancel  (24)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // endfmedi(25)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // substitu(26)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // escape  (27)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // filsepar(28)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // grpsepar(29)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // recsepar(30)
	{0, 0, 0, 0, 0, 0, 0, 0},                 // untsepar(31)
	// Printable Characters
	{0, 0, 0, 0, 0, 0, 0, 0},                 // Space   (32)
	{16, 16, 16, 16, 16, 16, 0, 16},          // !       (33)
	{108, 108, 72, 0, 0, 0, 0, 0},            // "       (34)
	{18, 36, 126, 36, 36, 126, 36, 72},       // #       (35)
	{16, 60, 80, 56, 20, 20, 120, 16},        // $       (36)
	{98, 98, 4, 8, 16, 32, 70, 70},           // %       (37)
	{48, 72, 72, 48, 80, 74, 68, 58},         // &       (38)
	{96, 96, 64, 0, 0, 0, 0, 0},              // '       (39)
	{2, 4, 8, 8, 8, 8, 4, 2},                 // (       (40)
	{64, 32, 16, 16, 16, 16, 32, 64},         // )       (41)
	{0, 0, 20, 8, 62, 8, 20, 0},              // *       (42)
	{0, 0, 8, 8, 62, 8, 8, 0},                // +       (43)
	{0, 0, 0, 0, 48, 48, 16, 32},             // ,       (44)
	{0, 0, 0, 0, 62, 0, 0, 0},                // -       (45)
	{0, 0, 0, 0, 0, 0, 48, 48},               // .       (46)
	{2, 2, 4, 8, 16, 32, 64, 64},             // /       (47)
	{60, 98, 82, 82, 74, 74, 70, 60},         // 0       (48)
	{8, 24, 8, 8, 8, 8, 8, 28},               // 1       (49)
	{60, 66, 2, 12, 16, 32, 64, 126},         // 2       (50)
	{60, 66, 2, 28, 2, 2, 66, 60},            // 3       (51)
	{4, 12, 20, 36, 68, 126, 4, 4},           // 4       (52)
	{126, 64, 64, 124, 2, 2, 66, 60},         // 5       (53)
	{60, 66, 64, 64, 124, 66, 66, 60},        // 6       (54)
	{126, 2, 4, 8, 16, 32, 32, 32},           // 7       (55)
	{60, 66, 66, 60, 66, 66, 66, 60},         // 8       (56)
	{60, 66, 66, 62, 2, 2, 66, 60},           // 9       (57)
	{0, 0, 0, 48, 48, 0, 48, 48},             // :       (58)
	{0, 0, 48, 48, 0, 48, 16, 32},            // ;       (59)
	{0, 0, 4, 8, 16, 8, 4, 0},                // <       (60)
	{0, 0, 0, 62, 0, 62, 0, 0},               // =       (61)
	{0, 0, 16, 8, 4, 8, 16, 0},               // >       (62)
	{60, 66, 2, 4, 8, 8, 0, 8},               // ?       (63)
	{0, 60, 66, 94, 82, 94, 64, 62},          // @       (64)
	{60, 66, 66, 66, 126, 66, 66, 66},        // A       (65)
	{124, 66, 66, 124, 66, 66, 66, 124},      // B       (66)
	{28, 34, 64, 64, 64, 64, 34, 28},         // C       (67)
	{120, 68, 66, 66, 66, 66, 68, 120},       // D       (68)
	{124, 64, 64, 120, 64, 64, 64, 124},      // E       (69)
	{124, 64, 64, 120, 64, 64, 64, 64},       // F       (70)
	{28, 34, 64, 64, 78, 66, 34, 28},         // G       (71)
	{66, 66, 66, 126, 66, 66, 66, 66},        // H       (72)
	{56, 16, 16, 16, 16, 16, 16, 56},         // I       (73)
	{2, 2, 2, 2, 2, 2, 68, 56},               // J       (74)
	{68, 72, 80, 96, 96, 80, 72, 68},         // K       (75)
	{64, 64, 64, 64, 64, 64, 64, 124},        // L       (76)
	{66, 102, 126, 90, 66, 66, 66, 66},       // M       (77)
	{98, 98, 82, 82, 74, 74, 70, 70},         // N       (78)
	{60, 66, 66, 66, 66, 66, 66, 60},         // O       (79)
	{124, 66, 66, 66, 124, 64, 64, 64},       // P       (80)
	{60, 66, 66, 66, 66, 74, 68, 58},         // Q       (81)
	{124, 66, 66, 66, 124, 72, 68, 66},       // R       (82)
	{60, 66, 64, 60, 2, 2, 66, 60},           // S       (83)
	{124, 16, 16, 16, 16, 16, 16, 16},        // T       (84)
	{66, 66, 66, 66, 66, 66, 66, 60},         // U       (85)
	{68, 68, 68, 68, 40, 40, 16, 16},         // V       (86)
	{66, 66, 66, 66, 90, 90, 102, 36},        // W       (87)
	{66, 66, 36, 24, 24, 36, 66, 66},         // X       (88)
	{68, 68, 68, 40, 16, 16, 16, 16},         // Y       (89)
	{126, 2, 4, 8, 16, 32, 64, 126},          // Z       (90)
	{14, 8, 8, 8, 8, 8, 8, 14},               // [       (91)
	{64, 64, 32, 16, 8, 4, 2, 2},             // \       (92)
	{112, 16, 16, 16, 16, 16, 16, 112},       // ]       (93)
	{16, 40, 68, 0, 0, 0, 0, 0},              // ^       (94)
	{0, 0, 0, 0, 0, 0, 0, 62},                // _       (95)
	{32, 16, 8, 0, 0, 0, 0, 0},               // `       (96)
	{0, 0, 0, 56, 4, 60, 36, 60},             // a       (97)
	{0, 32, 32, 32, 56, 36, 36, 56},          // b       (98)
	{0, 0, 0, 0, 28, 32, 32, 28},             // c       (99)
	{0, 4, 4, 4, 28, 36, 36, 28},             // d       (100)
	{0, 0, 0, 24, 36, 60, 32, 28},            // e       (101)
	{0, 8, 20, 16, 16, 56, 16, 16},           // f       (102)
	{0, 28, 36, 36, 28, 4, 4, 56},            // g       (103)
	{0, 32, 32, 32, 56, 36, 36, 36},          // h       (104)
	{0, 0, 16, 0, 48, 16, 16, 56},            // i       (105)
	{0, 8, 0, 24, 8, 8, 40, 16},              // j       (106)
	{0, 32, 32, 36, 40, 48, 40, 36},          // k       (107)
	{0, 48, 16, 16, 16, 16, 16, 56},          // l       (108)
	{0, 0, 0, 0, 104, 84, 84, 84},            // m       (109)
	{0, 0, 0, 0, 56, 36, 36, 36},             // n       (110)
	{0, 0, 0, 0, 24, 36, 36, 24},             // o       (111)
	{0, 56, 36, 36, 56, 32, 32, 32},          // p       (112)
	{0, 28, 36, 36, 28, 4, 4, 4},             // q       (113)
	{0, 0, 0, 40, 52, 32, 32, 32},            // r       (114)
	{0, 0, 0, 28, 32, 24, 4, 56},             // s       (115)
	{0, 16, 16, 56, 16, 16, 20, 8},           // t       (116)
	{0, 0, 0, 0, 36, 36, 36, 28},             // u       (117)
	{0, 0, 0, 0, 68, 68, 40, 16},             // v       (118)
	{0, 0, 0, 0, 68, 84, 84, 40},             // w       (119)
	{0, 0, 0, 68, 40, 16, 40, 68},            // x       (120)
	{0, 0, 36, 36, 28, 4, 4, 56},             // y       (121)
	{0, 0, 60, 4, 8, 16, 32, 60},             // z       (122)
	{2, 4, 4, 8, 4, 4, 4, 2},                 // {       (123)
	{0, 16, 16, 16, 16, 16, 16, 0},           // |       (124)
	{64, 32, 32, 16, 32, 32, 32, 64},         // }       (125)
	{0, 0, 0, 50, 76, 0, 0, 0},               // ~       (126)
	// Non-printable character
	{0, 0, 0, 0, 0, 0, 0, 0}                  // DEL     (127)
};


unsigned long time = millis();
const int scrolling_speed = 100;  // Time to scroll in msec
uint8_t i_th = 0;  // i-th character of the message
char message[] = "Hello FOSSCOMM! P-SPACE, BITCHES!!    ";  // Message to print
uint8_t output[8][3];  // Output mapping
uint8_t s_count = 0;  // # of scrolls for a character


void loop()
{
	uint8_t carry;

	if(millis() - time > 120) {
		time = millis();

		if(s_count == 7) {
			for(uint8_t i=0; i<8; i++)
				output[i][2] = pgm_read_byte(&char_tab[message[i_th]][i]);
			i_th = ++i_th % strlen(message);
			s_count = 0;
		}

		for(uint8_t j=0; j<8; j++) {
			output[j][1] <<= 1;
			carry = SREG & 1;
			output[j][0] = (output[j][0] << 1) + carry;
			output[j][2] <<= 1;
			carry = SREG & 1;
			output[j][1] += carry;
		}

		s_count++;
	}

	for(uint8_t line_i=0; line_i<8; line_i++) {
		PORTD = output[line_i][0];  // Output the line_i-th line of the character
		PORTC = output[line_i][1];
		digitalWrite(10,(output[line_i][1]&64)&&64);
		digitalWrite(11,(output[line_i][1]&128)&&128);
		pulse_clock();
	}  // Move to the next row
}

void set_shiftregister()
{
	// Send a pulse to influence the Set and Reset inputs of the D flip-flops
	// Set bits of shift register (B10000000)
	// Set/Reset inputs respond to the on-state (1)
	pinMode(9,OUTPUT);
	digitalWrite(9,LOW);
	delay(1);
	digitalWrite(9,HIGH);
	delay(20);
	digitalWrite(9,LOW);
}

void init_output()
{
	// Initialize memory to output
	for(uint8_t i=0; i<8; i++) {
		output[i][0] = 0;
		output[i][1] = 0;
		output[i][2] = pgm_read_byte(&char_tab[message[i_th]][i]);
	}
	i_th++;
}

void pulse_clock()
{
	// Send a pulse to the Clock input of the shift register
	// Register response to the rising edge
	digitalWrite(8,HIGH);
	delay(1);
	digitalWrite(8,LOW);
}
