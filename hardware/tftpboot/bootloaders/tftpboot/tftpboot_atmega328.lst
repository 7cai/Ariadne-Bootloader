
tftpboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000160  00800100  00007ab8  00000b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab8  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800260  00800260  00000cac  2**0
                  ALLOC
  3 .stab         0000339c  00000000  00000000  00000cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001101  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00005149  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007000 <__vectors>:
    7000:	50 c0       	rjmp	.+160    	; 0x70a2 <__ctors_end>
    7002:	00 00       	nop
    7004:	ac c0       	rjmp	.+344    	; 0x715e <__bad_interrupt>
    7006:	00 00       	nop
    7008:	aa c0       	rjmp	.+340    	; 0x715e <__bad_interrupt>
    700a:	00 00       	nop
    700c:	a8 c0       	rjmp	.+336    	; 0x715e <__bad_interrupt>
    700e:	00 00       	nop
    7010:	a6 c0       	rjmp	.+332    	; 0x715e <__bad_interrupt>
    7012:	00 00       	nop
    7014:	a4 c0       	rjmp	.+328    	; 0x715e <__bad_interrupt>
    7016:	00 00       	nop
    7018:	a2 c0       	rjmp	.+324    	; 0x715e <__bad_interrupt>
    701a:	00 00       	nop
    701c:	a0 c0       	rjmp	.+320    	; 0x715e <__bad_interrupt>
    701e:	00 00       	nop
    7020:	9e c0       	rjmp	.+316    	; 0x715e <__bad_interrupt>
    7022:	00 00       	nop
    7024:	9c c0       	rjmp	.+312    	; 0x715e <__bad_interrupt>
    7026:	00 00       	nop
    7028:	9a c0       	rjmp	.+308    	; 0x715e <__bad_interrupt>
    702a:	00 00       	nop
    702c:	98 c0       	rjmp	.+304    	; 0x715e <__bad_interrupt>
    702e:	00 00       	nop
    7030:	96 c0       	rjmp	.+300    	; 0x715e <__bad_interrupt>
    7032:	00 00       	nop
    7034:	94 c0       	rjmp	.+296    	; 0x715e <__bad_interrupt>
    7036:	00 00       	nop
    7038:	92 c0       	rjmp	.+292    	; 0x715e <__bad_interrupt>
    703a:	00 00       	nop
    703c:	90 c0       	rjmp	.+288    	; 0x715e <__bad_interrupt>
    703e:	00 00       	nop
    7040:	8e c0       	rjmp	.+284    	; 0x715e <__bad_interrupt>
    7042:	00 00       	nop
    7044:	8c c0       	rjmp	.+280    	; 0x715e <__bad_interrupt>
    7046:	00 00       	nop
    7048:	8a c0       	rjmp	.+276    	; 0x715e <__bad_interrupt>
    704a:	00 00       	nop
    704c:	88 c0       	rjmp	.+272    	; 0x715e <__bad_interrupt>
    704e:	00 00       	nop
    7050:	86 c0       	rjmp	.+268    	; 0x715e <__bad_interrupt>
    7052:	00 00       	nop
    7054:	84 c0       	rjmp	.+264    	; 0x715e <__bad_interrupt>
    7056:	00 00       	nop
    7058:	82 c0       	rjmp	.+260    	; 0x715e <__bad_interrupt>
    705a:	00 00       	nop
    705c:	80 c0       	rjmp	.+256    	; 0x715e <__bad_interrupt>
    705e:	00 00       	nop
    7060:	7e c0       	rjmp	.+252    	; 0x715e <__bad_interrupt>
    7062:	00 00       	nop
    7064:	7c c0       	rjmp	.+248    	; 0x715e <__bad_interrupt>
	...

00007068 <tftp_invalid_image_packet>:
    7068:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    7078:	67 65 20 66 69 6c 65 00                             ge file.

00007080 <tftp_unknown_error_packet>:
    7080:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000708b <tftp_full_error_packet>:
    708b:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007095 <tftp_opcode_error_packet>:
    7095:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

000070a2 <__ctors_end>:
    70a2:	11 24       	eor	r1, r1
    70a4:	1f be       	out	0x3f, r1	; 63
    70a6:	cf ef       	ldi	r28, 0xFF	; 255
    70a8:	d8 e0       	ldi	r29, 0x08	; 8
    70aa:	de bf       	out	0x3e, r29	; 62
    70ac:	cd bf       	out	0x3d, r28	; 61

000070ae <__do_copy_data>:
    70ae:	12 e0       	ldi	r17, 0x02	; 2
    70b0:	a0 e0       	ldi	r26, 0x00	; 0
    70b2:	b1 e0       	ldi	r27, 0x01	; 1
    70b4:	e8 eb       	ldi	r30, 0xB8	; 184
    70b6:	fa e7       	ldi	r31, 0x7A	; 122
    70b8:	02 c0       	rjmp	.+4      	; 0x70be <__do_copy_data+0x10>
    70ba:	05 90       	lpm	r0, Z+
    70bc:	0d 92       	st	X+, r0
    70be:	a0 36       	cpi	r26, 0x60	; 96
    70c0:	b1 07       	cpc	r27, r17
    70c2:	d9 f7       	brne	.-10     	; 0x70ba <__do_copy_data+0xc>

000070c4 <__do_clear_bss>:
    70c4:	12 e0       	ldi	r17, 0x02	; 2
    70c6:	a0 e6       	ldi	r26, 0x60	; 96
    70c8:	b2 e0       	ldi	r27, 0x02	; 2
    70ca:	01 c0       	rjmp	.+2      	; 0x70ce <.do_clear_bss_start>

000070cc <.do_clear_bss_loop>:
    70cc:	1d 92       	st	X+, r1

000070ce <.do_clear_bss_start>:
    70ce:	ad 36       	cpi	r26, 0x6D	; 109
    70d0:	b1 07       	cpc	r27, r17
    70d2:	e1 f7       	brne	.-8      	; 0x70cc <.do_clear_bss_loop>
    70d4:	01 d0       	rcall	.+2      	; 0x70d8 <main>
    70d6:	ee c4       	rjmp	.+2524   	; 0x7ab4 <_exit>

000070d8 <main>:
    70d8:	82 d3       	rcall	.+1796   	; 0x77de <watchdogDisable>
    70da:	2f ef       	ldi	r18, 0xFF	; 255
    70dc:	85 ea       	ldi	r24, 0xA5	; 165
    70de:	9e e0       	ldi	r25, 0x0E	; 14
    70e0:	21 50       	subi	r18, 0x01	; 1
    70e2:	80 40       	sbci	r24, 0x00	; 0
    70e4:	90 40       	sbci	r25, 0x00	; 0
    70e6:	e1 f7       	brne	.-8      	; 0x70e0 <main+0x8>
    70e8:	00 c0       	rjmp	.+0      	; 0x70ea <main+0x12>
    70ea:	00 00       	nop
    70ec:	11 24       	eor	r1, r1
    70ee:	85 e0       	ldi	r24, 0x05	; 5
    70f0:	80 93 81 00 	sts	0x0081, r24
    70f4:	61 d4       	rcall	.+2242   	; 0x79b8 <serialInit>
    70f6:	8c e1       	ldi	r24, 0x1C	; 28
    70f8:	91 e0       	ldi	r25, 0x01	; 1
    70fa:	4e d3       	rcall	.+1692   	; 0x7798 <traceln>
    70fc:	89 d0       	rcall	.+274    	; 0x7210 <netInit>
    70fe:	8b e4       	ldi	r24, 0x4B	; 75
    7100:	91 e0       	ldi	r25, 0x01	; 1
    7102:	4a d3       	rcall	.+1684   	; 0x7798 <traceln>
    7104:	d4 d2       	rcall	.+1448   	; 0x76ae <tftpInit>
    7106:	8f e5       	ldi	r24, 0x5F	; 95
    7108:	91 e0       	ldi	r25, 0x01	; 1
    710a:	46 d3       	rcall	.+1676   	; 0x7798 <traceln>
    710c:	2f ef       	ldi	r18, 0xFF	; 255
    710e:	81 ee       	ldi	r24, 0xE1	; 225
    7110:	94 e0       	ldi	r25, 0x04	; 4
    7112:	21 50       	subi	r18, 0x01	; 1
    7114:	80 40       	sbci	r24, 0x00	; 0
    7116:	90 40       	sbci	r25, 0x00	; 0
    7118:	e1 f7       	brne	.-8      	; 0x7112 <main+0x3a>
    711a:	00 c0       	rjmp	.+0      	; 0x711c <main+0x44>
    711c:	00 00       	nop
    711e:	10 92 68 02 	sts	0x0268, r1
    7122:	10 92 69 02 	sts	0x0269, r1
    7126:	80 91 68 02 	lds	r24, 0x0268
    712a:	88 23       	and	r24, r24
    712c:	29 f0       	breq	.+10     	; 0x7138 <main+0x60>
    712e:	80 91 69 02 	lds	r24, 0x0269
    7132:	88 23       	and	r24, r24
    7134:	39 f0       	breq	.+14     	; 0x7144 <main+0x6c>
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <main+0x68>
    7138:	d6 d2       	rcall	.+1452   	; 0x76e6 <tftpPoll>
    713a:	81 11       	cpse	r24, r1
    713c:	f8 cf       	rjmp	.-16     	; 0x712e <main+0x56>
    713e:	05 c0       	rjmp	.+10     	; 0x714a <main+0x72>
    7140:	68 d4       	rcall	.+2256   	; 0x7a12 <updateLed>
    7142:	f1 cf       	rjmp	.-30     	; 0x7126 <main+0x4e>
    7144:	2f d4       	rcall	.+2142   	; 0x79a4 <serialPoll>
    7146:	81 11       	cpse	r24, r1
    7148:	fb cf       	rjmp	.-10     	; 0x7140 <main+0x68>
    714a:	84 e7       	ldi	r24, 0x74	; 116
    714c:	91 e0       	ldi	r25, 0x01	; 1
    714e:	24 d3       	rcall	.+1608   	; 0x7798 <traceln>
    7150:	e0 91 60 02 	lds	r30, 0x0260
    7154:	f0 91 61 02 	lds	r31, 0x0261
    7158:	09 95       	icall
    715a:	80 e0       	ldi	r24, 0x00	; 0
    715c:	90 e0       	ldi	r25, 0x00	; 0

0000715e <__bad_interrupt>:
    715e:	50 cf       	rjmp	.-352    	; 0x7000 <__vectors>

00007160 <netWriteReg>:
	trace(", ");
	tracenum(value);
#endif

	// Send uint8_t to Ethernet controller
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    7160:	20 e5       	ldi	r18, 0x50	; 80
    7162:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    7164:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_WRITE;
    7166:	20 ef       	ldi	r18, 0xF0	; 240
    7168:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    716a:	0d b4       	in	r0, 0x2d	; 45
    716c:	07 fe       	sbrs	r0, 7
    716e:	fd cf       	rjmp	.-6      	; 0x716a <netWriteReg+0xa>
	SPDR = address >> 8;
    7170:	29 2f       	mov	r18, r25
    7172:	33 27       	eor	r19, r19
    7174:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    7176:	0d b4       	in	r0, 0x2d	; 45
    7178:	07 fe       	sbrs	r0, 7
    717a:	fd cf       	rjmp	.-6      	; 0x7176 <netWriteReg+0x16>
	SPDR = address & 0xff;
    717c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    717e:	0d b4       	in	r0, 0x2d	; 45
    7180:	07 fe       	sbrs	r0, 7
    7182:	fd cf       	rjmp	.-6      	; 0x717e <netWriteReg+0x1e>
	SPDR = value;
    7184:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
    7186:	0d b4       	in	r0, 0x2d	; 45
    7188:	07 fe       	sbrs	r0, 7
    718a:	fd cf       	rjmp	.-6      	; 0x7186 <netWriteReg+0x26>
	SS_HIGH();
    718c:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 0; // Turn of SPI
    718e:	1c bc       	out	0x2c, r1	; 44
    7190:	08 95       	ret

00007192 <netReadReg>:
//    tracenum(address);
//#endif

	// Read uint8_t from Ethernet controller
	uint8_t returnValue;
	SPCR = _BV(SPE) | _BV(MSTR);
    7192:	20 e5       	ldi	r18, 0x50	; 80
    7194:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    7196:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_READ;
    7198:	2f e0       	ldi	r18, 0x0F	; 15
    719a:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    719c:	0d b4       	in	r0, 0x2d	; 45
    719e:	07 fe       	sbrs	r0, 7
    71a0:	fd cf       	rjmp	.-6      	; 0x719c <netReadReg+0xa>
	SPDR = address >> 8;
    71a2:	29 2f       	mov	r18, r25
    71a4:	33 27       	eor	r19, r19
    71a6:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71a8:	0d b4       	in	r0, 0x2d	; 45
    71aa:	07 fe       	sbrs	r0, 7
    71ac:	fd cf       	rjmp	.-6      	; 0x71a8 <netReadReg+0x16>
	SPDR = address & 0xff;
    71ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71b0:	0d b4       	in	r0, 0x2d	; 45
    71b2:	07 fe       	sbrs	r0, 7
    71b4:	fd cf       	rjmp	.-6      	; 0x71b0 <netReadReg+0x1e>
	SPDR = 0;
    71b6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    71b8:	0d b4       	in	r0, 0x2d	; 45
    71ba:	07 fe       	sbrs	r0, 7
    71bc:	fd cf       	rjmp	.-6      	; 0x71b8 <netReadReg+0x26>
	SS_HIGH();
    71be:	2a 9a       	sbi	0x05, 2	; 5
	returnValue = SPDR;
    71c0:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
    71c2:	1c bc       	out	0x2c, r1	; 44
	return(returnValue);
}
    71c4:	08 95       	ret

000071c6 <netReadWord>:

uint16_t netReadWord(uint16_t address)
{
    71c6:	ef 92       	push	r14
    71c8:	ff 92       	push	r15
    71ca:	cf 93       	push	r28
    71cc:	7c 01       	movw	r14, r24
	// Read uint16_t from Ethernet controller
	return((netReadReg(address) << 8) | netReadReg(address + 1));
    71ce:	e1 df       	rcall	.-62     	; 0x7192 <netReadReg>
    71d0:	c8 2f       	mov	r28, r24
    71d2:	c7 01       	movw	r24, r14
    71d4:	01 96       	adiw	r24, 0x01	; 1
    71d6:	dd df       	rcall	.-70     	; 0x7192 <netReadReg>
    71d8:	2c 2f       	mov	r18, r28
    71da:	30 e0       	ldi	r19, 0x00	; 0
    71dc:	32 2f       	mov	r19, r18
    71de:	22 27       	eor	r18, r18
}
    71e0:	a9 01       	movw	r20, r18
    71e2:	48 2b       	or	r20, r24
    71e4:	ca 01       	movw	r24, r20
    71e6:	cf 91       	pop	r28
    71e8:	ff 90       	pop	r15
    71ea:	ef 90       	pop	r14
    71ec:	08 95       	ret

000071ee <netWriteWord>:

void netWriteWord(uint16_t address, uint16_t value)
{
    71ee:	cf 92       	push	r12
    71f0:	df 92       	push	r13
    71f2:	ef 92       	push	r14
    71f4:	ff 92       	push	r15
    71f6:	7c 01       	movw	r14, r24
    71f8:	6b 01       	movw	r12, r22
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
    71fa:	67 2f       	mov	r22, r23
    71fc:	77 27       	eor	r23, r23
    71fe:	b0 df       	rcall	.-160    	; 0x7160 <netWriteReg>
	netWriteReg(address, value & 0xff);
    7200:	6c 2d       	mov	r22, r12
    7202:	c7 01       	movw	r24, r14
    7204:	01 96       	adiw	r24, 0x01	; 1
}
    7206:	ff 90       	pop	r15
    7208:	ef 90       	pop	r14
    720a:	df 90       	pop	r13
    720c:	cf 90       	pop	r12

void netWriteWord(uint16_t address, uint16_t value)
{
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
	netWriteReg(address, value & 0xff);
    720e:	a8 cf       	rjmp	.-176    	; 0x7160 <netWriteReg>

00007210 <netInit>:
}

void netInit()
{
    7210:	cf 92       	push	r12
    7212:	df 92       	push	r13
    7214:	ef 92       	push	r14
    7216:	ff 92       	push	r15
    7218:	cf 93       	push	r28
    721a:	df 93       	push	r29
	// Set up outputs to communicate with W5100 chip
	// Set pins as output
	DDRB = _BV(SCK) | _BV(MOSI) | _BV(SS);
    721c:	8c e2       	ldi	r24, 0x2C	; 44
    721e:	84 b9       	out	0x04, r24	; 4
	// Set pins high
	PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
    7220:	8c e3       	ldi	r24, 0x3C	; 60
    7222:	85 b9       	out	0x05, r24	; 5
	PORTB |= _BV(LED);
#endif

	// Set up SPI
	// Set the Double SPI Speed Bit
	SPSR = (1 << SPI2X);
    7224:	81 e0       	ldi	r24, 0x01	; 1
    7226:	8d bd       	out	0x2d, r24	; 45

	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    7228:	80 e0       	ldi	r24, 0x00	; 0
    722a:	90 e0       	ldi	r25, 0x00	; 0
    722c:	2d d4       	rcall	.+2138   	; 0x7a88 <__eerd_byte_m328p>
    722e:	85 35       	cpi	r24, 0x55	; 85
    7230:	e1 f4       	brne	.+56     	; 0x726a <netInit+0x5a>
		&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    7232:	81 e0       	ldi	r24, 0x01	; 1
    7234:	90 e0       	ldi	r25, 0x00	; 0
    7236:	28 d4       	rcall	.+2128   	; 0x7a88 <__eerd_byte_m328p>
    7238:	8a 3a       	cpi	r24, 0xAA	; 170
    723a:	b9 f4       	brne	.+46     	; 0x726a <netInit+0x5a>

//#ifdef _DEBUG_NET
		traceln(" Net: Using EEPROM settings");
    723c:	89 e8       	ldi	r24, 0x89	; 137
    723e:	91 e0       	ldi	r25, 0x01	; 1
    7240:	ab d2       	rcall	.+1366   	; 0x7798 <traceln>
    7242:	b1 e0       	ldi	r27, 0x01	; 1
    7244:	cb 2e       	mov	r12, r27
    7246:	b1 e0       	ldi	r27, 0x01	; 1
    7248:	db 2e       	mov	r13, r27
    724a:	c3 e0       	ldi	r28, 0x03	; 3
    724c:	ec 2e       	mov	r14, r28
    724e:	f1 2c       	mov	r15, r1
//#endif
		uint8_t i;
		for(i = 0; i < 18; i++)
			registerBuffer[i+1] = eeprom_read_byte(EEPROM_DATA+i);
    7250:	c7 01       	movw	r24, r14
    7252:	1a d4       	rcall	.+2100   	; 0x7a88 <__eerd_byte_m328p>
    7254:	f6 01       	movw	r30, r12
    7256:	81 93       	st	Z+, r24
    7258:	6f 01       	movw	r12, r30
    725a:	ff ef       	ldi	r31, 0xFF	; 255
    725c:	ef 1a       	sub	r14, r31
    725e:	ff 0a       	sbc	r15, r31

//#ifdef _DEBUG_NET
		traceln(" Net: Using EEPROM settings");
//#endif
		uint8_t i;
		for(i = 0; i < 18; i++)
    7260:	85 e1       	ldi	r24, 0x15	; 21
    7262:	e8 16       	cp	r14, r24
    7264:	f1 04       	cpc	r15, r1
    7266:	a1 f7       	brne	.-24     	; 0x7250 <netInit+0x40>
    7268:	03 c0       	rjmp	.+6      	; 0x7270 <netInit+0x60>
			registerBuffer[i+1] = eeprom_read_byte(EEPROM_DATA+i);
	}
//#ifdef _DEBUG_NET
	else {
		traceln(" Net: Using built-in settings");
    726a:	85 ea       	ldi	r24, 0xA5	; 165
    726c:	91 e0       	ldi	r25, 0x01	; 1
    726e:	94 d2       	rcall	.+1320   	; 0x7798 <traceln>
	}
//#endif

	uint8_t i;
	traceln("\tAddress: ");
    7270:	83 ec       	ldi	r24, 0xC3	; 195
    7272:	91 e0       	ldi	r25, 0x01	; 1
    7274:	91 d2       	rcall	.+1314   	; 0x7798 <traceln>
    7276:	af e0       	ldi	r26, 0x0F	; 15
    7278:	ea 2e       	mov	r14, r26
    727a:	a1 e0       	ldi	r26, 0x01	; 1
    727c:	fa 2e       	mov	r15, r26
	for(i = 15; i < 19; i++) {
    727e:	cf e0       	ldi	r28, 0x0F	; 15
		tracenum(registerBuffer[i]);
    7280:	f7 01       	movw	r30, r14
    7282:	81 91       	ld	r24, Z+
    7284:	7f 01       	movw	r14, r30
    7286:	90 e0       	ldi	r25, 0x00	; 0
    7288:	91 d2       	rcall	.+1314   	; 0x77ac <tracenum>
		if(i != 18) putch(0x2E);
    728a:	c2 31       	cpi	r28, 0x12	; 18
    728c:	11 f0       	breq	.+4      	; 0x7292 <netInit+0x82>
    728e:	8e e2       	ldi	r24, 0x2E	; 46
    7290:	a2 d3       	rcall	.+1860   	; 0x79d6 <putch>
	}
//#endif

	uint8_t i;
	traceln("\tAddress: ");
	for(i = 15; i < 19; i++) {
    7292:	cf 5f       	subi	r28, 0xFF	; 255
    7294:	c3 31       	cpi	r28, 0x13	; 19
    7296:	a1 f7       	brne	.-24     	; 0x7280 <netInit+0x70>
		tracenum(registerBuffer[i]);
		if(i != 18) putch(0x2E);
	}
	traceln("\t Subnet: ");
    7298:	8e ec       	ldi	r24, 0xCE	; 206
    729a:	91 e0       	ldi	r25, 0x01	; 1
    729c:	7d d2       	rcall	.+1274   	; 0x7798 <traceln>
    729e:	f5 e0       	ldi	r31, 0x05	; 5
    72a0:	ef 2e       	mov	r14, r31
    72a2:	f1 e0       	ldi	r31, 0x01	; 1
    72a4:	ff 2e       	mov	r15, r31
	for(i = 5; i < 9; i++) {
    72a6:	c5 e0       	ldi	r28, 0x05	; 5
		tracenum(registerBuffer[i]);
    72a8:	f7 01       	movw	r30, r14
    72aa:	81 91       	ld	r24, Z+
    72ac:	7f 01       	movw	r14, r30
    72ae:	90 e0       	ldi	r25, 0x00	; 0
    72b0:	7d d2       	rcall	.+1274   	; 0x77ac <tracenum>
		if(i != 8) putch(0x2E);
    72b2:	c8 30       	cpi	r28, 0x08	; 8
    72b4:	11 f0       	breq	.+4      	; 0x72ba <netInit+0xaa>
    72b6:	8e e2       	ldi	r24, 0x2E	; 46
    72b8:	8e d3       	rcall	.+1820   	; 0x79d6 <putch>
	for(i = 15; i < 19; i++) {
		tracenum(registerBuffer[i]);
		if(i != 18) putch(0x2E);
	}
	traceln("\t Subnet: ");
	for(i = 5; i < 9; i++) {
    72ba:	cf 5f       	subi	r28, 0xFF	; 255
    72bc:	c9 30       	cpi	r28, 0x09	; 9
    72be:	a1 f7       	brne	.-24     	; 0x72a8 <netInit+0x98>
		tracenum(registerBuffer[i]);
		if(i != 8) putch(0x2E);
	}
	traceln("\tGateway: ");
    72c0:	89 ed       	ldi	r24, 0xD9	; 217
    72c2:	91 e0       	ldi	r25, 0x01	; 1
    72c4:	69 d2       	rcall	.+1234   	; 0x7798 <traceln>
    72c6:	e1 e0       	ldi	r30, 0x01	; 1
    72c8:	ee 2e       	mov	r14, r30
    72ca:	e1 e0       	ldi	r30, 0x01	; 1
    72cc:	fe 2e       	mov	r15, r30
	for(i = 1; i < 5; i++) {
    72ce:	d1 e0       	ldi	r29, 0x01	; 1
		tracenum(registerBuffer[i]);
    72d0:	f7 01       	movw	r30, r14
    72d2:	81 91       	ld	r24, Z+
    72d4:	7f 01       	movw	r14, r30
    72d6:	90 e0       	ldi	r25, 0x00	; 0
    72d8:	69 d2       	rcall	.+1234   	; 0x77ac <tracenum>
		if(i != 4) putch(0x2E);
    72da:	d4 30       	cpi	r29, 0x04	; 4
    72dc:	11 f0       	breq	.+4      	; 0x72e2 <netInit+0xd2>
    72de:	8e e2       	ldi	r24, 0x2E	; 46
    72e0:	7a d3       	rcall	.+1780   	; 0x79d6 <putch>
	for(i = 5; i < 9; i++) {
		tracenum(registerBuffer[i]);
		if(i != 8) putch(0x2E);
	}
	traceln("\tGateway: ");
	for(i = 1; i < 5; i++) {
    72e2:	df 5f       	subi	r29, 0xFF	; 255
    72e4:	d5 30       	cpi	r29, 0x05	; 5
    72e6:	a1 f7       	brne	.-24     	; 0x72d0 <netInit+0xc0>
		tracenum(registerBuffer[i]);
		if(i != 4) putch(0x2E);
	}
	traceln("\t    MAC: ");
    72e8:	84 ee       	ldi	r24, 0xE4	; 228
    72ea:	91 e0       	ldi	r25, 0x01	; 1
    72ec:	55 d2       	rcall	.+1194   	; 0x7798 <traceln>
    72ee:	79 e0       	ldi	r23, 0x09	; 9
    72f0:	e7 2e       	mov	r14, r23
    72f2:	71 e0       	ldi	r23, 0x01	; 1
    72f4:	f7 2e       	mov	r15, r23
	for(i = 9; i < 15; i++) {
		tracenum(registerBuffer[i]);
    72f6:	f7 01       	movw	r30, r14
    72f8:	81 91       	ld	r24, Z+
    72fa:	7f 01       	movw	r14, r30
    72fc:	90 e0       	ldi	r25, 0x00	; 0
    72fe:	56 d2       	rcall	.+1196   	; 0x77ac <tracenum>
		if(i != 14) putch(0x2E);
    7300:	ce 30       	cpi	r28, 0x0E	; 14
    7302:	11 f0       	breq	.+4      	; 0x7308 <netInit+0xf8>
    7304:	8e e2       	ldi	r24, 0x2E	; 46
    7306:	67 d3       	rcall	.+1742   	; 0x79d6 <putch>
	for(i = 1; i < 5; i++) {
		tracenum(registerBuffer[i]);
		if(i != 4) putch(0x2E);
	}
	traceln("\t    MAC: ");
	for(i = 9; i < 15; i++) {
    7308:	cf 5f       	subi	r28, 0xFF	; 255
    730a:	cf 30       	cpi	r28, 0x0F	; 15
    730c:	a1 f7       	brne	.-24     	; 0x72f6 <netInit+0xe6>
    730e:	60 e0       	ldi	r22, 0x00	; 0
    7310:	c6 2e       	mov	r12, r22
    7312:	61 e0       	ldi	r22, 0x01	; 1
    7314:	d6 2e       	mov	r13, r22
    7316:	e1 2c       	mov	r14, r1
    7318:	f1 2c       	mov	r15, r1
		if(i != 14) putch(0x2E);
	}

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
		netWriteReg(i, registerBuffer[i]);
    731a:	f6 01       	movw	r30, r12
    731c:	61 91       	ld	r22, Z+
    731e:	6f 01       	movw	r12, r30
    7320:	c7 01       	movw	r24, r14
    7322:	1e df       	rcall	.-452    	; 0x7160 <netWriteReg>
    7324:	ff ef       	ldi	r31, 0xFF	; 255
    7326:	ef 1a       	sub	r14, r31
    7328:	ff 0a       	sbc	r15, r31
		tracenum(registerBuffer[i]);
		if(i != 14) putch(0x2E);
	}

	// Configure Wiznet chip
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++)
    732a:	8c e1       	ldi	r24, 0x1C	; 28
    732c:	e8 16       	cp	r14, r24
    732e:	f1 04       	cpc	r15, r1
    7330:	a1 f7       	brne	.-24     	; 0x731a <netInit+0x10a>
		netWriteReg(i, registerBuffer[i]);
}
    7332:	df 91       	pop	r29
    7334:	cf 91       	pop	r28
    7336:	ff 90       	pop	r15
    7338:	ef 90       	pop	r14
    733a:	df 90       	pop	r13
    733c:	cf 90       	pop	r12
    733e:	08 95       	ret

00007340 <processPacket>:
#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
{
    7340:	af 92       	push	r10
    7342:	bf 92       	push	r11
    7344:	cf 92       	push	r12
    7346:	df 92       	push	r13
    7348:	ef 92       	push	r14
    734a:	ff 92       	push	r15
    734c:	cf 93       	push	r28
    734e:	df 93       	push	r29
    7350:	cd b7       	in	r28, 0x3d	; 61
    7352:	de b7       	in	r29, 0x3e	; 62
    7354:	cc 50       	subi	r28, 0x0C	; 12
    7356:	d2 40       	sbci	r29, 0x02	; 2
    7358:	de bf       	out	0x3e, r29	; 62
    735a:	cd bf       	out	0x3d, r28	; 61
	tracenum(packetSize);
	if(packetSize >= 0x800) traceln("Tftp: Overflow");
	//  step();
#endif

	readPointer = netReadWord(REG_S3_RX_RD0);
    735c:	88 e2       	ldi	r24, 0x28	; 40
    735e:	97 e0       	ldi	r25, 0x07	; 7
    7360:	32 df       	rcall	.-412    	; 0x71c6 <netReadWord>
#ifdef _DEBUG_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
    7362:	00 97       	sbiw	r24, 0x00	; 0
    7364:	11 f4       	brne	.+4      	; 0x736a <processPacket+0x2a>
    7366:	80 e0       	ldi	r24, 0x00	; 0
    7368:	98 e7       	ldi	r25, 0x78	; 120
    736a:	ee 24       	eor	r14, r14
    736c:	e3 94       	inc	r14
    736e:	f1 2c       	mov	r15, r1
    7370:	ec 0e       	add	r14, r28
    7372:	fd 1e       	adc	r15, r29

#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
    7374:	5e 01       	movw	r10, r28
    7376:	23 ef       	ldi	r18, 0xF3	; 243
    7378:	a2 1a       	sub	r10, r18
    737a:	2d ef       	ldi	r18, 0xFD	; 253
    737c:	b2 0a       	sbc	r11, r18
		if((count == TFTP_PACKET_MAX_SIZE - 1) || (count == 0)) {
			traceln("Tftp: Reading from position ");
			tracenum(readPointer);
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
    737e:	6c 01       	movw	r12, r24
    7380:	ef ef       	ldi	r30, 0xFF	; 255
    7382:	ce 1a       	sub	r12, r30
    7384:	de 0a       	sbc	r13, r30
    7386:	05 df       	rcall	.-502    	; 0x7192 <netReadReg>
    7388:	f7 01       	movw	r30, r14
    738a:	81 93       	st	Z+, r24
    738c:	7f 01       	movw	r14, r30
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    738e:	c1 14       	cp	r12, r1
    7390:	f0 e8       	ldi	r31, 0x80	; 128
    7392:	df 06       	cpc	r13, r31
    7394:	11 f0       	breq	.+4      	; 0x739a <processPacket+0x5a>
    7396:	c6 01       	movw	r24, r12
    7398:	02 c0       	rjmp	.+4      	; 0x739e <processPacket+0x5e>
    739a:	80 e0       	ldi	r24, 0x00	; 0
    739c:	98 e7       	ldi	r25, 0x78	; 120
#ifdef _DEBUG_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    739e:	ea 14       	cp	r14, r10
    73a0:	fb 04       	cpc	r15, r11
    73a2:	69 f7       	brne	.-38     	; 0x737e <processPacket+0x3e>
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
	}
	netWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
    73a4:	bc 01       	movw	r22, r24
    73a6:	88 e2       	ldi	r24, 0x28	; 40
    73a8:	97 e0       	ldi	r25, 0x07	; 7
    73aa:	21 df       	rcall	.-446    	; 0x71ee <netWriteWord>
	netWriteReg(REG_S3_CR, CR_RECV);
    73ac:	60 e4       	ldi	r22, 0x40	; 64
    73ae:	81 e0       	ldi	r24, 0x01	; 1
    73b0:	97 e0       	ldi	r25, 0x07	; 7
    73b2:	d6 de       	rcall	.-596    	; 0x7160 <netWriteReg>
	while(netReadReg(REG_S3_CR));
    73b4:	81 e0       	ldi	r24, 0x01	; 1
    73b6:	97 e0       	ldi	r25, 0x07	; 7
    73b8:	ec de       	rcall	.-552    	; 0x7192 <netReadReg>
    73ba:	81 11       	cpse	r24, r1
    73bc:	fb cf       	rjmp	.-10     	; 0x73b4 <processPacket+0x74>
    73be:	cc 24       	eor	r12, r12
    73c0:	c3 94       	inc	r12
    73c2:	d1 2c       	mov	r13, r1
    73c4:	cc 0e       	add	r12, r28
    73c6:	dd 1e       	adc	r13, r29
    73c8:	6c e0       	ldi	r22, 0x0C	; 12
    73ca:	e6 2e       	mov	r14, r22
    73cc:	67 e0       	ldi	r22, 0x07	; 7
    73ce:	f6 2e       	mov	r15, r22
	traceln("Tftp: Setting return address");
#endif

	// Set up return IP address and port
	uint8_t i;
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);
    73d0:	f6 01       	movw	r30, r12
    73d2:	61 91       	ld	r22, Z+
    73d4:	6f 01       	movw	r12, r30
    73d6:	c7 01       	movw	r24, r14
    73d8:	c3 de       	rcall	.-634    	; 0x7160 <netWriteReg>
    73da:	ff ef       	ldi	r31, 0xFF	; 255
    73dc:	ef 1a       	sub	r14, r31
    73de:	ff 0a       	sbc	r15, r31
    73e0:	22 e1       	ldi	r18, 0x12	; 18
    73e2:	e2 16       	cp	r14, r18
    73e4:	27 e0       	ldi	r18, 0x07	; 7
    73e6:	f2 06       	cpc	r15, r18
    73e8:	99 f7       	brne	.-26     	; 0x73d0 <processPacket+0x90>

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    73ea:	ef 80       	ldd	r14, Y+7	; 0x07
    73ec:	28 85       	ldd	r18, Y+8	; 0x08
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
    73ee:	cb 84       	ldd	r12, Y+11	; 0x0b
    73f0:	3c 85       	ldd	r19, Y+12	; 0x0c
	uint8_t i;
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
    73f2:	89 85       	ldd	r24, Y+9	; 0x09
    73f4:	90 e0       	ldi	r25, 0x00	; 0
    73f6:	98 2f       	mov	r25, r24
    73f8:	88 27       	eor	r24, r24
    73fa:	4a 85       	ldd	r20, Y+10	; 0x0a
    73fc:	84 0f       	add	r24, r20
    73fe:	91 1d       	adc	r25, r1

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    7400:	83 30       	cpi	r24, 0x03	; 3
    7402:	91 05       	cpc	r25, r1
    7404:	e1 f1       	breq	.+120    	; 0x747e <processPacket+0x13e>
    7406:	38 f4       	brcc	.+14     	; 0x7416 <processPacket+0xd6>
    7408:	81 30       	cpi	r24, 0x01	; 1
    740a:	91 05       	cpc	r25, r1
    740c:	39 f0       	breq	.+14     	; 0x741c <processPacket+0xdc>
    740e:	02 97       	sbiw	r24, 0x02	; 2
    7410:	09 f0       	breq	.+2      	; 0x7414 <processPacket+0xd4>
    7412:	b6 c0       	rjmp	.+364    	; 0x7580 <processPacket+0x240>
    7414:	05 c0       	rjmp	.+10     	; 0x7420 <processPacket+0xe0>
    7416:	06 97       	sbiw	r24, 0x06	; 6
    7418:	08 f0       	brcs	.+2      	; 0x741c <processPacket+0xdc>
    741a:	b2 c0       	rjmp	.+356    	; 0x7580 <processPacket+0x240>
	tracenum(tftpOpcode);
	trace(" and data length ");
	tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
#endif

	uint8_t returnCode = ERROR_UNKNOWN;
    741c:	80 e0       	ldi	r24, 0x00	; 0
    741e:	b5 c0       	rjmp	.+362    	; 0x758a <processPacket+0x24a>
#endif
			break;

		case TFTP_OPCODE_WRQ: // Write request
//#ifdef _DEBUG_TFTP
			traceln("Tftp: Write request");
    7420:	8f ee       	ldi	r24, 0xEF	; 239
    7422:	91 e0       	ldi	r25, 0x01	; 1
    7424:	b9 d1       	rcall	.+882    	; 0x7798 <traceln>
//#endif
			// Flagging image as invalid since the flashing process has started
			eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
    7426:	6f ef       	ldi	r22, 0xFF	; 255
    7428:	82 e0       	ldi	r24, 0x02	; 2
    742a:	90 e0       	ldi	r25, 0x00	; 0
    742c:	35 d3       	rcall	.+1642   	; 0x7a98 <__eewr_byte_m328p>
			netWriteReg(REG_S3_CR, CR_RECV);
    742e:	60 e4       	ldi	r22, 0x40	; 64
    7430:	81 e0       	ldi	r24, 0x01	; 1
    7432:	97 e0       	ldi	r25, 0x07	; 7
    7434:	95 de       	rcall	.-726    	; 0x7160 <netWriteReg>
			netWriteReg(REG_S3_CR, CR_CLOSE);
    7436:	60 e1       	ldi	r22, 0x10	; 16
    7438:	81 e0       	ldi	r24, 0x01	; 1
    743a:	97 e0       	ldi	r25, 0x07	; 7
    743c:	91 de       	rcall	.-734    	; 0x7160 <netWriteReg>
			do {
				netWriteReg(REG_S3_MR, MR_UDP);
    743e:	62 e0       	ldi	r22, 0x02	; 2
    7440:	80 e0       	ldi	r24, 0x00	; 0
    7442:	97 e0       	ldi	r25, 0x07	; 7
    7444:	8d de       	rcall	.-742    	; 0x7160 <netWriteReg>
				netWriteReg(REG_S3_CR, CR_OPEN);
    7446:	61 e0       	ldi	r22, 0x01	; 1
    7448:	81 e0       	ldi	r24, 0x01	; 1
    744a:	97 e0       	ldi	r25, 0x07	; 7
    744c:	89 de       	rcall	.-750    	; 0x7160 <netWriteReg>
#ifdef _TFTP_RANDOM_PORT
				netWriteWord(REG_S3_PORT0, (buffer[4]<<8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
				netWriteWord(REG_S3_PORT0, TFTP_STATIC_PORT);   // Not random any more
    744e:	69 e7       	ldi	r22, 0x79	; 121
    7450:	77 eb       	ldi	r23, 0xB7	; 183
    7452:	84 e0       	ldi	r24, 0x04	; 4
    7454:	97 e0       	ldi	r25, 0x07	; 7
    7456:	cb de       	rcall	.-618    	; 0x71ee <netWriteWord>
#endif
				if(netReadReg(REG_S3_SR) != SOCK_UDP)
    7458:	83 e0       	ldi	r24, 0x03	; 3
    745a:	97 e0       	ldi	r25, 0x07	; 7
    745c:	9a de       	rcall	.-716    	; 0x7192 <netReadReg>
    745e:	82 32       	cpi	r24, 0x22	; 34
    7460:	21 f0       	breq	.+8      	; 0x746a <processPacket+0x12a>
					netWriteReg(REG_S3_CR, CR_CLOSE);
    7462:	60 e1       	ldi	r22, 0x10	; 16
    7464:	81 e0       	ldi	r24, 0x01	; 1
    7466:	97 e0       	ldi	r25, 0x07	; 7
    7468:	7b de       	rcall	.-778    	; 0x7160 <netWriteReg>
			} while(netReadReg(REG_S3_SR) != SOCK_UDP);
    746a:	83 e0       	ldi	r24, 0x03	; 3
    746c:	97 e0       	ldi	r25, 0x07	; 7
    746e:	91 de       	rcall	.-734    	; 0x7192 <netReadReg>
    7470:	82 32       	cpi	r24, 0x22	; 34
    7472:	29 f7       	brne	.-54     	; 0x743e <processPacket+0xfe>
			tracenum((buffer[4]<<8) | (buffer[5]^0x55));
#else
			tracenum(TFTP_STATIC_PORT);
#endif
#endif
			lastPacket = 0;
    7474:	10 92 63 02 	sts	0x0263, r1
    7478:	10 92 62 02 	sts	0x0262, r1
    747c:	85 c0       	rjmp	.+266    	; 0x7588 <processPacket+0x248>
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
    747e:	d1 2c       	mov	r13, r1
    7480:	dc 2c       	mov	r13, r12
    7482:	cc 24       	eor	r12, r12
    7484:	c3 0e       	add	r12, r19
    7486:	d1 1c       	adc	r13, r1
	// Set up return IP address and port
	uint8_t i;
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    7488:	f1 2c       	mov	r15, r1
    748a:	fe 2c       	mov	r15, r14
    748c:	ee 24       	eor	r14, r14
    748e:	e2 0e       	add	r14, r18
    7490:	f1 1c       	adc	r15, r1
			lastPacket = 0;
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
    7492:	84 e0       	ldi	r24, 0x04	; 4
    7494:	e8 1a       	sub	r14, r24
    7496:	f1 08       	sbc	r15, r1
			lastPacket = tftpBlock;
    7498:	d0 92 63 02 	sts	0x0263, r13
    749c:	c0 92 62 02 	sts	0x0262, r12
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
    74a0:	e1 e0       	ldi	r30, 0x01	; 1
    74a2:	ce 1a       	sub	r12, r30
    74a4:	d1 08       	sbc	r13, r1
    74a6:	dc 2c       	mov	r13, r12
    74a8:	cc 24       	eor	r12, r12
    74aa:	dd 0c       	add	r13, r13
//#ifdef _DEBUG_TFTP
			traceln("Tftp: Data for block ");
    74ac:	83 e0       	ldi	r24, 0x03	; 3
    74ae:	92 e0       	ldi	r25, 0x02	; 2
    74b0:	73 d1       	rcall	.+742    	; 0x7798 <traceln>
			tracenum(lastPacket);
    74b2:	80 91 62 02 	lds	r24, 0x0262
    74b6:	90 91 63 02 	lds	r25, 0x0263
    74ba:	78 d1       	rcall	.+752    	; 0x77ac <tracenum>
//#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    74bc:	c6 01       	movw	r24, r12
    74be:	8e 0d       	add	r24, r14
    74c0:	9f 1d       	adc	r25, r15
    74c2:	81 30       	cpi	r24, 0x01	; 1
    74c4:	90 47       	sbci	r25, 0x70	; 112
    74c6:	40 f0       	brcs	.+16     	; 0x74d8 <processPacket+0x198>
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.
//#ifdef _DEBUG_TFTP
				traceln("Tftp: Flash is full");
    74c8:	89 e1       	ldi	r24, 0x19	; 25
    74ca:	92 e0       	ldi	r25, 0x02	; 2
    74cc:	65 d1       	rcall	.+714    	; 0x7798 <traceln>
//#endif
				returnCode = ERROR_FULL;
    74ce:	83 e0       	ldi	r24, 0x03	; 3
    74d0:	5c c0       	rjmp	.+184    	; 0x758a <processPacket+0x24a>

				uint8_t *pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    74d2:	2f ef       	ldi	r18, 0xFF	; 255
    74d4:	e2 1a       	sub	r14, r18
    74d6:	f2 0a       	sbc	r15, r18
    74d8:	c7 01       	movw	r24, r14
    74da:	8f 77       	andi	r24, 0x7F	; 127
    74dc:	99 27       	eor	r25, r25
    74de:	89 2b       	or	r24, r25
    74e0:	c1 f7       	brne	.-16     	; 0x74d2 <processPacket+0x192>
#ifdef _DEBUG_TFTP
				traceln("Tftp: Packet length adjusted to ");
				tracenum(packetLength);
#endif
				if(writeAddr == 0) {
    74e2:	c1 14       	cp	r12, r1
    74e4:	d1 04       	cpc	r13, r1
    74e6:	31 f4       	brne	.+12     	; 0x74f4 <processPacket+0x1b4>
					// First sector - validate
					if(!validImage(pageBase)) {
    74e8:	ce 01       	movw	r24, r28
    74ea:	0d 96       	adiw	r24, 0x0d	; 13
    74ec:	30 d1       	rcall	.+608    	; 0x774e <validImage>
    74ee:	88 23       	and	r24, r24
    74f0:	09 f4       	brne	.+2      	; 0x74f4 <processPacket+0x1b4>
    74f2:	48 c0       	rjmp	.+144    	; 0x7584 <processPacket+0x244>
#ifdef _DEBUG_TFTP
				traceln("Tftp: Writing data from address ");
				tracenum(writeAddr);
#endif

				uint8_t *pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
    74f4:	de 01       	movw	r26, r28
    74f6:	1d 96       	adiw	r26, 0x0d	; 13
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    74f8:	80 e0       	ldi	r24, 0x00	; 0
    74fa:	90 e0       	ldi	r25, 0x00	; 0
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    74fc:	41 e0       	ldi	r20, 0x01	; 1
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    74fe:	53 e0       	ldi	r21, 0x03	; 3
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7500:	65 e0       	ldi	r22, 0x05	; 5
						boot_spm_busy_wait();
						boot_rww_enable();
    7502:	71 e1       	ldi	r23, 0x11	; 17
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    7504:	2d c0       	rjmp	.+90     	; 0x7560 <processPacket+0x220>

#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
    7506:	e1 e0       	ldi	r30, 0x01	; 1
    7508:	f0 e0       	ldi	r31, 0x00	; 0
    750a:	ec 0f       	add	r30, r28
    750c:	fd 1f       	adc	r31, r29
    750e:	e8 0f       	add	r30, r24
    7510:	f9 1f       	adc	r31, r25
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    7512:	25 85       	ldd	r18, Z+13	; 0x0d
    7514:	30 e0       	ldi	r19, 0x00	; 0
    7516:	32 2f       	mov	r19, r18
    7518:	22 27       	eor	r18, r18
    751a:	ec 91       	ld	r30, X
    751c:	2e 2b       	or	r18, r30
					boot_page_fill(writeAddr + offset, writeValue);
    751e:	f6 01       	movw	r30, r12
    7520:	09 01       	movw	r0, r18
    7522:	40 93 57 00 	sts	0x0057, r20
    7526:	e8 95       	spm
    7528:	11 24       	eor	r1, r1
						tracenum(writeValue);
						trace(" at offset ");
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
    752a:	02 96       	adiw	r24, 0x02	; 2
					if(offset % SPM_PAGESIZE == 0) {
    752c:	9c 01       	movw	r18, r24
    752e:	2f 77       	andi	r18, 0x7F	; 127
    7530:	33 27       	eor	r19, r19
    7532:	23 2b       	or	r18, r19
    7534:	89 f4       	brne	.+34     	; 0x7558 <processPacket+0x218>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    7536:	ee 57       	subi	r30, 0x7E	; 126
    7538:	f1 09       	sbc	r31, r1
    753a:	50 93 57 00 	sts	0x0057, r21
    753e:	e8 95       	spm
						boot_spm_busy_wait();
    7540:	07 b6       	in	r0, 0x37	; 55
    7542:	00 fc       	sbrc	r0, 0
    7544:	fd cf       	rjmp	.-6      	; 0x7540 <processPacket+0x200>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    7546:	60 93 57 00 	sts	0x0057, r22
    754a:	e8 95       	spm
						boot_spm_busy_wait();
    754c:	07 b6       	in	r0, 0x37	; 55
    754e:	00 fc       	sbrc	r0, 0
    7550:	fd cf       	rjmp	.-6      	; 0x754c <processPacket+0x20c>
						boot_rww_enable();
    7552:	70 93 57 00 	sts	0x0057, r23
    7556:	e8 95       	spm
    7558:	12 96       	adiw	r26, 0x02	; 2
    755a:	f2 e0       	ldi	r31, 0x02	; 2
    755c:	cf 0e       	add	r12, r31
    755e:	d1 1c       	adc	r13, r1
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    7560:	8e 15       	cp	r24, r14
    7562:	9f 05       	cpc	r25, r15
    7564:	80 f2       	brcs	.-96     	; 0x7506 <processPacket+0x1c6>
						boot_spm_busy_wait();
						boot_rww_enable();
					}
				}

				if(packetLength < TFTP_DATA_SIZE) {
    7566:	e1 14       	cp	r14, r1
    7568:	22 e0       	ldi	r18, 0x02	; 2
    756a:	f2 06       	cpc	r15, r18
    756c:	68 f4       	brcc	.+26     	; 0x7588 <processPacket+0x248>
					// Flash is complete
					// Hand over to application
//#ifdef _DEBUG_TFTP
					traceln("Tftp: Flash is complete");
    756e:	8d e2       	ldi	r24, 0x2D	; 45
    7570:	92 e0       	ldi	r25, 0x02	; 2
    7572:	12 d1       	rcall	.+548    	; 0x7798 <traceln>
//#endif
					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7574:	6b eb       	ldi	r22, 0xBB	; 187
    7576:	82 e0       	ldi	r24, 0x02	; 2
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	8e d2       	rcall	.+1308   	; 0x7a98 <__eewr_byte_m328p>
					returnCode = FINAL_ACK;
    757c:	84 e0       	ldi	r24, 0x04	; 4
    757e:	05 c0       	rjmp	.+10     	; 0x758a <processPacket+0x24a>
#ifdef _DEBUG_TFTP
			traceln("Tftp: Invalid opcode ");
			tracenum(tftpOpcode);
#endif
			// Invalid - return error
			returnCode = ERROR_INVALID;
    7580:	81 e0       	ldi	r24, 0x01	; 1
    7582:	03 c0       	rjmp	.+6      	; 0x758a <processPacket+0x24a>
				tracenum(packetLength);
#endif
				if(writeAddr == 0) {
					// First sector - validate
					if(!validImage(pageBase)) {
						returnCode = INVALID_IMAGE;
    7584:	85 e0       	ldi	r24, 0x05	; 5
    7586:	01 c0       	rjmp	.+2      	; 0x758a <processPacket+0x24a>
//#endif
					// Flag the image as valid since we received the last packet
					eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
					returnCode = FINAL_ACK;
				} else {
					returnCode = ACK;
    7588:	82 e0       	ldi	r24, 0x02	; 2
			returnCode = ERROR_INVALID;
			break;

	}
	return(returnCode);
}
    758a:	c4 5f       	subi	r28, 0xF4	; 244
    758c:	dd 4f       	sbci	r29, 0xFD	; 253
    758e:	de bf       	out	0x3e, r29	; 62
    7590:	cd bf       	out	0x3d, r28	; 61
    7592:	df 91       	pop	r29
    7594:	cf 91       	pop	r28
    7596:	ff 90       	pop	r15
    7598:	ef 90       	pop	r14
    759a:	df 90       	pop	r13
    759c:	cf 90       	pop	r12
    759e:	bf 90       	pop	r11
    75a0:	af 90       	pop	r10
    75a2:	08 95       	ret

000075a4 <sendResponse>:


void sendResponse(uint16_t response)
{
    75a4:	af 92       	push	r10
    75a6:	bf 92       	push	r11
    75a8:	cf 92       	push	r12
    75aa:	df 92       	push	r13
    75ac:	ef 92       	push	r14
    75ae:	ff 92       	push	r15
    75b0:	1f 93       	push	r17
    75b2:	cf 93       	push	r28
    75b4:	df 93       	push	r29
    75b6:	cd b7       	in	r28, 0x3d	; 61
    75b8:	de b7       	in	r29, 0x3e	; 62
    75ba:	c4 56       	subi	r28, 0x64	; 100
    75bc:	d1 09       	sbc	r29, r1
    75be:	de bf       	out	0x3e, r29	; 62
    75c0:	cd bf       	out	0x3d, r28	; 61
    75c2:	7c 01       	movw	r14, r24
	uint8_t txBuffer[100];
	uint8_t *txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = netReadWord(REG_S3_TX_WR0) + S3_TX_START;
    75c4:	84 e2       	ldi	r24, 0x24	; 36
    75c6:	97 e0       	ldi	r25, 0x07	; 7
    75c8:	fe dd       	rcall	.-1028   	; 0x71c6 <netReadWord>
    75ca:	98 5a       	subi	r25, 0xA8	; 168
    75cc:	6c 01       	movw	r12, r24
	switch(response) {
    75ce:	82 e0       	ldi	r24, 0x02	; 2
    75d0:	e8 16       	cp	r14, r24
    75d2:	f1 04       	cpc	r15, r1
    75d4:	79 f1       	breq	.+94     	; 0x7634 <sendResponse+0x90>
    75d6:	20 f4       	brcc	.+8      	; 0x75e0 <sendResponse+0x3c>
    75d8:	ea 94       	dec	r14
    75da:	ef 28       	or	r14, r15
    75dc:	49 f4       	brne	.+18     	; 0x75f0 <sendResponse+0x4c>
    75de:	18 c0       	rjmp	.+48     	; 0x7610 <sendResponse+0x6c>
    75e0:	83 e0       	ldi	r24, 0x03	; 3
    75e2:	e8 16       	cp	r14, r24
    75e4:	f1 04       	cpc	r15, r1
    75e6:	e9 f0       	breq	.+58     	; 0x7622 <sendResponse+0x7e>
    75e8:	e4 e0       	ldi	r30, 0x04	; 4
    75ea:	ee 16       	cp	r14, r30
    75ec:	f1 04       	cpc	r15, r1
    75ee:	11 f1       	breq	.+68     	; 0x7634 <sendResponse+0x90>
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    75f0:	4a e0       	ldi	r20, 0x0A	; 10
    75f2:	50 e0       	ldi	r21, 0x00	; 0
    75f4:	60 e8       	ldi	r22, 0x80	; 128
    75f6:	70 e7       	ldi	r23, 0x70	; 112
    75f8:	ce 01       	movw	r24, r28
    75fa:	01 96       	adiw	r24, 0x01	; 1
    75fc:	3c d2       	rcall	.+1144   	; 0x7a76 <memcpy_P>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    75fe:	8a e0       	ldi	r24, 0x0A	; 10
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    7600:	ee 24       	eor	r14, r14
    7602:	e3 94       	inc	r14
    7604:	f1 2c       	mov	r15, r1
    7606:	ec 0e       	add	r14, r28
    7608:	fd 1e       	adc	r15, r29
	}
	return(returnCode);
}


void sendResponse(uint16_t response)
    760a:	18 2f       	mov	r17, r24
    760c:	1e 0d       	add	r17, r14
    760e:	2e c0       	rjmp	.+92     	; 0x766c <sendResponse+0xc8>
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    7610:	4c e0       	ldi	r20, 0x0C	; 12
    7612:	50 e0       	ldi	r21, 0x00	; 0
    7614:	65 e9       	ldi	r22, 0x95	; 149
    7616:	70 e7       	ldi	r23, 0x70	; 112
    7618:	ce 01       	movw	r24, r28
    761a:	01 96       	adiw	r24, 0x01	; 1
    761c:	2c d2       	rcall	.+1112   	; 0x7a76 <memcpy_P>
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    761e:	8c e0       	ldi	r24, 0x0C	; 12
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;
    7620:	ef cf       	rjmp	.-34     	; 0x7600 <sendResponse+0x5c>

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    7622:	49 e0       	ldi	r20, 0x09	; 9
    7624:	50 e0       	ldi	r21, 0x00	; 0
    7626:	6b e8       	ldi	r22, 0x8B	; 139
    7628:	70 e7       	ldi	r23, 0x70	; 112
    762a:	ce 01       	movw	r24, r28
    762c:	01 96       	adiw	r24, 0x01	; 1
    762e:	23 d2       	rcall	.+1094   	; 0x7a76 <memcpy_P>
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    7630:	89 e0       	ldi	r24, 0x09	; 9
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
			break;
    7632:	e6 cf       	rjmp	.-52     	; 0x7600 <sendResponse+0x5c>
				traceln("Tftp: Sent Final ACK ");
				tracenum(lastPacket);
			}
#endif
			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
    7634:	19 82       	std	Y+1, r1	; 0x01
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    7636:	84 e0       	ldi	r24, 0x04	; 4
    7638:	8a 83       	std	Y+2, r24	; 0x02
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    763a:	80 91 62 02 	lds	r24, 0x0262
    763e:	90 91 63 02 	lds	r25, 0x0263
    7642:	9b 83       	std	Y+3, r25	; 0x03
			*txPtr = lastPacket & 0xff;
    7644:	8c 83       	std	Y+4, r24	; 0x04
			if(response == FINAL_ACK) {
				traceln("Tftp: Sent Final ACK ");
				tracenum(lastPacket);
			}
#endif
			packetLength = 4;
    7646:	84 e0       	ldi	r24, 0x04	; 4
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
			*txPtr = lastPacket & 0xff;
			break;
    7648:	db cf       	rjmp	.-74     	; 0x7600 <sendResponse+0x5c>
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
    764a:	f7 01       	movw	r30, r14
    764c:	61 91       	ld	r22, Z+
    764e:	7f 01       	movw	r14, r30
    7650:	56 01       	movw	r10, r12
    7652:	ff ef       	ldi	r31, 0xFF	; 255
    7654:	af 1a       	sub	r10, r31
    7656:	bf 0a       	sbc	r11, r31
    7658:	c6 01       	movw	r24, r12
    765a:	82 dd       	rcall	.-1276   	; 0x7160 <netWriteReg>
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    765c:	a1 14       	cp	r10, r1
    765e:	80 e6       	ldi	r24, 0x60	; 96
    7660:	b8 06       	cpc	r11, r24
    7662:	19 f4       	brne	.+6      	; 0x766a <sendResponse+0xc6>
    7664:	a1 2c       	mov	r10, r1
    7666:	e8 e5       	ldi	r30, 0x58	; 88
    7668:	be 2e       	mov	r11, r30
    766a:	65 01       	movw	r12, r10
			*txPtr = lastPacket & 0xff;
			break;
	}

	txPtr = txBuffer;
	while(packetLength--) {
    766c:	1e 11       	cpse	r17, r14
    766e:	ed cf       	rjmp	.-38     	; 0x764a <sendResponse+0xa6>
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}
	netWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
    7670:	b6 01       	movw	r22, r12
    7672:	78 55       	subi	r23, 0x58	; 88
    7674:	84 e2       	ldi	r24, 0x24	; 36
    7676:	97 e0       	ldi	r25, 0x07	; 7
    7678:	ba dd       	rcall	.-1164   	; 0x71ee <netWriteWord>
	netWriteReg(REG_S3_CR, CR_SEND);
    767a:	60 e2       	ldi	r22, 0x20	; 32
    767c:	81 e0       	ldi	r24, 0x01	; 1
    767e:	97 e0       	ldi	r25, 0x07	; 7
    7680:	6f dd       	rcall	.-1314   	; 0x7160 <netWriteReg>
	while(netReadReg(REG_S3_CR));
    7682:	81 e0       	ldi	r24, 0x01	; 1
    7684:	97 e0       	ldi	r25, 0x07	; 7
    7686:	85 dd       	rcall	.-1270   	; 0x7192 <netReadReg>
    7688:	81 11       	cpse	r24, r1
    768a:	fb cf       	rjmp	.-10     	; 0x7682 <sendResponse+0xde>
//#ifdef _DEBUG_TFTP
	traceln("Tftp: Response sent");
    768c:	85 e4       	ldi	r24, 0x45	; 69
    768e:	92 e0       	ldi	r25, 0x02	; 2
    7690:	83 d0       	rcall	.+262    	; 0x7798 <traceln>
//#endif
}
    7692:	cc 59       	subi	r28, 0x9C	; 156
    7694:	df 4f       	sbci	r29, 0xFF	; 255
    7696:	de bf       	out	0x3e, r29	; 62
    7698:	cd bf       	out	0x3d, r28	; 61
    769a:	df 91       	pop	r29
    769c:	cf 91       	pop	r28
    769e:	1f 91       	pop	r17
    76a0:	ff 90       	pop	r15
    76a2:	ef 90       	pop	r14
    76a4:	df 90       	pop	r13
    76a6:	cf 90       	pop	r12
    76a8:	bf 90       	pop	r11
    76aa:	af 90       	pop	r10
    76ac:	08 95       	ret

000076ae <tftpInit>:
void tftpInit()
{
	// Open socket
	do {
		// Write TFTP Port
		netWriteWord(REG_S3_PORT0, TFTP_PORT);
    76ae:	65 e4       	ldi	r22, 0x45	; 69
    76b0:	70 e0       	ldi	r23, 0x00	; 0
    76b2:	84 e0       	ldi	r24, 0x04	; 4
    76b4:	97 e0       	ldi	r25, 0x07	; 7
    76b6:	9b dd       	rcall	.-1226   	; 0x71ee <netWriteWord>
		// Write mode
		netWriteReg(REG_S3_MR, MR_UDP);
    76b8:	62 e0       	ldi	r22, 0x02	; 2
    76ba:	80 e0       	ldi	r24, 0x00	; 0
    76bc:	97 e0       	ldi	r25, 0x07	; 7
    76be:	50 dd       	rcall	.-1376   	; 0x7160 <netWriteReg>
		// Open Socket
		netWriteReg(REG_S3_CR, CR_OPEN);
    76c0:	61 e0       	ldi	r22, 0x01	; 1
    76c2:	81 e0       	ldi	r24, 0x01	; 1
    76c4:	97 e0       	ldi	r25, 0x07	; 7
    76c6:	4c dd       	rcall	.-1384   	; 0x7160 <netWriteReg>
		// Read Status
		if(netReadReg(REG_S3_SR) != SOCK_UDP)
    76c8:	83 e0       	ldi	r24, 0x03	; 3
    76ca:	97 e0       	ldi	r25, 0x07	; 7
    76cc:	62 dd       	rcall	.-1340   	; 0x7192 <netReadReg>
    76ce:	82 32       	cpi	r24, 0x22	; 34
    76d0:	21 f0       	breq	.+8      	; 0x76da <tftpInit+0x2c>
			// Close Socket if it wasn't initialized correctly
			netWriteReg(REG_S3_CR, CR_CLOSE);
    76d2:	60 e1       	ldi	r22, 0x10	; 16
    76d4:	81 e0       	ldi	r24, 0x01	; 1
    76d6:	97 e0       	ldi	r25, 0x07	; 7
    76d8:	43 dd       	rcall	.-1402   	; 0x7160 <netWriteReg>
		// If socket correctly opened continue
	} while(netReadReg(REG_S3_SR) != SOCK_UDP);
    76da:	83 e0       	ldi	r24, 0x03	; 3
    76dc:	97 e0       	ldi	r25, 0x07	; 7
    76de:	59 dd       	rcall	.-1358   	; 0x7192 <netReadReg>
    76e0:	82 32       	cpi	r24, 0x22	; 34
    76e2:	29 f7       	brne	.-54     	; 0x76ae <tftpInit>
}
    76e4:	08 95       	ret

000076e6 <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll()
{
    76e6:	cf 93       	push	r28
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);
    76e8:	86 e2       	ldi	r24, 0x26	; 38
    76ea:	97 e0       	ldi	r25, 0x07	; 7
    76ec:	6c dd       	rcall	.-1320   	; 0x71c6 <netReadWord>

	if(packetSize) {
    76ee:	89 2b       	or	r24, r25
    76f0:	21 f4       	brne	.+8      	; 0x76fa <tftpPoll+0x14>
		response = processPacket();
#endif
		// Send the response
		sendResponse(response);
	}
	if(((response==FINAL_ACK) || timedOut()) && eeprom_read_byte(EEPROM_IMG_STAT)==EEPROM_IMG_OK_VALUE) {
    76f2:	b1 d1       	rcall	.+866    	; 0x7a56 <timedOut>
    76f4:	81 11       	cpse	r24, r1
    76f6:	1d c0       	rjmp	.+58     	; 0x7732 <tftpPoll+0x4c>
    76f8:	21 c0       	rjmp	.+66     	; 0x773c <tftpPoll+0x56>
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);

	if(packetSize) {
		tftpFlashing = TRUE;
    76fa:	81 e0       	ldi	r24, 0x01	; 1
    76fc:	80 93 69 02 	sts	0x0269, r24
		for(;;) {
			if(!(netReadReg(REG_S3_IR) & IR_RECV)) break;
    7700:	82 e0       	ldi	r24, 0x02	; 2
    7702:	97 e0       	ldi	r25, 0x07	; 7
    7704:	46 dd       	rcall	.-1396   	; 0x7192 <netReadReg>
    7706:	82 ff       	sbrs	r24, 2
    7708:	0e c0       	rjmp	.+28     	; 0x7726 <tftpPoll+0x40>
#ifdef _DEBUG_TFTP
			traceln("Tftp: S3_IR value before ");
			tracenum(netReadReg(REG_S3_IR));
#endif
			netWriteReg(REG_S3_IR, IR_RECV);
    770a:	64 e0       	ldi	r22, 0x04	; 4
    770c:	82 e0       	ldi	r24, 0x02	; 2
    770e:	97 e0       	ldi	r25, 0x07	; 7
    7710:	27 dd       	rcall	.-1458   	; 0x7160 <netWriteReg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7712:	2f ef       	ldi	r18, 0xFF	; 255
    7714:	83 ec       	ldi	r24, 0xC3	; 195
    7716:	99 e0       	ldi	r25, 0x09	; 9
    7718:	21 50       	subi	r18, 0x01	; 1
    771a:	80 40       	sbci	r24, 0x00	; 0
    771c:	90 40       	sbci	r25, 0x00	; 0
    771e:	e1 f7       	brne	.-8      	; 0x7718 <tftpPoll+0x32>
    7720:	00 c0       	rjmp	.+0      	; 0x7722 <tftpPoll+0x3c>
    7722:	00 00       	nop
    7724:	ed cf       	rjmp	.-38     	; 0x7700 <tftpPoll+0x1a>
		}
		// Process Packet and get TFTP response code
#ifdef _DEBUG_TFTP
		response = processPacket(packetSize);
#else
		response = processPacket();
    7726:	0c de       	rcall	.-1000   	; 0x7340 <processPacket>
    7728:	c8 2f       	mov	r28, r24
#endif
		// Send the response
		sendResponse(response);
    772a:	90 e0       	ldi	r25, 0x00	; 0
    772c:	3b df       	rcall	.-394    	; 0x75a4 <sendResponse>
	}
	if(((response==FINAL_ACK) || timedOut()) && eeprom_read_byte(EEPROM_IMG_STAT)==EEPROM_IMG_OK_VALUE) {
    772e:	c4 30       	cpi	r28, 0x04	; 4
    7730:	01 f7       	brne	.-64     	; 0x76f2 <tftpPoll+0xc>
    7732:	82 e0       	ldi	r24, 0x02	; 2
    7734:	90 e0       	ldi	r25, 0x00	; 0
    7736:	a8 d1       	rcall	.+848    	; 0x7a88 <__eerd_byte_m328p>
    7738:	8b 3b       	cpi	r24, 0xBB	; 187
    773a:	11 f0       	breq	.+4      	; 0x7740 <tftpPoll+0x5a>
		netWriteReg(REG_S3_CR, CR_CLOSE);
		// Complete
		return(0);
	}
	// Tftp continues
	return(1);
    773c:	81 e0       	ldi	r24, 0x01	; 1
    773e:	05 c0       	rjmp	.+10     	; 0x774a <tftpPoll+0x64>
#endif
		// Send the response
		sendResponse(response);
	}
	if(((response==FINAL_ACK) || timedOut()) && eeprom_read_byte(EEPROM_IMG_STAT)==EEPROM_IMG_OK_VALUE) {
		netWriteReg(REG_S3_CR, CR_CLOSE);
    7740:	60 e1       	ldi	r22, 0x10	; 16
    7742:	81 e0       	ldi	r24, 0x01	; 1
    7744:	97 e0       	ldi	r25, 0x07	; 7
    7746:	0c dd       	rcall	.-1512   	; 0x7160 <netWriteReg>
		// Complete
		return(0);
    7748:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Tftp continues
	return(1);
}
    774a:	cf 91       	pop	r28
    774c:	08 95       	ret

0000774e <validImage>:
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t *base)
{
    774e:	20 e0       	ldi	r18, 0x00	; 0
    7750:	30 e0       	ldi	r19, 0x00	; 0
#include "validate.h"
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t *base)
    7752:	fc 01       	movw	r30, r24
    7754:	e2 0f       	add	r30, r18
    7756:	f3 1f       	adc	r31, r19
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    7758:	40 81       	ld	r20, Z
    775a:	4c 30       	cpi	r20, 0x0C	; 12
    775c:	51 f4       	brne	.+20     	; 0x7772 <validImage+0x24>
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
		}
		if(base[i + 1] != 0x94) {
    775e:	41 81       	ldd	r20, Z+1	; 0x01
    7760:	44 39       	cpi	r20, 0x94	; 148
    7762:	39 f4       	brne	.+14     	; 0x7772 <validImage+0x24>
    7764:	2c 5f       	subi	r18, 0xFC	; 252
    7766:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t *base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    7768:	24 33       	cpi	r18, 0x34	; 52
    776a:	31 05       	cpc	r19, r1
    776c:	91 f7       	brne	.-28     	; 0x7752 <validImage+0x4>
		}
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
    776e:	81 e0       	ldi	r24, 0x01	; 1
    7770:	08 95       	ret
			tracenum(i);
			trace(" with ");
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
    7772:	80 e0       	ldi	r24, 0x00	; 0
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
}
    7774:	08 95       	ret

00007776 <trace>:
#include "debug.h"


//#ifdef _DEBUG
void trace(char *msg)
{
    7776:	ef 92       	push	r14
    7778:	ff 92       	push	r15
    777a:	7c 01       	movw	r14, r24
	uint8_t c;
	if(*msg != '\0') {
    777c:	fc 01       	movw	r30, r24
    777e:	80 81       	ld	r24, Z
    7780:	81 11       	cpse	r24, r1
    7782:	02 c0       	rjmp	.+4      	; 0x7788 <trace+0x12>
    7784:	06 c0       	rjmp	.+12     	; 0x7792 <trace+0x1c>
		while((c = *msg++)) putch(c);
    7786:	27 d1       	rcall	.+590    	; 0x79d6 <putch>
    7788:	f7 01       	movw	r30, r14
    778a:	81 91       	ld	r24, Z+
    778c:	7f 01       	movw	r14, r30
    778e:	81 11       	cpse	r24, r1
    7790:	fa cf       	rjmp	.-12     	; 0x7786 <trace+0x10>
	}
}
    7792:	ff 90       	pop	r15
    7794:	ef 90       	pop	r14
    7796:	08 95       	ret

00007798 <traceln>:


void traceln(char *msg)
{
    7798:	ef 92       	push	r14
    779a:	ff 92       	push	r15
    779c:	7c 01       	movw	r14, r24
	trace("\r\n");
    779e:	89 e5       	ldi	r24, 0x59	; 89
    77a0:	92 e0       	ldi	r25, 0x02	; 2
    77a2:	e9 df       	rcall	.-46     	; 0x7776 <trace>
	trace(msg);
    77a4:	c7 01       	movw	r24, r14
}
    77a6:	ff 90       	pop	r15
    77a8:	ef 90       	pop	r14


void traceln(char *msg)
{
	trace("\r\n");
	trace(msg);
    77aa:	e5 cf       	rjmp	.-54     	; 0x7776 <trace>

000077ac <tracenum>:
}


void tracenum(uint16_t num)
{
    77ac:	ef 92       	push	r14
    77ae:	ff 92       	push	r15
    77b0:	7c 01       	movw	r14, r24
	trace("0x");
    77b2:	8c e5       	ldi	r24, 0x5C	; 92
    77b4:	92 e0       	ldi	r25, 0x02	; 2
    77b6:	df df       	rcall	.-66     	; 0x7776 <trace>
	puthex(num >> 12);
    77b8:	c7 01       	movw	r24, r14
    77ba:	89 2f       	mov	r24, r25
    77bc:	99 27       	eor	r25, r25
    77be:	82 95       	swap	r24
    77c0:	8f 70       	andi	r24, 0x0F	; 15
    77c2:	10 d1       	rcall	.+544    	; 0x79e4 <puthex>
	puthex(num >> 8);
    77c4:	8f 2d       	mov	r24, r15
    77c6:	0e d1       	rcall	.+540    	; 0x79e4 <puthex>
	puthex(num >> 4);
    77c8:	c7 01       	movw	r24, r14
    77ca:	34 e0       	ldi	r19, 0x04	; 4
    77cc:	96 95       	lsr	r25
    77ce:	87 95       	ror	r24
    77d0:	3a 95       	dec	r19
    77d2:	e1 f7       	brne	.-8      	; 0x77cc <tracenum+0x20>
    77d4:	07 d1       	rcall	.+526    	; 0x79e4 <puthex>
	puthex(num);
    77d6:	8e 2d       	mov	r24, r14
}
    77d8:	ff 90       	pop	r15
    77da:	ef 90       	pop	r14
{
	trace("0x");
	puthex(num >> 12);
	puthex(num >> 8);
	puthex(num >> 4);
	puthex(num);
    77dc:	03 c1       	rjmp	.+518    	; 0x79e4 <puthex>

000077de <watchdogDisable>:
 */
uint8_t watchdogDisable(void)
{
	uint8_t mcusr_mirror;

	mcusr_mirror = MCUSR;
    77de:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
    77e0:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    77e2:	98 e1       	ldi	r25, 0x18	; 24
    77e4:	0f b6       	in	r0, 0x3f	; 63
    77e6:	f8 94       	cli
    77e8:	90 93 60 00 	sts	0x0060, r25
    77ec:	10 92 60 00 	sts	0x0060, r1
    77f0:	0f be       	out	0x3f, r0	; 63

	return(mcusr_mirror);
}
    77f2:	08 95       	ret

000077f4 <watchdogReset>:

void watchdogReset(void)
{
	wdt_reset();
    77f4:	a8 95       	wdr
    77f6:	08 95       	ret

000077f8 <watchdogConfig>:
}

void watchdogConfig(uint8_t x)
{
	WDTCSR = _BV(WDCE) | _BV(WDE);
    77f8:	e0 e6       	ldi	r30, 0x60	; 96
    77fa:	f0 e0       	ldi	r31, 0x00	; 0
    77fc:	98 e1       	ldi	r25, 0x18	; 24
    77fe:	90 83       	st	Z, r25
	WDTCSR = x;
    7800:	80 83       	st	Z, r24
    7802:	08 95       	ret

00007804 <verifySpace>:
uint8_t  length;


void verifySpace()
{
	if(getch() != CRC_EOP) {
    7804:	fb d0       	rcall	.+502    	; 0x79fc <getch>
    7806:	80 32       	cpi	r24, 0x20	; 32
    7808:	19 f0       	breq	.+6      	; 0x7810 <verifySpace+0xc>
		watchdogConfig(WATCHDOG_16MS);	// shorten WD timeout
    780a:	88 e0       	ldi	r24, 0x08	; 8
    780c:	f5 df       	rcall	.-22     	; 0x77f8 <watchdogConfig>
    780e:	ff cf       	rjmp	.-2      	; 0x780e <verifySpace+0xa>
		while(1)						// and busy-loop so that WD causes
			;							// a reset and app start.
	}
	putch(STK_INSYNC);
    7810:	84 e1       	ldi	r24, 0x14	; 20
    7812:	e1 c0       	rjmp	.+450    	; 0x79d6 <putch>

00007814 <getNch>:
}


void getNch(uint8_t count)
{
    7814:	cf 93       	push	r28
    7816:	c8 2f       	mov	r28, r24
	do getch();
    7818:	f1 d0       	rcall	.+482    	; 0x79fc <getch>
	while(--count);
    781a:	c1 50       	subi	r28, 0x01	; 1
    781c:	e9 f7       	brne	.-6      	; 0x7818 <getNch+0x4>
	verifySpace();
}
    781e:	cf 91       	pop	r28

void getNch(uint8_t count)
{
	do getch();
	while(--count);
	verifySpace();
    7820:	f1 cf       	rjmp	.-30     	; 0x7804 <verifySpace>

00007822 <proccessCommand>:
}


uint8_t proccessCommand()
{
    7822:	ef 92       	push	r14
    7824:	ff 92       	push	r15
    7826:	cf 93       	push	r28
    7828:	df 93       	push	r29
    782a:	1f 92       	push	r1
    782c:	cd b7       	in	r28, 0x3d	; 61
    782e:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;

	ch = getch();
    7830:	e5 d0       	rcall	.+458    	; 0x79fc <getch>

	if(ch == STK_GET_PARAMETER) {
    7832:	81 34       	cpi	r24, 0x41	; 65
    7834:	69 f4       	brne	.+26     	; 0x7850 <proccessCommand+0x2e>
		unsigned char which = getch();
    7836:	e2 d0       	rcall	.+452    	; 0x79fc <getch>
		verifySpace();
    7838:	89 83       	std	Y+1, r24	; 0x01
    783a:	e4 df       	rcall	.-56     	; 0x7804 <verifySpace>
		if(which == 0x82) {
    783c:	89 81       	ldd	r24, Y+1	; 0x01
    783e:	82 38       	cpi	r24, 0x82	; 130
    7840:	11 f4       	brne	.+4      	; 0x7846 <proccessCommand+0x24>
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(TFTPBOOT_MINVER);
    7842:	83 e0       	ldi	r24, 0x03	; 3
    7844:	03 c0       	rjmp	.+6      	; 0x784c <proccessCommand+0x2a>
		} else if(which == 0x81) {
    7846:	81 38       	cpi	r24, 0x81	; 129
    7848:	e1 f7       	brne	.-8      	; 0x7842 <proccessCommand+0x20>
			putch(TFTPBOOT_MAJVER);
    784a:	80 e0       	ldi	r24, 0x00	; 0
    784c:	c4 d0       	rcall	.+392    	; 0x79d6 <putch>
    784e:	a1 c0       	rjmp	.+322    	; 0x7992 <proccessCommand+0x170>
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
		}
	} else if(ch == STK_SET_DEVICE) {
    7850:	82 34       	cpi	r24, 0x42	; 66
    7852:	11 f4       	brne	.+4      	; 0x7858 <proccessCommand+0x36>
		// SET DEVICE is ignored
		getNch(20);
    7854:	84 e1       	ldi	r24, 0x14	; 20
    7856:	03 c0       	rjmp	.+6      	; 0x785e <proccessCommand+0x3c>
	} else if(ch == STK_SET_DEVICE_EXT) {
    7858:	85 34       	cpi	r24, 0x45	; 69
    785a:	19 f4       	brne	.+6      	; 0x7862 <proccessCommand+0x40>
		// SET DEVICE EXT is ignored
		getNch(4);
    785c:	84 e0       	ldi	r24, 0x04	; 4
    785e:	da df       	rcall	.-76     	; 0x7814 <getNch>
    7860:	98 c0       	rjmp	.+304    	; 0x7992 <proccessCommand+0x170>
	} else if(ch == STK_LOAD_ADDRESS) {
    7862:	85 35       	cpi	r24, 0x55	; 85
    7864:	69 f4       	brne	.+26     	; 0x7880 <proccessCommand+0x5e>
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    7866:	ca d0       	rcall	.+404    	; 0x79fc <getch>
    7868:	f8 2e       	mov	r15, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
    786a:	c8 d0       	rcall	.+400    	; 0x79fc <getch>
    786c:	2f 2d       	mov	r18, r15
    786e:	30 e0       	ldi	r19, 0x00	; 0
    7870:	38 2b       	or	r19, r24
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    7872:	22 0f       	add	r18, r18
    7874:	33 1f       	adc	r19, r19
		address = newAddress;
    7876:	30 93 65 02 	sts	0x0265, r19
    787a:	20 93 64 02 	sts	0x0264, r18
    787e:	88 c0       	rjmp	.+272    	; 0x7990 <proccessCommand+0x16e>
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    7880:	86 35       	cpi	r24, 0x56	; 86
    7882:	19 f4       	brne	.+6      	; 0x788a <proccessCommand+0x68>
		// UNIVERSAL command is ignored
		getNch(4);
    7884:	84 e0       	ldi	r24, 0x04	; 4
    7886:	c6 df       	rcall	.-116    	; 0x7814 <getNch>
    7888:	e0 cf       	rjmp	.-64     	; 0x784a <proccessCommand+0x28>
		putch(0x00);
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    788a:	84 36       	cpi	r24, 0x64	; 100
    788c:	09 f0       	breq	.+2      	; 0x7890 <proccessCommand+0x6e>
    788e:	50 c0       	rjmp	.+160    	; 0x7930 <proccessCommand+0x10e>
		//eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_BAD_VALUE);
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t *bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    7890:	b5 d0       	rcall	.+362    	; 0x79fc <getch>
		length = getch();
    7892:	b4 d0       	rcall	.+360    	; 0x79fc <getch>
    7894:	80 93 6a 02 	sts	0x026A, r24
		getch();
    7898:	b1 d0       	rcall	.+354    	; 0x79fc <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) __boot_page_erase_short((uint16_t)(void *)address);
    789a:	e0 91 64 02 	lds	r30, 0x0264
    789e:	f0 91 65 02 	lds	r31, 0x0265
    78a2:	e1 15       	cp	r30, r1
    78a4:	80 e7       	ldi	r24, 0x70	; 112
    78a6:	f8 07       	cpc	r31, r24
    78a8:	18 f4       	brcc	.+6      	; 0x78b0 <proccessCommand+0x8e>
    78aa:	83 e0       	ldi	r24, 0x03	; 3
    78ac:	87 bf       	out	0x37, r24	; 55
    78ae:	e8 95       	spm
    78b0:	e1 2c       	mov	r14, r1
    78b2:	ff 24       	eor	r15, r15
    78b4:	f3 94       	inc	r15

		// While that is going on, read in page contents
		bufPtr = buff;
		do *bufPtr++ = getch();
    78b6:	a2 d0       	rcall	.+324    	; 0x79fc <getch>
    78b8:	f7 01       	movw	r30, r14
    78ba:	81 93       	st	Z+, r24
    78bc:	7f 01       	movw	r14, r30
		while(--length);
    78be:	80 91 6a 02 	lds	r24, 0x026A
    78c2:	81 50       	subi	r24, 0x01	; 1
    78c4:	80 93 6a 02 	sts	0x026A, r24
    78c8:	81 11       	cpse	r24, r1
    78ca:	f5 cf       	rjmp	.-22     	; 0x78b6 <proccessCommand+0x94>

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void *)address);
    78cc:	e0 91 64 02 	lds	r30, 0x0264
    78d0:	f0 91 65 02 	lds	r31, 0x0265
    78d4:	e1 15       	cp	r30, r1
    78d6:	80 e7       	ldi	r24, 0x70	; 112
    78d8:	f8 07       	cpc	r31, r24
    78da:	18 f0       	brcs	.+6      	; 0x78e2 <proccessCommand+0xc0>
    78dc:	83 e0       	ldi	r24, 0x03	; 3
    78de:	87 bf       	out	0x37, r24	; 55
    78e0:	e8 95       	spm

		// Read command terminator, start reply
		verifySpace();
    78e2:	90 df       	rcall	.-224    	; 0x7804 <verifySpace>

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    78e4:	07 b6       	in	r0, 0x37	; 55
    78e6:	00 fc       	sbrc	r0, 0
    78e8:	fd cf       	rjmp	.-6      	; 0x78e4 <proccessCommand+0xc2>

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void *)address;
    78ea:	40 91 64 02 	lds	r20, 0x0264
    78ee:	50 91 65 02 	lds	r21, 0x0265
    78f2:	fa 01       	movw	r30, r20
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    78f4:	a0 e0       	ldi	r26, 0x00	; 0
    78f6:	b1 e0       	ldi	r27, 0x01	; 1
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			__boot_page_fill_short((uint16_t)(void *)addrPtr, a);
    78f8:	61 e0       	ldi	r22, 0x01	; 1
		bufPtr = buff;
		addrPtr = (uint16_t)(void *)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
    78fa:	8c 91       	ld	r24, X
			a |= (*bufPtr++) << 8;
    78fc:	11 96       	adiw	r26, 0x01	; 1
    78fe:	7c 91       	ld	r23, X
    7900:	11 97       	sbiw	r26, 0x01	; 1
    7902:	90 e0       	ldi	r25, 0x00	; 0
    7904:	97 2b       	or	r25, r23
	while(--count);
	verifySpace();
}


uint8_t proccessCommand()
    7906:	12 96       	adiw	r26, 0x02	; 2
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			__boot_page_fill_short((uint16_t)(void *)addrPtr, a);
    7908:	0c 01       	movw	r0, r24
    790a:	67 bf       	out	0x37, r22	; 55
    790c:	e8 95       	spm
    790e:	11 24       	eor	r1, r1
			addrPtr += 2;
    7910:	32 96       	adiw	r30, 0x02	; 2
		} while(--ch);
    7912:	a0 38       	cpi	r26, 0x80	; 128
    7914:	81 e0       	ldi	r24, 0x01	; 1
    7916:	b8 07       	cpc	r27, r24
    7918:	81 f7       	brne	.-32     	; 0x78fa <proccessCommand+0xd8>

		// Write from programming buffer
		__boot_page_write_short((uint16_t)(void *)address);
    791a:	85 e0       	ldi	r24, 0x05	; 5
    791c:	fa 01       	movw	r30, r20
    791e:	87 bf       	out	0x37, r24	; 55
    7920:	e8 95       	spm
		boot_spm_busy_wait();
    7922:	07 b6       	in	r0, 0x37	; 55
    7924:	00 fc       	sbrc	r0, 0
    7926:	fd cf       	rjmp	.-6      	; 0x7922 <proccessCommand+0x100>

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    7928:	81 e1       	ldi	r24, 0x11	; 17
    792a:	87 bf       	out	0x37, r24	; 55
    792c:	e8 95       	spm
    792e:	31 c0       	rjmp	.+98     	; 0x7992 <proccessCommand+0x170>
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    7930:	84 37       	cpi	r24, 0x74	; 116
    7932:	d1 f4       	brne	.+52     	; 0x7968 <proccessCommand+0x146>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    7934:	63 d0       	rcall	.+198    	; 0x79fc <getch>
		length = getch();
    7936:	62 d0       	rcall	.+196    	; 0x79fc <getch>
    7938:	80 93 6a 02 	sts	0x026A, r24
		getch();
    793c:	5f d0       	rcall	.+190    	; 0x79fc <getch>

		verifySpace();
    793e:	62 df       	rcall	.-316    	; 0x7804 <verifySpace>
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    7940:	e0 91 64 02 	lds	r30, 0x0264
    7944:	f0 91 65 02 	lds	r31, 0x0265
    7948:	cf 01       	movw	r24, r30
    794a:	01 96       	adiw	r24, 0x01	; 1
    794c:	90 93 65 02 	sts	0x0265, r25
    7950:	80 93 64 02 	sts	0x0264, r24
    7954:	84 91       	lpm	r24, Z
    7956:	3f d0       	rcall	.+126    	; 0x79d6 <putch>
		while(--length);
    7958:	80 91 6a 02 	lds	r24, 0x026A
    795c:	81 50       	subi	r24, 0x01	; 1
    795e:	80 93 6a 02 	sts	0x026A, r24
    7962:	81 11       	cpse	r24, r1
    7964:	ed cf       	rjmp	.-38     	; 0x7940 <proccessCommand+0x11e>
    7966:	15 c0       	rjmp	.+42     	; 0x7992 <proccessCommand+0x170>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    7968:	85 37       	cpi	r24, 0x75	; 117
    796a:	39 f4       	brne	.+14     	; 0x797a <proccessCommand+0x158>
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    796c:	4b df       	rcall	.-362    	; 0x7804 <verifySpace>
		putch(SIGNATURE_0);
    796e:	8e e1       	ldi	r24, 0x1E	; 30
    7970:	32 d0       	rcall	.+100    	; 0x79d6 <putch>
		putch(SIGNATURE_1);
    7972:	85 e9       	ldi	r24, 0x95	; 149
    7974:	30 d0       	rcall	.+96     	; 0x79d6 <putch>
		putch(SIGNATURE_2);
    7976:	8f e0       	ldi	r24, 0x0F	; 15
    7978:	69 cf       	rjmp	.-302    	; 0x784c <proccessCommand+0x2a>
	} else if(ch == STK_LEAVE_PROGMODE) {
    797a:	81 35       	cpi	r24, 0x51	; 81
    797c:	49 f4       	brne	.+18     	; 0x7990 <proccessCommand+0x16e>
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    797e:	42 df       	rcall	.-380    	; 0x7804 <verifySpace>
		eeprom_write_byte(EEPROM_IMG_STAT, EEPROM_IMG_OK_VALUE);
    7980:	6b eb       	ldi	r22, 0xBB	; 187
    7982:	82 e0       	ldi	r24, 0x02	; 2
    7984:	90 e0       	ldi	r25, 0x00	; 0
    7986:	88 d0       	rcall	.+272    	; 0x7a98 <__eewr_byte_m328p>
		putch(STK_OK);
    7988:	80 e1       	ldi	r24, 0x10	; 16
    798a:	25 d0       	rcall	.+74     	; 0x79d6 <putch>
		return(0);
    798c:	80 e0       	ldi	r24, 0x00	; 0
    798e:	04 c0       	rjmp	.+8      	; 0x7998 <proccessCommand+0x176>
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
    7990:	39 df       	rcall	.-398    	; 0x7804 <verifySpace>
	}
	putch(STK_OK);
    7992:	80 e1       	ldi	r24, 0x10	; 16
    7994:	20 d0       	rcall	.+64     	; 0x79d6 <putch>
	return(1);
    7996:	81 e0       	ldi	r24, 0x01	; 1
}
    7998:	0f 90       	pop	r0
    799a:	df 91       	pop	r29
    799c:	cf 91       	pop	r28
    799e:	ff 90       	pop	r15
    79a0:	ef 90       	pop	r14
    79a2:	08 95       	ret

000079a4 <serialPoll>:


uint8_t serialPoll()
{
	if(UCSR0A & _BV(RXC0)){
    79a4:	80 91 c0 00 	lds	r24, 0x00C0
    79a8:	87 ff       	sbrs	r24, 7
    79aa:	04 c0       	rjmp	.+8      	; 0x79b4 <serialPoll+0x10>
		serialFlashing = TRUE;
    79ac:	81 e0       	ldi	r24, 0x01	; 1
    79ae:	80 93 68 02 	sts	0x0268, r24
		return(proccessCommand());
    79b2:	37 cf       	rjmp	.-402    	; 0x7822 <proccessCommand>
	} else return(1);
}
    79b4:	81 e0       	ldi	r24, 0x01	; 1
    79b6:	08 95       	ret

000079b8 <serialInit>:
#include "pin_defs.h"


void serialInit()
{
	UCSR0A = _BV(U2X0); //Double speed mode USART0
    79b8:	82 e0       	ldi	r24, 0x02	; 2
    79ba:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    79be:	88 e1       	ldi	r24, 0x18	; 24
    79c0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    79c4:	86 e0       	ldi	r24, 0x06	; 6
    79c6:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    79ca:	80 e1       	ldi	r24, 0x10	; 16
    79cc:	80 93 c4 00 	sts	0x00C4, r24
	DDRD = 0x92;
    79d0:	82 e9       	ldi	r24, 0x92	; 146
    79d2:	8a b9       	out	0x0a, r24	; 10
    79d4:	08 95       	ret

000079d6 <putch>:
}


void putch(uint8_t c)
{
	while(!(UCSR0A & _BV(UDRE0)));
    79d6:	90 91 c0 00 	lds	r25, 0x00C0
    79da:	95 ff       	sbrs	r25, 5
    79dc:	fc cf       	rjmp	.-8      	; 0x79d6 <putch>
	UDR0 = c;
    79de:	80 93 c6 00 	sts	0x00C6, r24
    79e2:	08 95       	ret

000079e4 <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
    79e4:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    79e6:	8a 30       	cpi	r24, 0x0A	; 10
    79e8:	08 f0       	brcs	.+2      	; 0x79ec <puthex+0x8>
    79ea:	89 5f       	subi	r24, 0xF9	; 249
	while(!(UCSR0A & _BV(UDRE0)));
    79ec:	90 91 c0 00 	lds	r25, 0x00C0
    79f0:	95 ff       	sbrs	r25, 5
    79f2:	fc cf       	rjmp	.-8      	; 0x79ec <puthex+0x8>
	UDR0 = c + '0';
    79f4:	80 5d       	subi	r24, 0xD0	; 208
    79f6:	80 93 c6 00 	sts	0x00C6, r24
    79fa:	08 95       	ret

000079fc <getch>:

uint8_t getch(void)
{
	uint8_t ch;

	while(!(UCSR0A & _BV(RXC0)));
    79fc:	80 91 c0 00 	lds	r24, 0x00C0
    7a00:	87 ff       	sbrs	r24, 7
    7a02:	fc cf       	rjmp	.-8      	; 0x79fc <getch>
	if(!(UCSR0A & _BV(FE0))) {
    7a04:	80 91 c0 00 	lds	r24, 0x00C0
    7a08:	84 ff       	sbrs	r24, 4
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		watchdogReset();
    7a0a:	f4 de       	rcall	.-536    	; 0x77f4 <watchdogReset>
	}
	ch = UDR0;
    7a0c:	80 91 c6 00 	lds	r24, 0x00C6

	return ch;
}
    7a10:	08 95       	ret

00007a12 <updateLed>:
uint16_t tick = 0;


void updateLed()
{
	uint16_t nextTimer1 = TCNT1;
    7a12:	80 91 84 00 	lds	r24, 0x0084
    7a16:	90 91 85 00 	lds	r25, 0x0085
	if(nextTimer1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    7a1a:	92 ff       	sbrs	r25, 2
    7a1c:	05 c0       	rjmp	.+10     	; 0x7a28 <updateLed+0x16>
    7a1e:	25 b1       	in	r18, 0x05	; 5
    7a20:	30 e2       	ldi	r19, 0x20	; 32
    7a22:	23 27       	eor	r18, r19
    7a24:	25 b9       	out	0x05, r18	; 5
    7a26:	01 c0       	rjmp	.+2      	; 0x7a2a <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    7a28:	2d 98       	cbi	0x05, 5	; 5
	if(nextTimer1 < lastTimer1) tick++;
    7a2a:	20 91 6b 02 	lds	r18, 0x026B
    7a2e:	30 91 6c 02 	lds	r19, 0x026C
    7a32:	82 17       	cp	r24, r18
    7a34:	93 07       	cpc	r25, r19
    7a36:	50 f4       	brcc	.+20     	; 0x7a4c <updateLed+0x3a>
    7a38:	20 91 66 02 	lds	r18, 0x0266
    7a3c:	30 91 67 02 	lds	r19, 0x0267
    7a40:	2f 5f       	subi	r18, 0xFF	; 255
    7a42:	3f 4f       	sbci	r19, 0xFF	; 255
    7a44:	30 93 67 02 	sts	0x0267, r19
    7a48:	20 93 66 02 	sts	0x0266, r18
	lastTimer1 = nextTimer1;
    7a4c:	90 93 6c 02 	sts	0x026C, r25
    7a50:	80 93 6b 02 	sts	0x026B, r24
    7a54:	08 95       	ret

00007a56 <timedOut>:
}

uint8_t timedOut()
{
	// Never timeout if there is no code in Flash
	if(pgm_read_word(0x0000) == 0xFFFF) return(0);
    7a56:	e0 e0       	ldi	r30, 0x00	; 0
    7a58:	f0 e0       	ldi	r31, 0x00	; 0
    7a5a:	85 91       	lpm	r24, Z+
    7a5c:	94 91       	lpm	r25, Z
    7a5e:	01 96       	adiw	r24, 0x01	; 1
    7a60:	41 f0       	breq	.+16     	; 0x7a72 <timedOut+0x1c>
	if(tick > TIMEOUT) return(1);
    7a62:	81 e0       	ldi	r24, 0x01	; 1
    7a64:	20 91 66 02 	lds	r18, 0x0266
    7a68:	30 91 67 02 	lds	r19, 0x0267
    7a6c:	24 30       	cpi	r18, 0x04	; 4
    7a6e:	31 05       	cpc	r19, r1
    7a70:	08 f4       	brcc	.+2      	; 0x7a74 <timedOut+0x1e>
}

uint8_t timedOut()
{
	// Never timeout if there is no code in Flash
	if(pgm_read_word(0x0000) == 0xFFFF) return(0);
    7a72:	80 e0       	ldi	r24, 0x00	; 0
	if(tick > TIMEOUT) return(1);
	return(0);
}
    7a74:	08 95       	ret

00007a76 <memcpy_P>:
    7a76:	fb 01       	movw	r30, r22
    7a78:	dc 01       	movw	r26, r24
    7a7a:	02 c0       	rjmp	.+4      	; 0x7a80 <memcpy_P+0xa>
    7a7c:	05 90       	lpm	r0, Z+
    7a7e:	0d 92       	st	X+, r0
    7a80:	41 50       	subi	r20, 0x01	; 1
    7a82:	50 40       	sbci	r21, 0x00	; 0
    7a84:	d8 f7       	brcc	.-10     	; 0x7a7c <memcpy_P+0x6>
    7a86:	08 95       	ret

00007a88 <__eerd_byte_m328p>:
    7a88:	f9 99       	sbic	0x1f, 1	; 31
    7a8a:	fe cf       	rjmp	.-4      	; 0x7a88 <__eerd_byte_m328p>
    7a8c:	92 bd       	out	0x22, r25	; 34
    7a8e:	81 bd       	out	0x21, r24	; 33
    7a90:	f8 9a       	sbi	0x1f, 0	; 31
    7a92:	99 27       	eor	r25, r25
    7a94:	80 b5       	in	r24, 0x20	; 32
    7a96:	08 95       	ret

00007a98 <__eewr_byte_m328p>:
    7a98:	26 2f       	mov	r18, r22

00007a9a <__eewr_r18_m328p>:
    7a9a:	f9 99       	sbic	0x1f, 1	; 31
    7a9c:	fe cf       	rjmp	.-4      	; 0x7a9a <__eewr_r18_m328p>
    7a9e:	1f ba       	out	0x1f, r1	; 31
    7aa0:	92 bd       	out	0x22, r25	; 34
    7aa2:	81 bd       	out	0x21, r24	; 33
    7aa4:	20 bd       	out	0x20, r18	; 32
    7aa6:	0f b6       	in	r0, 0x3f	; 63
    7aa8:	f8 94       	cli
    7aaa:	fa 9a       	sbi	0x1f, 2	; 31
    7aac:	f9 9a       	sbi	0x1f, 1	; 31
    7aae:	0f be       	out	0x3f, r0	; 63
    7ab0:	01 96       	adiw	r24, 0x01	; 1
    7ab2:	08 95       	ret

00007ab4 <_exit>:
    7ab4:	f8 94       	cli

00007ab6 <__stop_program>:
    7ab6:	ff cf       	rjmp	.-2      	; 0x7ab6 <__stop_program>
