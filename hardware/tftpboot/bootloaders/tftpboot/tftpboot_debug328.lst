
tftpboot_debug328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000024a  00800100  00007a7c  00000b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7c  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000004  00007ffc  00007ffc  00000d5a  2**0
                  CONTENTS, READONLY
  3 .bss          0000000d  0080034a  0080034a  00000d5a  2**0
                  ALLOC
  4 .stab         0000327c  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      000010e4  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  000050c0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007000 <__vectors>:
    7000:	50 c0       	rjmp	.+160    	; 0x70a2 <__ctors_end>
    7002:	00 00       	nop
    7004:	ac c0       	rjmp	.+344    	; 0x715e <__bad_interrupt>
    7006:	00 00       	nop
    7008:	aa c0       	rjmp	.+340    	; 0x715e <__bad_interrupt>
    700a:	00 00       	nop
    700c:	a8 c0       	rjmp	.+336    	; 0x715e <__bad_interrupt>
    700e:	00 00       	nop
    7010:	a6 c0       	rjmp	.+332    	; 0x715e <__bad_interrupt>
    7012:	00 00       	nop
    7014:	a4 c0       	rjmp	.+328    	; 0x715e <__bad_interrupt>
    7016:	00 00       	nop
    7018:	a2 c0       	rjmp	.+324    	; 0x715e <__bad_interrupt>
    701a:	00 00       	nop
    701c:	a0 c0       	rjmp	.+320    	; 0x715e <__bad_interrupt>
    701e:	00 00       	nop
    7020:	9e c0       	rjmp	.+316    	; 0x715e <__bad_interrupt>
    7022:	00 00       	nop
    7024:	9c c0       	rjmp	.+312    	; 0x715e <__bad_interrupt>
    7026:	00 00       	nop
    7028:	9a c0       	rjmp	.+308    	; 0x715e <__bad_interrupt>
    702a:	00 00       	nop
    702c:	98 c0       	rjmp	.+304    	; 0x715e <__bad_interrupt>
    702e:	00 00       	nop
    7030:	96 c0       	rjmp	.+300    	; 0x715e <__bad_interrupt>
    7032:	00 00       	nop
    7034:	94 c0       	rjmp	.+296    	; 0x715e <__bad_interrupt>
    7036:	00 00       	nop
    7038:	92 c0       	rjmp	.+292    	; 0x715e <__bad_interrupt>
    703a:	00 00       	nop
    703c:	90 c0       	rjmp	.+288    	; 0x715e <__bad_interrupt>
    703e:	00 00       	nop
    7040:	8e c0       	rjmp	.+284    	; 0x715e <__bad_interrupt>
    7042:	00 00       	nop
    7044:	8c c0       	rjmp	.+280    	; 0x715e <__bad_interrupt>
    7046:	00 00       	nop
    7048:	8a c0       	rjmp	.+276    	; 0x715e <__bad_interrupt>
    704a:	00 00       	nop
    704c:	88 c0       	rjmp	.+272    	; 0x715e <__bad_interrupt>
    704e:	00 00       	nop
    7050:	86 c0       	rjmp	.+268    	; 0x715e <__bad_interrupt>
    7052:	00 00       	nop
    7054:	84 c0       	rjmp	.+264    	; 0x715e <__bad_interrupt>
    7056:	00 00       	nop
    7058:	82 c0       	rjmp	.+260    	; 0x715e <__bad_interrupt>
    705a:	00 00       	nop
    705c:	80 c0       	rjmp	.+256    	; 0x715e <__bad_interrupt>
    705e:	00 00       	nop
    7060:	7e c0       	rjmp	.+252    	; 0x715e <__bad_interrupt>
    7062:	00 00       	nop
    7064:	7c c0       	rjmp	.+248    	; 0x715e <__bad_interrupt>
	...

00007068 <tftp_invalid_image_packet>:
    7068:	13 00 05 00 00 49 6e 76 61 6c 69 64 20 69 6d 61     .....Invalid ima
    7078:	67 65 20 66 69 6c 65 00                             ge file.

00007080 <tftp_unknown_error_packet>:
    7080:	08 00 05 00 00 45 72 72 6f 72 00                    .....Error.

0000708b <tftp_full_error_packet>:
    708b:	09 00 05 00 03 46 75 6c 6c 00                       .....Full.

00007095 <tftp_opcode_error_packet>:
    7095:	0a 00 05 00 00 4f 70 63 6f 64 65 3f 00              .....Opcode?.

000070a2 <__ctors_end>:
    70a2:	11 24       	eor	r1, r1
    70a4:	1f be       	out	0x3f, r1	; 63
    70a6:	cf ef       	ldi	r28, 0xFF	; 255
    70a8:	d8 e0       	ldi	r29, 0x08	; 8
    70aa:	de bf       	out	0x3e, r29	; 62
    70ac:	cd bf       	out	0x3d, r28	; 61

000070ae <__do_copy_data>:
    70ae:	13 e0       	ldi	r17, 0x03	; 3
    70b0:	a0 e0       	ldi	r26, 0x00	; 0
    70b2:	b1 e0       	ldi	r27, 0x01	; 1
    70b4:	ec e7       	ldi	r30, 0x7C	; 124
    70b6:	fa e7       	ldi	r31, 0x7A	; 122
    70b8:	02 c0       	rjmp	.+4      	; 0x70be <__do_copy_data+0x10>
    70ba:	05 90       	lpm	r0, Z+
    70bc:	0d 92       	st	X+, r0
    70be:	aa 34       	cpi	r26, 0x4A	; 74
    70c0:	b1 07       	cpc	r27, r17
    70c2:	d9 f7       	brne	.-10     	; 0x70ba <__do_copy_data+0xc>

000070c4 <__do_clear_bss>:
    70c4:	13 e0       	ldi	r17, 0x03	; 3
    70c6:	aa e4       	ldi	r26, 0x4A	; 74
    70c8:	b3 e0       	ldi	r27, 0x03	; 3
    70ca:	01 c0       	rjmp	.+2      	; 0x70ce <.do_clear_bss_start>

000070cc <.do_clear_bss_loop>:
    70cc:	1d 92       	st	X+, r1

000070ce <.do_clear_bss_start>:
    70ce:	a7 35       	cpi	r26, 0x57	; 87
    70d0:	b1 07       	cpc	r27, r17
    70d2:	e1 f7       	brne	.-8      	; 0x70cc <.do_clear_bss_loop>
    70d4:	01 d0       	rcall	.+2      	; 0x70d8 <main>
    70d6:	d0 c4       	rjmp	.+2464   	; 0x7a78 <_exit>

000070d8 <main>:
    70d8:	74 d3       	rcall	.+1768   	; 0x77c2 <watchdogDisable>
    70da:	2f ef       	ldi	r18, 0xFF	; 255
    70dc:	85 ea       	ldi	r24, 0xA5	; 165
    70de:	9e e0       	ldi	r25, 0x0E	; 14
    70e0:	21 50       	subi	r18, 0x01	; 1
    70e2:	80 40       	sbci	r24, 0x00	; 0
    70e4:	90 40       	sbci	r25, 0x00	; 0
    70e6:	e1 f7       	brne	.-8      	; 0x70e0 <main+0x8>
    70e8:	00 c0       	rjmp	.+0      	; 0x70ea <main+0x12>
    70ea:	00 00       	nop
    70ec:	11 24       	eor	r1, r1
    70ee:	85 e0       	ldi	r24, 0x05	; 5
    70f0:	80 93 81 00 	sts	0x0081, r24
    70f4:	51 d4       	rcall	.+2210   	; 0x7998 <serialInit>
    70f6:	8c e1       	ldi	r24, 0x1C	; 28
    70f8:	91 e0       	ldi	r25, 0x01	; 1
    70fa:	40 d3       	rcall	.+1664   	; 0x777c <traceln>
    70fc:	89 d0       	rcall	.+274    	; 0x7210 <netInit>
    70fe:	81 e5       	ldi	r24, 0x51	; 81
    7100:	91 e0       	ldi	r25, 0x01	; 1
    7102:	3c d3       	rcall	.+1656   	; 0x777c <traceln>
    7104:	bc d2       	rcall	.+1400   	; 0x767e <tftpInit>
    7106:	85 e6       	ldi	r24, 0x65	; 101
    7108:	91 e0       	ldi	r25, 0x01	; 1
    710a:	38 d3       	rcall	.+1648   	; 0x777c <traceln>
    710c:	2f ef       	ldi	r18, 0xFF	; 255
    710e:	81 ee       	ldi	r24, 0xE1	; 225
    7110:	94 e0       	ldi	r25, 0x04	; 4
    7112:	21 50       	subi	r18, 0x01	; 1
    7114:	80 40       	sbci	r24, 0x00	; 0
    7116:	90 40       	sbci	r25, 0x00	; 0
    7118:	e1 f7       	brne	.-8      	; 0x7112 <main+0x3a>
    711a:	00 c0       	rjmp	.+0      	; 0x711c <main+0x44>
    711c:	00 00       	nop
    711e:	10 92 52 03 	sts	0x0352, r1
    7122:	10 92 53 03 	sts	0x0353, r1
    7126:	80 91 52 03 	lds	r24, 0x0352
    712a:	88 23       	and	r24, r24
    712c:	29 f0       	breq	.+10     	; 0x7138 <main+0x60>
    712e:	80 91 53 03 	lds	r24, 0x0353
    7132:	88 23       	and	r24, r24
    7134:	39 f0       	breq	.+14     	; 0x7144 <main+0x6c>
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <main+0x68>
    7138:	be d2       	rcall	.+1404   	; 0x76b6 <tftpPoll>
    713a:	81 11       	cpse	r24, r1
    713c:	f8 cf       	rjmp	.-16     	; 0x712e <main+0x56>
    713e:	05 c0       	rjmp	.+10     	; 0x714a <main+0x72>
    7140:	58 d4       	rcall	.+2224   	; 0x79f2 <updateLed>
    7142:	f1 cf       	rjmp	.-30     	; 0x7126 <main+0x4e>
    7144:	1f d4       	rcall	.+2110   	; 0x7984 <serialPoll>
    7146:	81 11       	cpse	r24, r1
    7148:	fb cf       	rjmp	.-10     	; 0x7140 <main+0x68>
    714a:	8a e7       	ldi	r24, 0x7A	; 122
    714c:	91 e0       	ldi	r25, 0x01	; 1
    714e:	16 d3       	rcall	.+1580   	; 0x777c <traceln>
    7150:	e0 91 4a 03 	lds	r30, 0x034A
    7154:	f0 91 4b 03 	lds	r31, 0x034B
    7158:	09 95       	icall
    715a:	80 e0       	ldi	r24, 0x00	; 0
    715c:	90 e0       	ldi	r25, 0x00	; 0

0000715e <__bad_interrupt>:
    715e:	50 cf       	rjmp	.-352    	; 0x7000 <__vectors>

00007160 <netWriteReg>:
	trace(", ");
	tracenum(value);
#endif

	// Send uint8_t to Ethernet controller
	SPCR = _BV(SPE) | _BV(MSTR); // Set SPI as master
    7160:	20 e5       	ldi	r18, 0x50	; 80
    7162:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    7164:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_WRITE;
    7166:	20 ef       	ldi	r18, 0xF0	; 240
    7168:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    716a:	0d b4       	in	r0, 0x2d	; 45
    716c:	07 fe       	sbrs	r0, 7
    716e:	fd cf       	rjmp	.-6      	; 0x716a <netWriteReg+0xa>
	SPDR = address >> 8;
    7170:	29 2f       	mov	r18, r25
    7172:	33 27       	eor	r19, r19
    7174:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    7176:	0d b4       	in	r0, 0x2d	; 45
    7178:	07 fe       	sbrs	r0, 7
    717a:	fd cf       	rjmp	.-6      	; 0x7176 <netWriteReg+0x16>
	SPDR = address & 0xff;
    717c:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    717e:	0d b4       	in	r0, 0x2d	; 45
    7180:	07 fe       	sbrs	r0, 7
    7182:	fd cf       	rjmp	.-6      	; 0x717e <netWriteReg+0x1e>
	SPDR = value;
    7184:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & _BV(SPIF)));
    7186:	0d b4       	in	r0, 0x2d	; 45
    7188:	07 fe       	sbrs	r0, 7
    718a:	fd cf       	rjmp	.-6      	; 0x7186 <netWriteReg+0x26>
	SS_HIGH();
    718c:	2a 9a       	sbi	0x05, 2	; 5
	SPCR = 0; // Turn of SPI
    718e:	1c bc       	out	0x2c, r1	; 44
    7190:	08 95       	ret

00007192 <netReadReg>:
//    tracenum(address);
//#endif

	// Read uint8_t from Ethernet controller
	uint8_t returnValue;
	SPCR = _BV(SPE) | _BV(MSTR);
    7192:	20 e5       	ldi	r18, 0x50	; 80
    7194:	2c bd       	out	0x2c, r18	; 44
	SS_LOW();
    7196:	2a 98       	cbi	0x05, 2	; 5
	SPDR = SPI_READ;
    7198:	2f e0       	ldi	r18, 0x0F	; 15
    719a:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    719c:	0d b4       	in	r0, 0x2d	; 45
    719e:	07 fe       	sbrs	r0, 7
    71a0:	fd cf       	rjmp	.-6      	; 0x719c <netReadReg+0xa>
	SPDR = address >> 8;
    71a2:	29 2f       	mov	r18, r25
    71a4:	33 27       	eor	r19, r19
    71a6:	2e bd       	out	0x2e, r18	; 46
	while(!(SPSR & _BV(SPIF)));
    71a8:	0d b4       	in	r0, 0x2d	; 45
    71aa:	07 fe       	sbrs	r0, 7
    71ac:	fd cf       	rjmp	.-6      	; 0x71a8 <netReadReg+0x16>
	SPDR = address & 0xff;
    71ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    71b0:	0d b4       	in	r0, 0x2d	; 45
    71b2:	07 fe       	sbrs	r0, 7
    71b4:	fd cf       	rjmp	.-6      	; 0x71b0 <netReadReg+0x1e>
	SPDR = 0;
    71b6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & _BV(SPIF)));
    71b8:	0d b4       	in	r0, 0x2d	; 45
    71ba:	07 fe       	sbrs	r0, 7
    71bc:	fd cf       	rjmp	.-6      	; 0x71b8 <netReadReg+0x26>
	SS_HIGH();
    71be:	2a 9a       	sbi	0x05, 2	; 5
	returnValue = SPDR;
    71c0:	8e b5       	in	r24, 0x2e	; 46
	SPCR = 0;
    71c2:	1c bc       	out	0x2c, r1	; 44
	return(returnValue);
}
    71c4:	08 95       	ret

000071c6 <netReadWord>:

uint16_t netReadWord(uint16_t address)
{
    71c6:	ef 92       	push	r14
    71c8:	ff 92       	push	r15
    71ca:	cf 93       	push	r28
    71cc:	7c 01       	movw	r14, r24
	// Read uint16_t from Ethernet controller
	return((netReadReg(address) << 8) | netReadReg(address + 1));
    71ce:	e1 df       	rcall	.-62     	; 0x7192 <netReadReg>
    71d0:	c8 2f       	mov	r28, r24
    71d2:	c7 01       	movw	r24, r14
    71d4:	01 96       	adiw	r24, 0x01	; 1
    71d6:	dd df       	rcall	.-70     	; 0x7192 <netReadReg>
    71d8:	2c 2f       	mov	r18, r28
    71da:	30 e0       	ldi	r19, 0x00	; 0
    71dc:	32 2f       	mov	r19, r18
    71de:	22 27       	eor	r18, r18
}
    71e0:	a9 01       	movw	r20, r18
    71e2:	48 2b       	or	r20, r24
    71e4:	ca 01       	movw	r24, r20
    71e6:	cf 91       	pop	r28
    71e8:	ff 90       	pop	r15
    71ea:	ef 90       	pop	r14
    71ec:	08 95       	ret

000071ee <netWriteWord>:

void netWriteWord(uint16_t address, uint16_t value)
{
    71ee:	cf 92       	push	r12
    71f0:	df 92       	push	r13
    71f2:	ef 92       	push	r14
    71f4:	ff 92       	push	r15
    71f6:	7c 01       	movw	r14, r24
    71f8:	6b 01       	movw	r12, r22
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
    71fa:	67 2f       	mov	r22, r23
    71fc:	77 27       	eor	r23, r23
    71fe:	b0 df       	rcall	.-160    	; 0x7160 <netWriteReg>
	netWriteReg(address, value & 0xff);
    7200:	6c 2d       	mov	r22, r12
    7202:	c7 01       	movw	r24, r14
    7204:	01 96       	adiw	r24, 0x01	; 1
}
    7206:	ff 90       	pop	r15
    7208:	ef 90       	pop	r14
    720a:	df 90       	pop	r13
    720c:	cf 90       	pop	r12

void netWriteWord(uint16_t address, uint16_t value)
{
	// Write uint16_t to Ethernet controller
	netWriteReg(address++, value >> 8);
	netWriteReg(address, value & 0xff);
    720e:	a8 cf       	rjmp	.-176    	; 0x7160 <netWriteReg>

00007210 <netInit>:
}

void netInit()
{
    7210:	cf 92       	push	r12
    7212:	df 92       	push	r13
    7214:	ef 92       	push	r14
    7216:	ff 92       	push	r15
	// Set up outputs to communicate with W5100 chip
	// Set pins as output
	DDRB = _BV(SCK) | _BV(MOSI) | _BV(SS);
    7218:	8c e2       	ldi	r24, 0x2C	; 44
    721a:	84 b9       	out	0x04, r24	; 4
	// Set pins high
	PORTB = _BV(SCK) | _BV(MISO) | _BV(MOSI) | _BV(SS);
    721c:	8c e3       	ldi	r24, 0x3C	; 60
    721e:	85 b9       	out	0x05, r24	; 5
	PORTB |= _BV(LED);
#endif

	// Set up SPI
	// Set the Double SPI Speed Bit
	SPSR = (1 << SPI2X);
    7220:	81 e0       	ldi	r24, 0x01	; 1
    7222:	8d bd       	out	0x2d, r24	; 45

	/* Pull in altered presets
	 * if available from AVR EEPROM (if signature bytes are set)*/
	if((eeprom_read_byte(EEPROM_SIG_1) == EEPROM_SIG_1_VALUE)
    7224:	80 e0       	ldi	r24, 0x00	; 0
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	1f d4       	rcall	.+2110   	; 0x7a68 <__eerd_byte_m328p>
    722a:	85 35       	cpi	r24, 0x55	; 85
    722c:	39 f0       	breq	.+14     	; 0x723c <netInit+0x2c>
    722e:	e0 e0       	ldi	r30, 0x00	; 0
    7230:	ce 2e       	mov	r12, r30
    7232:	e1 e0       	ldi	r30, 0x01	; 1
    7234:	de 2e       	mov	r13, r30
			&& (eeprom_read_byte(EEPROM_SIG_2) == EEPROM_SIG_2_VALUE)) {
    7236:	e1 2c       	mov	r14, r1
    7238:	f1 2c       	mov	r15, r1
    723a:	19 c0       	rjmp	.+50     	; 0x726e <netInit+0x5e>
    723c:	81 e0       	ldi	r24, 0x01	; 1
    723e:	90 e0       	ldi	r25, 0x00	; 0
    7240:	13 d4       	rcall	.+2086   	; 0x7a68 <__eerd_byte_m328p>
    7242:	8a 3a       	cpi	r24, 0xAA	; 170
    7244:	a1 f7       	brne	.-24     	; 0x722e <netInit+0x1e>
    7246:	61 e0       	ldi	r22, 0x01	; 1
    7248:	c6 2e       	mov	r12, r22
    724a:	61 e0       	ldi	r22, 0x01	; 1
    724c:	d6 2e       	mov	r13, r22
    724e:	72 e0       	ldi	r23, 0x02	; 2
    7250:	e7 2e       	mov	r14, r23
    7252:	f1 2c       	mov	r15, r1

#ifdef _DEBUG_NET
		traceln(" Net: Using EEPROM settings");
#endif
		uint8_t i;
		for(i = 0; i < 18; i++) registerBuffer[i + 1] = eeprom_read_byte(EEPROM_DATA + i);
    7254:	c7 01       	movw	r24, r14
    7256:	08 d4       	rcall	.+2064   	; 0x7a68 <__eerd_byte_m328p>
    7258:	f6 01       	movw	r30, r12
    725a:	81 93       	st	Z+, r24
    725c:	6f 01       	movw	r12, r30
    725e:	ff ef       	ldi	r31, 0xFF	; 255
    7260:	ef 1a       	sub	r14, r31
    7262:	ff 0a       	sbc	r15, r31
    7264:	84 e1       	ldi	r24, 0x14	; 20
    7266:	e8 16       	cp	r14, r24
    7268:	f1 04       	cpc	r15, r1
    726a:	a1 f7       	brne	.-24     	; 0x7254 <netInit+0x44>
    726c:	e0 cf       	rjmp	.-64     	; 0x722e <netInit+0x1e>
		;
	}

	// Configure Wiznet chip
	uint8_t i;
	for(i = 0; i < REGISTER_BLOCK_SIZE; i++) netWriteReg(i, registerBuffer[i]);
    726e:	f6 01       	movw	r30, r12
    7270:	61 91       	ld	r22, Z+
    7272:	6f 01       	movw	r12, r30
    7274:	c7 01       	movw	r24, r14
    7276:	74 df       	rcall	.-280    	; 0x7160 <netWriteReg>
    7278:	ff ef       	ldi	r31, 0xFF	; 255
    727a:	ef 1a       	sub	r14, r31
    727c:	ff 0a       	sbc	r15, r31
    727e:	8c e1       	ldi	r24, 0x1C	; 28
    7280:	e8 16       	cp	r14, r24
    7282:	f1 04       	cpc	r15, r1
    7284:	a1 f7       	brne	.-24     	; 0x726e <netInit+0x5e>
}
    7286:	ff 90       	pop	r15
    7288:	ef 90       	pop	r14
    728a:	df 90       	pop	r13
    728c:	cf 90       	pop	r12
    728e:	08 95       	ret

00007290 <processPacket>:
#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
{
    7290:	af 92       	push	r10
    7292:	bf 92       	push	r11
    7294:	cf 92       	push	r12
    7296:	df 92       	push	r13
    7298:	ef 92       	push	r14
    729a:	ff 92       	push	r15
    729c:	cf 93       	push	r28
    729e:	df 93       	push	r29
    72a0:	cd b7       	in	r28, 0x3d	; 61
    72a2:	de b7       	in	r29, 0x3e	; 62
    72a4:	cc 50       	subi	r28, 0x0C	; 12
    72a6:	d2 40       	sbci	r29, 0x02	; 2
    72a8:	de bf       	out	0x3e, r29	; 62
    72aa:	cd bf       	out	0x3d, r28	; 61
	tracenum(packetSize);
	if(packetSize >= 0x800) traceln("Tftp: Overflow");
	//  step();
#endif

	readPointer = netReadWord(REG_S3_RX_RD0);
    72ac:	88 e2       	ldi	r24, 0x28	; 40
    72ae:	97 e0       	ldi	r25, 0x07	; 7
    72b0:	8a df       	rcall	.-236    	; 0x71c6 <netReadWord>
#ifdef _DEBUG_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
    72b2:	00 97       	sbiw	r24, 0x00	; 0
    72b4:	11 f4       	brne	.+4      	; 0x72ba <processPacket+0x2a>
    72b6:	80 e0       	ldi	r24, 0x00	; 0
    72b8:	98 e7       	ldi	r25, 0x78	; 120
    72ba:	ee 24       	eor	r14, r14
    72bc:	e3 94       	inc	r14
    72be:	f1 2c       	mov	r15, r1
    72c0:	ec 0e       	add	r14, r28
    72c2:	fd 1e       	adc	r15, r29

#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
    72c4:	5e 01       	movw	r10, r28
    72c6:	23 ef       	ldi	r18, 0xF3	; 243
    72c8:	a2 1a       	sub	r10, r18
    72ca:	2d ef       	ldi	r18, 0xFD	; 253
    72cc:	b2 0a       	sbc	r11, r18
		if((count == TFTP_PACKET_MAX_SIZE - 1) || (count == 0)) {
			traceln("Tftp: Reading from position ");
			tracenum(readPointer);
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
    72ce:	6c 01       	movw	r12, r24
    72d0:	ef ef       	ldi	r30, 0xFF	; 255
    72d2:	ce 1a       	sub	r12, r30
    72d4:	de 0a       	sbc	r13, r30
    72d6:	5d df       	rcall	.-326    	; 0x7192 <netReadReg>
    72d8:	f7 01       	movw	r30, r14
    72da:	81 93       	st	Z+, r24
    72dc:	7f 01       	movw	r14, r30
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
    72de:	c1 14       	cp	r12, r1
    72e0:	f0 e8       	ldi	r31, 0x80	; 128
    72e2:	df 06       	cpc	r13, r31
    72e4:	11 f0       	breq	.+4      	; 0x72ea <processPacket+0x5a>
    72e6:	c6 01       	movw	r24, r12
    72e8:	02 c0       	rjmp	.+4      	; 0x72ee <processPacket+0x5e>
    72ea:	80 e0       	ldi	r24, 0x00	; 0
    72ec:	98 e7       	ldi	r25, 0x78	; 120
#ifdef _DEBUG_TFTP
	traceln("Tftp: readPointer at position ");
	tracenum(readPointer);
#endif
	if(readPointer == 0) readPointer += S3_RX_START;
	for(count = TFTP_PACKET_MAX_SIZE; count--;) {
    72ee:	ea 14       	cp	r14, r10
    72f0:	fb 04       	cpc	r15, r11
    72f2:	69 f7       	brne	.-38     	; 0x72ce <processPacket+0x3e>
		}
#endif
		*bufPtr++ = netReadReg(readPointer++);
		if(readPointer == S3_RX_END) readPointer = S3_RX_START;
	}
	netWriteWord(REG_S3_RX_RD0, readPointer);     // Write back new pointer
    72f4:	bc 01       	movw	r22, r24
    72f6:	88 e2       	ldi	r24, 0x28	; 40
    72f8:	97 e0       	ldi	r25, 0x07	; 7
    72fa:	79 df       	rcall	.-270    	; 0x71ee <netWriteWord>
	netWriteReg(REG_S3_CR, CR_RECV);
    72fc:	60 e4       	ldi	r22, 0x40	; 64
    72fe:	81 e0       	ldi	r24, 0x01	; 1
    7300:	97 e0       	ldi	r25, 0x07	; 7
    7302:	2e df       	rcall	.-420    	; 0x7160 <netWriteReg>
	while(netReadReg(REG_S3_CR));
    7304:	81 e0       	ldi	r24, 0x01	; 1
    7306:	97 e0       	ldi	r25, 0x07	; 7
    7308:	44 df       	rcall	.-376    	; 0x7192 <netReadReg>
    730a:	81 11       	cpse	r24, r1
    730c:	fb cf       	rjmp	.-10     	; 0x7304 <processPacket+0x74>
		else trace(" ");
	}
#endif

#ifdef _DEBUG
	traceln("Tftp: Setting return address");
    730e:	8f e8       	ldi	r24, 0x8F	; 143
    7310:	91 e0       	ldi	r25, 0x01	; 1
    7312:	34 d2       	rcall	.+1128   	; 0x777c <traceln>
    7314:	cc 24       	eor	r12, r12
    7316:	c3 94       	inc	r12
    7318:	d1 2c       	mov	r13, r1
    731a:	cc 0e       	add	r12, r28
    731c:	dd 1e       	adc	r13, r29
    731e:	2c e0       	ldi	r18, 0x0C	; 12
    7320:	e2 2e       	mov	r14, r18
    7322:	27 e0       	ldi	r18, 0x07	; 7
    7324:	f2 2e       	mov	r15, r18
#endif

	// Set up return IP address and port
	uint8_t i;
	for(i = 0; i < 6; i++) netWriteReg(REG_S3_DIPR0 + i, buffer[i]);
    7326:	f6 01       	movw	r30, r12
    7328:	61 91       	ld	r22, Z+
    732a:	6f 01       	movw	r12, r30
    732c:	c7 01       	movw	r24, r14
    732e:	18 df       	rcall	.-464    	; 0x7160 <netWriteReg>
    7330:	ff ef       	ldi	r31, 0xFF	; 255
    7332:	ef 1a       	sub	r14, r31
    7334:	ff 0a       	sbc	r15, r31
    7336:	22 e1       	ldi	r18, 0x12	; 18
    7338:	e2 16       	cp	r14, r18
    733a:	27 e0       	ldi	r18, 0x07	; 7
    733c:	f2 06       	cpc	r15, r18
    733e:	99 f7       	brne	.-26     	; 0x7326 <processPacket+0x96>

	// Parse packet
	uint16_t tftpDataLen = (buffer[6] << 8) + buffer[7];
    7340:	ef 80       	ldd	r14, Y+7	; 0x07
    7342:	f1 2c       	mov	r15, r1
    7344:	fe 2c       	mov	r15, r14
    7346:	ee 24       	eor	r14, r14
    7348:	88 85       	ldd	r24, Y+8	; 0x08
    734a:	e8 0e       	add	r14, r24
    734c:	f1 1c       	adc	r15, r1
	uint16_t tftpOpcode = (buffer[8] << 8) + buffer[9];
    734e:	c9 84       	ldd	r12, Y+9	; 0x09
    7350:	d1 2c       	mov	r13, r1
    7352:	dc 2c       	mov	r13, r12
    7354:	cc 24       	eor	r12, r12
    7356:	8a 85       	ldd	r24, Y+10	; 0x0a
    7358:	c8 0e       	add	r12, r24
    735a:	d1 1c       	adc	r13, r1
	uint16_t tftpBlock = (buffer[10] << 8) + buffer[11];
    735c:	ab 84       	ldd	r10, Y+11	; 0x0b
    735e:	b1 2c       	mov	r11, r1
    7360:	ba 2c       	mov	r11, r10
    7362:	aa 24       	eor	r10, r10
    7364:	8c 85       	ldd	r24, Y+12	; 0x0c
    7366:	a8 0e       	add	r10, r24
    7368:	b1 1c       	adc	r11, r1
#ifdef _DEBUG
	traceln("Tftp: This is block ");
    736a:	8c ea       	ldi	r24, 0xAC	; 172
    736c:	91 e0       	ldi	r25, 0x01	; 1
    736e:	06 d2       	rcall	.+1036   	; 0x777c <traceln>
	tracenum(tftpBlock);
    7370:	c5 01       	movw	r24, r10
    7372:	0e d2       	rcall	.+1052   	; 0x7790 <tracenum>
	trace(" with opcode ");
    7374:	81 ec       	ldi	r24, 0xC1	; 193
    7376:	91 e0       	ldi	r25, 0x01	; 1
    7378:	f0 d1       	rcall	.+992    	; 0x775a <trace>
	tracenum(tftpOpcode);
    737a:	c6 01       	movw	r24, r12
    737c:	09 d2       	rcall	.+1042   	; 0x7790 <tracenum>
	trace(" and data length ");
    737e:	8f ec       	ldi	r24, 0xCF	; 207
    7380:	91 e0       	ldi	r25, 0x01	; 1
    7382:	eb d1       	rcall	.+982    	; 0x775a <trace>
	tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
    7384:	84 e0       	ldi	r24, 0x04	; 4
    7386:	e8 1a       	sub	r14, r24
    7388:	f1 08       	sbc	r15, r1
    738a:	c7 01       	movw	r24, r14
    738c:	01 d2       	rcall	.+1026   	; 0x7790 <tracenum>

	uint8_t returnCode = ERROR_UNKNOWN;
	uint16_t packetLength;


	switch(tftpOpcode) {
    738e:	e3 e0       	ldi	r30, 0x03	; 3
    7390:	ce 16       	cp	r12, r30
    7392:	d1 04       	cpc	r13, r1
    7394:	09 f4       	brne	.+2      	; 0x7398 <processPacket+0x108>
    7396:	4a c0       	rjmp	.+148    	; 0x742c <processPacket+0x19c>
    7398:	50 f4       	brcc	.+20     	; 0x73ae <processPacket+0x11e>
    739a:	21 e0       	ldi	r18, 0x01	; 1
    739c:	c2 16       	cp	r12, r18
    739e:	d1 04       	cpc	r13, r1
    73a0:	89 f0       	breq	.+34     	; 0x73c4 <processPacket+0x134>
    73a2:	82 e0       	ldi	r24, 0x02	; 2
    73a4:	c8 16       	cp	r12, r24
    73a6:	d1 04       	cpc	r13, r1
    73a8:	09 f0       	breq	.+2      	; 0x73ac <processPacket+0x11c>
    73aa:	c1 c0       	rjmp	.+386    	; 0x752e <processPacket+0x29e>
    73ac:	0e c0       	rjmp	.+28     	; 0x73ca <processPacket+0x13a>
    73ae:	e4 e0       	ldi	r30, 0x04	; 4
    73b0:	ce 16       	cp	r12, r30
    73b2:	d1 04       	cpc	r13, r1
    73b4:	09 f4       	brne	.+2      	; 0x73b8 <processPacket+0x128>
    73b6:	b3 c0       	rjmp	.+358    	; 0x751e <processPacket+0x28e>
    73b8:	f5 e0       	ldi	r31, 0x05	; 5
    73ba:	cf 16       	cp	r12, r31
    73bc:	d1 04       	cpc	r13, r1
    73be:	09 f0       	breq	.+2      	; 0x73c2 <processPacket+0x132>
    73c0:	b6 c0       	rjmp	.+364    	; 0x752e <processPacket+0x29e>
    73c2:	b0 c0       	rjmp	.+352    	; 0x7524 <processPacket+0x294>

		case TFTP_OPCODE_RRQ: // Read request
#ifdef _DEBUG
			traceln("Tftp: Read request");
    73c4:	81 ee       	ldi	r24, 0xE1	; 225
    73c6:	91 e0       	ldi	r25, 0x01	; 1
    73c8:	af c0       	rjmp	.+350    	; 0x7528 <processPacket+0x298>
#endif
			break;

		case TFTP_OPCODE_WRQ: // Write request
#ifdef _DEBUG
			traceln("Tftp: Write request");
    73ca:	84 ef       	ldi	r24, 0xF4	; 244
    73cc:	91 e0       	ldi	r25, 0x01	; 1
    73ce:	d6 d1       	rcall	.+940    	; 0x777c <traceln>
#endif
			netWriteReg(REG_S3_CR, CR_RECV);
    73d0:	60 e4       	ldi	r22, 0x40	; 64
    73d2:	81 e0       	ldi	r24, 0x01	; 1
    73d4:	97 e0       	ldi	r25, 0x07	; 7
    73d6:	c4 de       	rcall	.-632    	; 0x7160 <netWriteReg>
			netWriteReg(REG_S3_CR, CR_CLOSE);
    73d8:	60 e1       	ldi	r22, 0x10	; 16
    73da:	81 e0       	ldi	r24, 0x01	; 1
    73dc:	97 e0       	ldi	r25, 0x07	; 7
    73de:	c0 de       	rcall	.-640    	; 0x7160 <netWriteReg>
			do {
				netWriteReg(REG_S3_MR, MR_UDP);
    73e0:	62 e0       	ldi	r22, 0x02	; 2
    73e2:	80 e0       	ldi	r24, 0x00	; 0
    73e4:	97 e0       	ldi	r25, 0x07	; 7
    73e6:	bc de       	rcall	.-648    	; 0x7160 <netWriteReg>
				netWriteReg(REG_S3_CR, CR_OPEN);
    73e8:	61 e0       	ldi	r22, 0x01	; 1
    73ea:	81 e0       	ldi	r24, 0x01	; 1
    73ec:	97 e0       	ldi	r25, 0x07	; 7
    73ee:	b8 de       	rcall	.-656    	; 0x7160 <netWriteReg>
#ifdef _TFTP_RANDOM_PORT
				netWriteWord(REG_S3_PORT0, (buffer[4]<<8) | ~buffer[5]); // Generate a 'random' TID (RFC1350)
#else
				netWriteWord(REG_S3_PORT0, TFTP_STATIC_PORT);   // Not random any more
    73f0:	69 e7       	ldi	r22, 0x79	; 121
    73f2:	77 eb       	ldi	r23, 0xB7	; 183
    73f4:	84 e0       	ldi	r24, 0x04	; 4
    73f6:	97 e0       	ldi	r25, 0x07	; 7
    73f8:	fa de       	rcall	.-524    	; 0x71ee <netWriteWord>
#endif
				if(netReadReg(REG_S3_SR) != SOCK_UDP)
    73fa:	83 e0       	ldi	r24, 0x03	; 3
    73fc:	97 e0       	ldi	r25, 0x07	; 7
    73fe:	c9 de       	rcall	.-622    	; 0x7192 <netReadReg>
    7400:	82 32       	cpi	r24, 0x22	; 34
    7402:	21 f0       	breq	.+8      	; 0x740c <processPacket+0x17c>
					netWriteReg(REG_S3_CR, CR_CLOSE);
    7404:	60 e1       	ldi	r22, 0x10	; 16
    7406:	81 e0       	ldi	r24, 0x01	; 1
    7408:	97 e0       	ldi	r25, 0x07	; 7
    740a:	aa de       	rcall	.-684    	; 0x7160 <netWriteReg>
			} while(netReadReg(REG_S3_SR) != SOCK_UDP);
    740c:	83 e0       	ldi	r24, 0x03	; 3
    740e:	97 e0       	ldi	r25, 0x07	; 7
    7410:	c0 de       	rcall	.-640    	; 0x7192 <netReadReg>
    7412:	82 32       	cpi	r24, 0x22	; 34
    7414:	29 f7       	brne	.-54     	; 0x73e0 <processPacket+0x150>
#ifdef _DEBUG
			traceln("Tftp: Changed to port ");
    7416:	88 e0       	ldi	r24, 0x08	; 8
    7418:	92 e0       	ldi	r25, 0x02	; 2
    741a:	b0 d1       	rcall	.+864    	; 0x777c <traceln>
	#ifdef _TFTP_RANDOM_PORT
			tracenum((buffer[4]<<8) | (buffer[5]^0x55));
	#else
			tracenum(TFTP_STATIC_PORT);
    741c:	89 e7       	ldi	r24, 0x79	; 121
    741e:	97 eb       	ldi	r25, 0xB7	; 183
    7420:	b7 d1       	rcall	.+878    	; 0x7790 <tracenum>
	#endif
#endif
			lastPacket = 0;
    7422:	10 92 4d 03 	sts	0x034D, r1
    7426:	10 92 4c 03 	sts	0x034C, r1
    742a:	88 c0       	rjmp	.+272    	; 0x753c <processPacket+0x2ac>
			returnCode = ACK; // Send back acknowledge for packet 0
			break;

		case TFTP_OPCODE_DATA:
			packetLength = tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE);
			lastPacket = tftpBlock;
    742c:	b0 92 4d 03 	sts	0x034D, r11
    7430:	a0 92 4c 03 	sts	0x034C, r10
			writeAddr = (tftpBlock - 1) << 9; // Flash write address for this block
    7434:	65 01       	movw	r12, r10
    7436:	21 e0       	ldi	r18, 0x01	; 1
    7438:	c2 1a       	sub	r12, r18
    743a:	d1 08       	sbc	r13, r1
    743c:	dc 2c       	mov	r13, r12
    743e:	cc 24       	eor	r12, r12
    7440:	dd 0c       	add	r13, r13
#ifdef _DEBUG
			traceln("Tftp: Data for block ");
    7442:	8f e1       	ldi	r24, 0x1F	; 31
    7444:	92 e0       	ldi	r25, 0x02	; 2
    7446:	9a d1       	rcall	.+820    	; 0x777c <traceln>
			tracenum(lastPacket);
    7448:	80 91 4c 03 	lds	r24, 0x034C
    744c:	90 91 4d 03 	lds	r25, 0x034D
    7450:	9f d1       	rcall	.+830    	; 0x7790 <tracenum>
#endif

			if((writeAddr + packetLength) > MAX_ADDR) {
    7452:	c6 01       	movw	r24, r12
    7454:	8e 0d       	add	r24, r14
    7456:	9f 1d       	adc	r25, r15
    7458:	81 30       	cpi	r24, 0x01	; 1
    745a:	90 47       	sbci	r25, 0x70	; 112
    745c:	28 f0       	brcs	.+10     	; 0x7468 <processPacket+0x1d8>
				// Flash is full - abort with an error before a bootloader overwrite occurs
				// Application is now corrupt, so do not hand over.
#ifdef _DEBUG
				traceln("Tftp: Flash is full");
    745e:	85 e3       	ldi	r24, 0x35	; 53
    7460:	92 e0       	ldi	r25, 0x02	; 2
    7462:	8c d1       	rcall	.+792    	; 0x777c <traceln>
#endif
				returnCode = ERROR_FULL;
    7464:	83 e0       	ldi	r24, 0x03	; 3
    7466:	6b c0       	rjmp	.+214    	; 0x753e <processPacket+0x2ae>
			} else {
#ifdef _DEBUG
				traceln("Tftp: Writing data from address ");
    7468:	89 e4       	ldi	r24, 0x49	; 73
    746a:	92 e0       	ldi	r25, 0x02	; 2
    746c:	87 d1       	rcall	.+782    	; 0x777c <traceln>
				tracenum(writeAddr);
    746e:	c6 01       	movw	r24, r12
    7470:	8f d1       	rcall	.+798    	; 0x7790 <tracenum>

				uint8_t *pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
				uint16_t offset = 0; // Block offset

				// Round up packet length to a full flash sector size
				while(packetLength % SPM_PAGESIZE) packetLength++;
    7472:	03 c0       	rjmp	.+6      	; 0x747a <processPacket+0x1ea>
    7474:	ff ef       	ldi	r31, 0xFF	; 255
    7476:	ef 1a       	sub	r14, r31
    7478:	ff 0a       	sbc	r15, r31
    747a:	c7 01       	movw	r24, r14
    747c:	8f 77       	andi	r24, 0x7F	; 127
    747e:	99 27       	eor	r25, r25
    7480:	89 2b       	or	r24, r25
    7482:	c1 f7       	brne	.-16     	; 0x7474 <processPacket+0x1e4>
#ifdef _DEBUG
				traceln("Tftp: Packet length adjusted to ");
    7484:	8a e6       	ldi	r24, 0x6A	; 106
    7486:	92 e0       	ldi	r25, 0x02	; 2
    7488:	79 d1       	rcall	.+754    	; 0x777c <traceln>
				tracenum(packetLength);
    748a:	c7 01       	movw	r24, r14
    748c:	81 d1       	rcall	.+770    	; 0x7790 <tracenum>
#endif
				if(writeAddr == 0) {
    748e:	c1 14       	cp	r12, r1
    7490:	d1 04       	cpc	r13, r1
    7492:	19 f4       	brne	.+6      	; 0x749a <processPacket+0x20a>
					// First sector - validate
					if(!validImage(pageBase)) {
    7494:	ce 01       	movw	r24, r28
    7496:	0d 96       	adiw	r24, 0x0d	; 13
    7498:	4c d1       	rcall	.+664    	; 0x7732 <validImage>
#ifdef _DEBUG
				traceln("Tftp: Writing data from address ");
				tracenum(writeAddr);
#endif

				uint8_t *pageBase = buffer + (UDP_HEADER_SIZE + TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE); // Start of block data
    749a:	de 01       	movw	r26, r28
    749c:	1d 96       	adiw	r26, 0x0d	; 13
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    749e:	80 e0       	ldi	r24, 0x00	; 0
    74a0:	90 e0       	ldi	r25, 0x00	; 0
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
					boot_page_fill(writeAddr + offset, writeValue);
    74a2:	41 e0       	ldi	r20, 0x01	; 1
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
					if(offset % SPM_PAGESIZE == 0) {
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    74a4:	53 e0       	ldi	r21, 0x03	; 3
						boot_spm_busy_wait();
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    74a6:	65 e0       	ldi	r22, 0x05	; 5
						boot_spm_busy_wait();
						boot_rww_enable();
    74a8:	71 e1       	ldi	r23, 0x11	; 17
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    74aa:	2d c0       	rjmp	.+90     	; 0x7506 <processPacket+0x276>

#ifdef _DEBUG_TFTP
uint8_t processPacket(uint16_t packetSize)
{
#else
uint8_t processPacket()
    74ac:	e1 e0       	ldi	r30, 0x01	; 1
    74ae:	f0 e0       	ldi	r31, 0x00	; 0
    74b0:	ec 0f       	add	r30, r28
    74b2:	fd 1f       	adc	r31, r29
    74b4:	e8 0f       	add	r30, r24
    74b6:	f9 1f       	adc	r31, r25
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
					uint16_t writeValue = (pageBase[offset]) | (pageBase[offset + 1] << 8);
    74b8:	25 85       	ldd	r18, Z+13	; 0x0d
    74ba:	30 e0       	ldi	r19, 0x00	; 0
    74bc:	32 2f       	mov	r19, r18
    74be:	22 27       	eor	r18, r18
    74c0:	ec 91       	ld	r30, X
    74c2:	2e 2b       	or	r18, r30
					boot_page_fill(writeAddr + offset, writeValue);
    74c4:	f6 01       	movw	r30, r12
    74c6:	09 01       	movw	r0, r18
    74c8:	40 93 57 00 	sts	0x0057, r20
    74cc:	e8 95       	spm
    74ce:	11 24       	eor	r1, r1
						tracenum(writeValue);
						trace(" at offset ");
						tracenum(writeAddr + offset);
					}
#endif
					offset += 2;
    74d0:	02 96       	adiw	r24, 0x02	; 2
					if(offset % SPM_PAGESIZE == 0) {
    74d2:	9c 01       	movw	r18, r24
    74d4:	2f 77       	andi	r18, 0x7F	; 127
    74d6:	33 27       	eor	r19, r19
    74d8:	23 2b       	or	r18, r19
    74da:	89 f4       	brne	.+34     	; 0x74fe <processPacket+0x26e>
						boot_page_erase(writeAddr + offset - SPM_PAGESIZE);
    74dc:	ee 57       	subi	r30, 0x7E	; 126
    74de:	f1 09       	sbc	r31, r1
    74e0:	50 93 57 00 	sts	0x0057, r21
    74e4:	e8 95       	spm
						boot_spm_busy_wait();
    74e6:	07 b6       	in	r0, 0x37	; 55
    74e8:	00 fc       	sbrc	r0, 0
    74ea:	fd cf       	rjmp	.-6      	; 0x74e6 <processPacket+0x256>
						boot_page_write(writeAddr + offset - SPM_PAGESIZE);
    74ec:	60 93 57 00 	sts	0x0057, r22
    74f0:	e8 95       	spm
						boot_spm_busy_wait();
    74f2:	07 b6       	in	r0, 0x37	; 55
    74f4:	00 fc       	sbrc	r0, 0
    74f6:	fd cf       	rjmp	.-6      	; 0x74f2 <processPacket+0x262>
						boot_rww_enable();
    74f8:	70 93 57 00 	sts	0x0057, r23
    74fc:	e8 95       	spm
    74fe:	12 96       	adiw	r26, 0x02	; 2
    7500:	f2 e0       	ldi	r31, 0x02	; 2
    7502:	cf 0e       	add	r12, r31
    7504:	d1 1c       	adc	r13, r1
#endif
					}
				}

				// Flash packets
				for(offset = 0; offset < packetLength;) {
    7506:	8e 15       	cp	r24, r14
    7508:	9f 05       	cpc	r25, r15
    750a:	80 f2       	brcs	.-96     	; 0x74ac <processPacket+0x21c>
						boot_spm_busy_wait();
						boot_rww_enable();
					}
				}

				if(packetLength < TFTP_DATA_SIZE) {
    750c:	e1 14       	cp	r14, r1
    750e:	22 e0       	ldi	r18, 0x02	; 2
    7510:	f2 06       	cpc	r15, r18
    7512:	a0 f4       	brcc	.+40     	; 0x753c <processPacket+0x2ac>
					// Flash is complete
					// Hand over to application
#ifdef _DEBUG
					traceln("Tftp: Flash is complete");
    7514:	8b e8       	ldi	r24, 0x8B	; 139
    7516:	92 e0       	ldi	r25, 0x02	; 2
    7518:	31 d1       	rcall	.+610    	; 0x777c <traceln>
#endif
					returnCode = FINAL_ACK;
    751a:	84 e0       	ldi	r24, 0x04	; 4
    751c:	10 c0       	rjmp	.+32     	; 0x753e <processPacket+0x2ae>
			break;

			// Acknowledgment
		case TFTP_OPCODE_ACK:
#ifdef _DEBUG
			traceln("Tftp: Acknowledge");
    751e:	83 ea       	ldi	r24, 0xA3	; 163
    7520:	92 e0       	ldi	r25, 0x02	; 2
    7522:	02 c0       	rjmp	.+4      	; 0x7528 <processPacket+0x298>
			break;

			// Error signal
		case TFTP_OPCODE_ERROR:
#ifdef _DEBUG
			traceln("Tftp: Error");
    7524:	85 eb       	ldi	r24, 0xB5	; 181
    7526:	92 e0       	ldi	r25, 0x02	; 2
    7528:	29 d1       	rcall	.+594    	; 0x777c <traceln>
	tracenum(tftpOpcode);
	trace(" and data length ");
	tracenum(tftpDataLen - (TFTP_OPCODE_SIZE + TFTP_BLOCKNO_SIZE));
#endif

	uint8_t returnCode = ERROR_UNKNOWN;
    752a:	80 e0       	ldi	r24, 0x00	; 0
			// Error signal
		case TFTP_OPCODE_ERROR:
#ifdef _DEBUG
			traceln("Tftp: Error");
#endif
			break;
    752c:	08 c0       	rjmp	.+16     	; 0x753e <processPacket+0x2ae>

		default:
#ifdef _DEBUG
			traceln("Tftp: Invalid opcode ");
    752e:	81 ec       	ldi	r24, 0xC1	; 193
    7530:	92 e0       	ldi	r25, 0x02	; 2
    7532:	24 d1       	rcall	.+584    	; 0x777c <traceln>
			tracenum(tftpOpcode);
    7534:	c6 01       	movw	r24, r12
    7536:	2c d1       	rcall	.+600    	; 0x7790 <tracenum>
#endif
			// Invalid - return error
			returnCode = ERROR_INVALID;
    7538:	81 e0       	ldi	r24, 0x01	; 1
			break;
    753a:	01 c0       	rjmp	.+2      	; 0x753e <processPacket+0x2ae>
#ifdef _DEBUG
					traceln("Tftp: Flash is complete");
#endif
					returnCode = FINAL_ACK;
				} else {
					returnCode = ACK;
    753c:	82 e0       	ldi	r24, 0x02	; 2
			returnCode = ERROR_INVALID;
			break;

	}
	return(returnCode);
}
    753e:	c4 5f       	subi	r28, 0xF4	; 244
    7540:	dd 4f       	sbci	r29, 0xFD	; 253
    7542:	de bf       	out	0x3e, r29	; 62
    7544:	cd bf       	out	0x3d, r28	; 61
    7546:	df 91       	pop	r29
    7548:	cf 91       	pop	r28
    754a:	ff 90       	pop	r15
    754c:	ef 90       	pop	r14
    754e:	df 90       	pop	r13
    7550:	cf 90       	pop	r12
    7552:	bf 90       	pop	r11
    7554:	af 90       	pop	r10
    7556:	08 95       	ret

00007558 <sendResponse>:


void sendResponse(uint16_t response)
{
    7558:	af 92       	push	r10
    755a:	bf 92       	push	r11
    755c:	cf 92       	push	r12
    755e:	df 92       	push	r13
    7560:	ef 92       	push	r14
    7562:	ff 92       	push	r15
    7564:	1f 93       	push	r17
    7566:	cf 93       	push	r28
    7568:	df 93       	push	r29
    756a:	cd b7       	in	r28, 0x3d	; 61
    756c:	de b7       	in	r29, 0x3e	; 62
    756e:	c4 56       	subi	r28, 0x64	; 100
    7570:	d1 09       	sbc	r29, r1
    7572:	de bf       	out	0x3e, r29	; 62
    7574:	cd bf       	out	0x3d, r28	; 61
    7576:	7c 01       	movw	r14, r24
	uint8_t txBuffer[100];
	uint8_t *txPtr = txBuffer;
	uint8_t packetLength;
	uint16_t writePointer;

	writePointer = netReadWord(REG_S3_TX_WR0) + S3_TX_START;
    7578:	84 e2       	ldi	r24, 0x24	; 36
    757a:	97 e0       	ldi	r25, 0x07	; 7
    757c:	24 de       	rcall	.-952    	; 0x71c6 <netReadWord>
    757e:	98 5a       	subi	r25, 0xA8	; 168
    7580:	6c 01       	movw	r12, r24
	switch(response) {
    7582:	82 e0       	ldi	r24, 0x02	; 2
    7584:	e8 16       	cp	r14, r24
    7586:	f1 04       	cpc	r15, r1
    7588:	81 f1       	breq	.+96     	; 0x75ea <sendResponse+0x92>
    758a:	20 f4       	brcc	.+8      	; 0x7594 <sendResponse+0x3c>
    758c:	ea 94       	dec	r14
    758e:	ef 28       	or	r14, r15
    7590:	51 f4       	brne	.+20     	; 0x75a6 <sendResponse+0x4e>
    7592:	19 c0       	rjmp	.+50     	; 0x75c6 <sendResponse+0x6e>
    7594:	83 e0       	ldi	r24, 0x03	; 3
    7596:	e8 16       	cp	r14, r24
    7598:	f1 04       	cpc	r15, r1
    759a:	f1 f0       	breq	.+60     	; 0x75d8 <sendResponse+0x80>
    759c:	e4 e0       	ldi	r30, 0x04	; 4
    759e:	ee 16       	cp	r14, r30
    75a0:	f1 04       	cpc	r15, r1
    75a2:	09 f4       	brne	.+2      	; 0x75a6 <sendResponse+0x4e>
    75a4:	55 c0       	rjmp	.+170    	; 0x7650 <sendResponse+0xf8>
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
    75a6:	4a e0       	ldi	r20, 0x0A	; 10
    75a8:	50 e0       	ldi	r21, 0x00	; 0
    75aa:	60 e8       	ldi	r22, 0x80	; 128
    75ac:	70 e7       	ldi	r23, 0x70	; 112
    75ae:	ce 01       	movw	r24, r28
    75b0:	01 96       	adiw	r24, 0x01	; 1
    75b2:	51 d2       	rcall	.+1186   	; 0x7a56 <memcpy_P>
	switch(response) {
		default:

		case ERROR_UNKNOWN:
			// Send unknown error packet
			packetLength = TFTP_UNKNOWN_ERROR_LEN;
    75b4:	8a e0       	ldi	r24, 0x0A	; 10
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    75b6:	ee 24       	eor	r14, r14
    75b8:	e3 94       	inc	r14
    75ba:	f1 2c       	mov	r15, r1
    75bc:	ec 0e       	add	r14, r28
    75be:	fd 1e       	adc	r15, r29
	}
	return(returnCode);
}


void sendResponse(uint16_t response)
    75c0:	18 2f       	mov	r17, r24
    75c2:	1e 0d       	add	r17, r14
    75c4:	31 c0       	rjmp	.+98     	; 0x7628 <sendResponse+0xd0>
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
    75c6:	4c e0       	ldi	r20, 0x0C	; 12
    75c8:	50 e0       	ldi	r21, 0x00	; 0
    75ca:	65 e9       	ldi	r22, 0x95	; 149
    75cc:	70 e7       	ldi	r23, 0x70	; 112
    75ce:	ce 01       	movw	r24, r28
    75d0:	01 96       	adiw	r24, 0x01	; 1
    75d2:	41 d2       	rcall	.+1154   	; 0x7a56 <memcpy_P>
			memcpy_P(txBuffer, tftp_unknown_error_packet, packetLength);
			break;

		case ERROR_INVALID:
			// Send invalid opcode packet
			packetLength = TFTP_OPCODE_ERROR_LEN;
    75d4:	8c e0       	ldi	r24, 0x0C	; 12
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;
    75d6:	ef cf       	rjmp	.-34     	; 0x75b6 <sendResponse+0x5e>

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
    75d8:	49 e0       	ldi	r20, 0x09	; 9
    75da:	50 e0       	ldi	r21, 0x00	; 0
    75dc:	6b e8       	ldi	r22, 0x8B	; 139
    75de:	70 e7       	ldi	r23, 0x70	; 112
    75e0:	ce 01       	movw	r24, r28
    75e2:	01 96       	adiw	r24, 0x01	; 1
    75e4:	38 d2       	rcall	.+1136   	; 0x7a56 <memcpy_P>
			memcpy_P(txBuffer, tftp_opcode_error_packet, packetLength);
			break;

		case ERROR_FULL:
			// Send unknown error packet
			packetLength = TFTP_FULL_ERROR_LEN;
    75e6:	89 e0       	ldi	r24, 0x09	; 9
			memcpy_P(txBuffer, tftp_full_error_packet, packetLength);
			break;
    75e8:	e6 cf       	rjmp	.-52     	; 0x75b6 <sendResponse+0x5e>

		case ACK:
#ifdef _DEBUG
			traceln("Tftp: Sent ACK");
    75ea:	87 ed       	ldi	r24, 0xD7	; 215
    75ec:	92 e0       	ldi	r25, 0x02	; 2
    75ee:	c6 d0       	rcall	.+396    	; 0x777c <traceln>
				traceln("Tftp: Sent Final ACK ");
				tracenum(lastPacket);
			}
#endif
			packetLength = 4;
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
    75f0:	19 82       	std	Y+1, r1	; 0x01
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
    75f2:	84 e0       	ldi	r24, 0x04	; 4
    75f4:	8a 83       	std	Y+2, r24	; 0x02
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
    75f6:	80 91 4c 03 	lds	r24, 0x034C
    75fa:	90 91 4d 03 	lds	r25, 0x034D
    75fe:	9b 83       	std	Y+3, r25	; 0x03
			*txPtr = lastPacket & 0xff;
    7600:	8c 83       	std	Y+4, r24	; 0x04
			if(response == FINAL_ACK) {
				traceln("Tftp: Sent Final ACK ");
				tracenum(lastPacket);
			}
#endif
			packetLength = 4;
    7602:	84 e0       	ldi	r24, 0x04	; 4
			*txPtr++ = TFTP_OPCODE_ACK >> 8;
			*txPtr++ = TFTP_OPCODE_ACK & 0xff;
			// lastPacket is block code
			*txPtr++ = lastPacket >> 8;
			*txPtr = lastPacket & 0xff;
			break;
    7604:	d8 cf       	rjmp	.-80     	; 0x75b6 <sendResponse+0x5e>
	}

	txPtr = txBuffer;
	while(packetLength--) {
		netWriteReg(writePointer++, *txPtr++);
    7606:	f7 01       	movw	r30, r14
    7608:	61 91       	ld	r22, Z+
    760a:	7f 01       	movw	r14, r30
    760c:	56 01       	movw	r10, r12
    760e:	ff ef       	ldi	r31, 0xFF	; 255
    7610:	af 1a       	sub	r10, r31
    7612:	bf 0a       	sbc	r11, r31
    7614:	c6 01       	movw	r24, r12
    7616:	a4 dd       	rcall	.-1208   	; 0x7160 <netWriteReg>
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
    7618:	a1 14       	cp	r10, r1
    761a:	80 e6       	ldi	r24, 0x60	; 96
    761c:	b8 06       	cpc	r11, r24
    761e:	19 f4       	brne	.+6      	; 0x7626 <sendResponse+0xce>
    7620:	a1 2c       	mov	r10, r1
    7622:	48 e5       	ldi	r20, 0x58	; 88
    7624:	b4 2e       	mov	r11, r20
    7626:	65 01       	movw	r12, r10
			*txPtr = lastPacket & 0xff;
			break;
	}

	txPtr = txBuffer;
	while(packetLength--) {
    7628:	1e 11       	cpse	r17, r14
    762a:	ed cf       	rjmp	.-38     	; 0x7606 <sendResponse+0xae>
		netWriteReg(writePointer++, *txPtr++);
		if(writePointer == S3_TX_END) writePointer = S3_TX_START;
	}
	netWriteWord(REG_S3_TX_WR0, writePointer - S3_TX_START);
    762c:	b6 01       	movw	r22, r12
    762e:	78 55       	subi	r23, 0x58	; 88
    7630:	84 e2       	ldi	r24, 0x24	; 36
    7632:	97 e0       	ldi	r25, 0x07	; 7
    7634:	dc dd       	rcall	.-1096   	; 0x71ee <netWriteWord>
	netWriteReg(REG_S3_CR, CR_SEND);
    7636:	60 e2       	ldi	r22, 0x20	; 32
    7638:	81 e0       	ldi	r24, 0x01	; 1
    763a:	97 e0       	ldi	r25, 0x07	; 7
    763c:	91 dd       	rcall	.-1246   	; 0x7160 <netWriteReg>
	while(netReadReg(REG_S3_CR));
    763e:	81 e0       	ldi	r24, 0x01	; 1
    7640:	97 e0       	ldi	r25, 0x07	; 7
    7642:	a7 dd       	rcall	.-1202   	; 0x7192 <netReadReg>
    7644:	81 11       	cpse	r24, r1
    7646:	fb cf       	rjmp	.-10     	; 0x763e <sendResponse+0xe6>
#ifdef _DEBUG
	traceln("Tftp: Response sent");
    7648:	86 ee       	ldi	r24, 0xE6	; 230
    764a:	92 e0       	ldi	r25, 0x02	; 2
    764c:	97 d0       	rcall	.+302    	; 0x777c <traceln>
    764e:	09 c0       	rjmp	.+18     	; 0x7662 <sendResponse+0x10a>
			/* no break */
#endif
		case FINAL_ACK:
#ifdef _DEBUG
			if(response == FINAL_ACK) {
				traceln("Tftp: Sent Final ACK ");
    7650:	8a ef       	ldi	r24, 0xFA	; 250
    7652:	92 e0       	ldi	r25, 0x02	; 2
    7654:	93 d0       	rcall	.+294    	; 0x777c <traceln>
				tracenum(lastPacket);
    7656:	80 91 4c 03 	lds	r24, 0x034C
    765a:	90 91 4d 03 	lds	r25, 0x034D
    765e:	98 d0       	rcall	.+304    	; 0x7790 <tracenum>
    7660:	c7 cf       	rjmp	.-114    	; 0x75f0 <sendResponse+0x98>
	netWriteReg(REG_S3_CR, CR_SEND);
	while(netReadReg(REG_S3_CR));
#ifdef _DEBUG
	traceln("Tftp: Response sent");
#endif
}
    7662:	cc 59       	subi	r28, 0x9C	; 156
    7664:	df 4f       	sbci	r29, 0xFF	; 255
    7666:	de bf       	out	0x3e, r29	; 62
    7668:	cd bf       	out	0x3d, r28	; 61
    766a:	df 91       	pop	r29
    766c:	cf 91       	pop	r28
    766e:	1f 91       	pop	r17
    7670:	ff 90       	pop	r15
    7672:	ef 90       	pop	r14
    7674:	df 90       	pop	r13
    7676:	cf 90       	pop	r12
    7678:	bf 90       	pop	r11
    767a:	af 90       	pop	r10
    767c:	08 95       	ret

0000767e <tftpInit>:
void tftpInit()
{
	// Open socket
	do {
		// Write TFTP Port
		netWriteWord(REG_S3_PORT0, TFTP_PORT);
    767e:	65 e4       	ldi	r22, 0x45	; 69
    7680:	70 e0       	ldi	r23, 0x00	; 0
    7682:	84 e0       	ldi	r24, 0x04	; 4
    7684:	97 e0       	ldi	r25, 0x07	; 7
    7686:	b3 dd       	rcall	.-1178   	; 0x71ee <netWriteWord>
		// Write mode
		netWriteReg(REG_S3_MR, MR_UDP);
    7688:	62 e0       	ldi	r22, 0x02	; 2
    768a:	80 e0       	ldi	r24, 0x00	; 0
    768c:	97 e0       	ldi	r25, 0x07	; 7
    768e:	68 dd       	rcall	.-1328   	; 0x7160 <netWriteReg>
		// Open Socket
		netWriteReg(REG_S3_CR, CR_OPEN);
    7690:	61 e0       	ldi	r22, 0x01	; 1
    7692:	81 e0       	ldi	r24, 0x01	; 1
    7694:	97 e0       	ldi	r25, 0x07	; 7
    7696:	64 dd       	rcall	.-1336   	; 0x7160 <netWriteReg>
		// Read Status
		if(netReadReg(REG_S3_SR) != SOCK_UDP)
    7698:	83 e0       	ldi	r24, 0x03	; 3
    769a:	97 e0       	ldi	r25, 0x07	; 7
    769c:	7a dd       	rcall	.-1292   	; 0x7192 <netReadReg>
    769e:	82 32       	cpi	r24, 0x22	; 34
    76a0:	21 f0       	breq	.+8      	; 0x76aa <tftpInit+0x2c>
			// Close Socket if it wasn't initialized correctly
			netWriteReg(REG_S3_CR, CR_CLOSE);
    76a2:	60 e1       	ldi	r22, 0x10	; 16
    76a4:	81 e0       	ldi	r24, 0x01	; 1
    76a6:	97 e0       	ldi	r25, 0x07	; 7
    76a8:	5b dd       	rcall	.-1354   	; 0x7160 <netWriteReg>
		// If socket correctly opened continue
	} while(netReadReg(REG_S3_SR) != SOCK_UDP);
    76aa:	83 e0       	ldi	r24, 0x03	; 3
    76ac:	97 e0       	ldi	r25, 0x07	; 7
    76ae:	71 dd       	rcall	.-1310   	; 0x7192 <netReadReg>
    76b0:	82 32       	cpi	r24, 0x22	; 34
    76b2:	29 f7       	brne	.-54     	; 0x767e <tftpInit>
}
    76b4:	08 95       	ret

000076b6 <tftpPoll>:

/**
 * Looks for a connection
 */
uint8_t tftpPoll()
{
    76b6:	cf 93       	push	r28
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);
    76b8:	86 e2       	ldi	r24, 0x26	; 38
    76ba:	97 e0       	ldi	r25, 0x07	; 7
    76bc:	84 dd       	rcall	.-1272   	; 0x71c6 <netReadWord>

	if(packetSize) {
    76be:	89 2b       	or	r24, r25
    76c0:	29 f4       	brne	.+10     	; 0x76cc <tftpPoll+0x16>
		response = processPacket();
#endif
		// Send the response
		sendResponse(response);
	}
	if((response==FINAL_ACK) || timedOut()) {
    76c2:	b9 d1       	rcall	.+882    	; 0x7a36 <timedOut>
    76c4:	81 11       	cpse	r24, r1
    76c6:	2e c0       	rjmp	.+92     	; 0x7724 <tftpPoll+0x6e>
		netWriteReg(REG_S3_CR, CR_CLOSE);
		// Complete
		return(0);
	}
	// Tftp continues
	return(1);
    76c8:	81 e0       	ldi	r24, 0x01	; 1
    76ca:	31 c0       	rjmp	.+98     	; 0x772e <tftpPoll+0x78>
	uint8_t response = ACK;
	// Get the size of the recieved data
	uint16_t packetSize = netReadWord(REG_S3_RX_RSR0);

	if(packetSize) {
		tftpFlashing = TRUE;
    76cc:	81 e0       	ldi	r24, 0x01	; 1
    76ce:	80 93 53 03 	sts	0x0353, r24
		for(;;) {
			if(!(netReadReg(REG_S3_IR) & IR_RECV)) break;
    76d2:	82 e0       	ldi	r24, 0x02	; 2
    76d4:	97 e0       	ldi	r25, 0x07	; 7
    76d6:	5d dd       	rcall	.-1350   	; 0x7192 <netReadReg>
    76d8:	82 ff       	sbrs	r24, 2
    76da:	1e c0       	rjmp	.+60     	; 0x7718 <tftpPoll+0x62>
#ifdef _DEBUG
			traceln("Tftp: S3_IR value before ");
    76dc:	80 e1       	ldi	r24, 0x10	; 16
    76de:	93 e0       	ldi	r25, 0x03	; 3
    76e0:	4d d0       	rcall	.+154    	; 0x777c <traceln>
			tracenum(netReadReg(REG_S3_IR));
    76e2:	82 e0       	ldi	r24, 0x02	; 2
    76e4:	97 e0       	ldi	r25, 0x07	; 7
    76e6:	55 dd       	rcall	.-1366   	; 0x7192 <netReadReg>
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	52 d0       	rcall	.+164    	; 0x7790 <tracenum>
#endif
			netWriteReg(REG_S3_IR, IR_RECV);
    76ec:	64 e0       	ldi	r22, 0x04	; 4
    76ee:	82 e0       	ldi	r24, 0x02	; 2
    76f0:	97 e0       	ldi	r25, 0x07	; 7
    76f2:	36 dd       	rcall	.-1428   	; 0x7160 <netWriteReg>
#ifdef _DEBUG
			traceln("Tftp: S3_IR value after ");
    76f4:	8a e2       	ldi	r24, 0x2A	; 42
    76f6:	93 e0       	ldi	r25, 0x03	; 3
    76f8:	41 d0       	rcall	.+130    	; 0x777c <traceln>
			tracenum(netReadReg(REG_S3_IR));
    76fa:	82 e0       	ldi	r24, 0x02	; 2
    76fc:	97 e0       	ldi	r25, 0x07	; 7
    76fe:	49 dd       	rcall	.-1390   	; 0x7192 <netReadReg>
    7700:	90 e0       	ldi	r25, 0x00	; 0
    7702:	46 d0       	rcall	.+140    	; 0x7790 <tracenum>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7704:	2f ef       	ldi	r18, 0xFF	; 255
    7706:	83 ec       	ldi	r24, 0xC3	; 195
    7708:	99 e0       	ldi	r25, 0x09	; 9
    770a:	21 50       	subi	r18, 0x01	; 1
    770c:	80 40       	sbci	r24, 0x00	; 0
    770e:	90 40       	sbci	r25, 0x00	; 0
    7710:	e1 f7       	brne	.-8      	; 0x770a <tftpPoll+0x54>
    7712:	00 c0       	rjmp	.+0      	; 0x7714 <tftpPoll+0x5e>
    7714:	00 00       	nop
    7716:	dd cf       	rjmp	.-70     	; 0x76d2 <tftpPoll+0x1c>
		}
		// Process Packet and get TFTP response code
#ifdef _DEBUG_TFTP
		response = processPacket(packetSize);
#else
		response = processPacket();
    7718:	bb dd       	rcall	.-1162   	; 0x7290 <processPacket>
    771a:	c8 2f       	mov	r28, r24
#endif
		// Send the response
		sendResponse(response);
    771c:	90 e0       	ldi	r25, 0x00	; 0
    771e:	1c df       	rcall	.-456    	; 0x7558 <sendResponse>
	}
	if((response==FINAL_ACK) || timedOut()) {
    7720:	c4 30       	cpi	r28, 0x04	; 4
    7722:	79 f6       	brne	.-98     	; 0x76c2 <tftpPoll+0xc>
		netWriteReg(REG_S3_CR, CR_CLOSE);
    7724:	60 e1       	ldi	r22, 0x10	; 16
    7726:	81 e0       	ldi	r24, 0x01	; 1
    7728:	97 e0       	ldi	r25, 0x07	; 7
    772a:	1a dd       	rcall	.-1484   	; 0x7160 <netWriteReg>
		// Complete
		return(0);
    772c:	80 e0       	ldi	r24, 0x00	; 0
	}
	// Tftp continues
	return(1);
}
    772e:	cf 91       	pop	r28
    7730:	08 95       	ret

00007732 <validImage>:
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t *base)
{
    7732:	20 e0       	ldi	r18, 0x00	; 0
    7734:	30 e0       	ldi	r19, 0x00	; 0
#include "validate.h"
#include "debug.h"
#include "serial.h"


uint8_t validImage(uint8_t *base)
    7736:	fc 01       	movw	r30, r24
    7738:	e2 0f       	add	r30, r18
    773a:	f3 1f       	adc	r31, r19
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
		// For each vector, check it is of the form:
		// 0x0C 0x94 0xWX 0xYZ  ; JMP 0xWXYZ
		if(base[i] != 0x0c) {
    773c:	40 81       	ld	r20, Z
    773e:	4c 30       	cpi	r20, 0x0C	; 12
    7740:	51 f4       	brne	.+20     	; 0x7756 <validImage+0x24>
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
		}
		if(base[i + 1] != 0x94) {
    7742:	41 81       	ldd	r20, Z+1	; 0x01
    7744:	44 39       	cpi	r20, 0x94	; 148
    7746:	39 f4       	brne	.+14     	; 0x7756 <validImage+0x24>
    7748:	2c 5f       	subi	r18, 0xFC	; 252
    774a:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t validImage(uint8_t *base)
{
	/* Check that a jump table is present in the first flash sector */
	uint8_t i;
	for(i = 0; i < 0x34; i += 4) {
    774c:	24 33       	cpi	r18, 0x34	; 52
    774e:	31 05       	cpc	r19, r1
    7750:	91 f7       	brne	.-28     	; 0x7736 <validImage+0x4>
		}
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
    7752:	81 e0       	ldi	r24, 0x01	; 1
    7754:	08 95       	ret
			tracenum(i);
			trace(" with ");
			tracenum(base[i]);
			trace(" instead of 0x0C");
#endif
			return(0);
    7756:	80 e0       	ldi	r24, 0x00	; 0
	}
#ifdef _DEBUG_VALD
	traceln("Vald: Valid image");
#endif
	return(1);
}
    7758:	08 95       	ret

0000775a <trace>:
#include "debug.h"


#ifdef _DEBUG
void trace(char *msg)
{
    775a:	ef 92       	push	r14
    775c:	ff 92       	push	r15
    775e:	7c 01       	movw	r14, r24
	uint8_t c;
	if(*msg != '\0') {
    7760:	fc 01       	movw	r30, r24
    7762:	80 81       	ld	r24, Z
    7764:	81 11       	cpse	r24, r1
    7766:	02 c0       	rjmp	.+4      	; 0x776c <trace+0x12>
    7768:	06 c0       	rjmp	.+12     	; 0x7776 <trace+0x1c>
		while((c = *msg++)) putch(c);
    776a:	25 d1       	rcall	.+586    	; 0x79b6 <putch>
    776c:	f7 01       	movw	r30, r14
    776e:	81 91       	ld	r24, Z+
    7770:	7f 01       	movw	r14, r30
    7772:	81 11       	cpse	r24, r1
    7774:	fa cf       	rjmp	.-12     	; 0x776a <trace+0x10>
	}
}
    7776:	ff 90       	pop	r15
    7778:	ef 90       	pop	r14
    777a:	08 95       	ret

0000777c <traceln>:

void traceln(char *msg)
{
    777c:	ef 92       	push	r14
    777e:	ff 92       	push	r15
    7780:	7c 01       	movw	r14, r24
	trace("\r\n");
    7782:	83 e4       	ldi	r24, 0x43	; 67
    7784:	93 e0       	ldi	r25, 0x03	; 3
    7786:	e9 df       	rcall	.-46     	; 0x775a <trace>
	trace(msg);
    7788:	c7 01       	movw	r24, r14
}
    778a:	ff 90       	pop	r15
    778c:	ef 90       	pop	r14
}

void traceln(char *msg)
{
	trace("\r\n");
	trace(msg);
    778e:	e5 cf       	rjmp	.-54     	; 0x775a <trace>

00007790 <tracenum>:
}

void tracenum(uint16_t num)
{
    7790:	ef 92       	push	r14
    7792:	ff 92       	push	r15
    7794:	7c 01       	movw	r14, r24
	trace("0x");
    7796:	86 e4       	ldi	r24, 0x46	; 70
    7798:	93 e0       	ldi	r25, 0x03	; 3
    779a:	df df       	rcall	.-66     	; 0x775a <trace>
	puthex(num >> 12);
    779c:	c7 01       	movw	r24, r14
    779e:	89 2f       	mov	r24, r25
    77a0:	99 27       	eor	r25, r25
    77a2:	82 95       	swap	r24
    77a4:	8f 70       	andi	r24, 0x0F	; 15
    77a6:	0e d1       	rcall	.+540    	; 0x79c4 <puthex>
	puthex(num >> 8);
    77a8:	8f 2d       	mov	r24, r15
    77aa:	0c d1       	rcall	.+536    	; 0x79c4 <puthex>
	puthex(num >> 4);
    77ac:	c7 01       	movw	r24, r14
    77ae:	34 e0       	ldi	r19, 0x04	; 4
    77b0:	96 95       	lsr	r25
    77b2:	87 95       	ror	r24
    77b4:	3a 95       	dec	r19
    77b6:	e1 f7       	brne	.-8      	; 0x77b0 <tracenum+0x20>
    77b8:	05 d1       	rcall	.+522    	; 0x79c4 <puthex>
	puthex(num);
    77ba:	8e 2d       	mov	r24, r14
}
    77bc:	ff 90       	pop	r15
    77be:	ef 90       	pop	r14
{
	trace("0x");
	puthex(num >> 12);
	puthex(num >> 8);
	puthex(num >> 4);
	puthex(num);
    77c0:	01 c1       	rjmp	.+514    	; 0x79c4 <puthex>

000077c2 <watchdogDisable>:
 */
uint8_t watchdogDisable(void)
{
	uint8_t mcusr_mirror;

	mcusr_mirror = MCUSR;
    77c2:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;
    77c4:	14 be       	out	0x34, r1	; 52
	wdt_disable();
    77c6:	98 e1       	ldi	r25, 0x18	; 24
    77c8:	0f b6       	in	r0, 0x3f	; 63
    77ca:	f8 94       	cli
    77cc:	90 93 60 00 	sts	0x0060, r25
    77d0:	10 92 60 00 	sts	0x0060, r1
    77d4:	0f be       	out	0x3f, r0	; 63

	return(mcusr_mirror);
}
    77d6:	08 95       	ret

000077d8 <watchdogReset>:

void watchdogReset(void)
{
	wdt_reset();
    77d8:	a8 95       	wdr
    77da:	08 95       	ret

000077dc <watchdogConfig>:
}

void watchdogConfig(uint8_t x)
{
	WDTCSR = _BV(WDCE) | _BV(WDE);
    77dc:	e0 e6       	ldi	r30, 0x60	; 96
    77de:	f0 e0       	ldi	r31, 0x00	; 0
    77e0:	98 e1       	ldi	r25, 0x18	; 24
    77e2:	90 83       	st	Z, r25
	WDTCSR = x;
    77e4:	80 83       	st	Z, r24
    77e6:	08 95       	ret

000077e8 <verifySpace>:
uint8_t  length;


void verifySpace()
{
	if(getch() != CRC_EOP) {
    77e8:	f9 d0       	rcall	.+498    	; 0x79dc <getch>
    77ea:	80 32       	cpi	r24, 0x20	; 32
    77ec:	19 f0       	breq	.+6      	; 0x77f4 <verifySpace+0xc>
		watchdogConfig(WATCHDOG_16MS);	// shorten WD timeout
    77ee:	88 e0       	ldi	r24, 0x08	; 8
    77f0:	f5 df       	rcall	.-22     	; 0x77dc <watchdogConfig>
    77f2:	ff cf       	rjmp	.-2      	; 0x77f2 <verifySpace+0xa>
		while(1)						// and busy-loop so that WD causes
			;							// a reset and app start.
	}
	putch(STK_INSYNC);
    77f4:	84 e1       	ldi	r24, 0x14	; 20
    77f6:	df c0       	rjmp	.+446    	; 0x79b6 <putch>

000077f8 <getNch>:
}


void getNch(uint8_t count)
{
    77f8:	cf 93       	push	r28
    77fa:	c8 2f       	mov	r28, r24
	do getch();
    77fc:	ef d0       	rcall	.+478    	; 0x79dc <getch>
	while(--count);
    77fe:	c1 50       	subi	r28, 0x01	; 1
    7800:	e9 f7       	brne	.-6      	; 0x77fc <getNch+0x4>
	verifySpace();
}
    7802:	cf 91       	pop	r28

void getNch(uint8_t count)
{
	do getch();
	while(--count);
	verifySpace();
    7804:	f1 cf       	rjmp	.-30     	; 0x77e8 <verifySpace>

00007806 <proccessCommand>:
}


uint8_t proccessCommand()
{
    7806:	ef 92       	push	r14
    7808:	ff 92       	push	r15
    780a:	cf 93       	push	r28
    780c:	df 93       	push	r29
    780e:	1f 92       	push	r1
    7810:	cd b7       	in	r28, 0x3d	; 61
    7812:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;

	ch = getch();
    7814:	e3 d0       	rcall	.+454    	; 0x79dc <getch>

	if(ch == STK_GET_PARAMETER) {
    7816:	81 34       	cpi	r24, 0x41	; 65
    7818:	71 f4       	brne	.+28     	; 0x7836 <proccessCommand+0x30>
		unsigned char which = getch();
    781a:	e0 d0       	rcall	.+448    	; 0x79dc <getch>
		verifySpace();
    781c:	89 83       	std	Y+1, r24	; 0x01
    781e:	e4 df       	rcall	.-56     	; 0x77e8 <verifySpace>
		if(which == 0x82) {
    7820:	89 81       	ldd	r24, Y+1	; 0x01
    7822:	82 38       	cpi	r24, 0x82	; 130
    7824:	11 f4       	brne	.+4      	; 0x782a <proccessCommand+0x24>
			/*
			 * Send tftpboot version as "minor SW version"
			 */
			putch(TFTPBOOT_MINVER);
    7826:	82 e0       	ldi	r24, 0x02	; 2
    7828:	04 c0       	rjmp	.+8      	; 0x7832 <proccessCommand+0x2c>
		} else if(which == 0x81) {
    782a:	81 38       	cpi	r24, 0x81	; 129
    782c:	09 f4       	brne	.+2      	; 0x7830 <proccessCommand+0x2a>
    782e:	1f c0       	rjmp	.+62     	; 0x786e <proccessCommand+0x68>
		} else {
			/*
			 * GET PARAMETER returns a generic 0x03 reply for
			 * other parameters - enough to keep Avrdude happy
			 */
			putch(0x03);
    7830:	83 e0       	ldi	r24, 0x03	; 3
    7832:	c1 d0       	rcall	.+386    	; 0x79b6 <putch>
    7834:	9e c0       	rjmp	.+316    	; 0x7972 <proccessCommand+0x16c>
		}
	} else if(ch == STK_SET_DEVICE) {
    7836:	82 34       	cpi	r24, 0x42	; 66
    7838:	11 f4       	brne	.+4      	; 0x783e <proccessCommand+0x38>
		// SET DEVICE is ignored
		getNch(20);
    783a:	84 e1       	ldi	r24, 0x14	; 20
    783c:	03 c0       	rjmp	.+6      	; 0x7844 <proccessCommand+0x3e>
	} else if(ch == STK_SET_DEVICE_EXT) {
    783e:	85 34       	cpi	r24, 0x45	; 69
    7840:	19 f4       	brne	.+6      	; 0x7848 <proccessCommand+0x42>
		// SET DEVICE EXT is ignored
		getNch(4);
    7842:	84 e0       	ldi	r24, 0x04	; 4
    7844:	d9 df       	rcall	.-78     	; 0x77f8 <getNch>
    7846:	95 c0       	rjmp	.+298    	; 0x7972 <proccessCommand+0x16c>
	} else if(ch == STK_LOAD_ADDRESS) {
    7848:	85 35       	cpi	r24, 0x55	; 85
    784a:	69 f4       	brne	.+26     	; 0x7866 <proccessCommand+0x60>
		// LOAD ADDRESS
		uint16_t newAddress;
		newAddress = getch();
    784c:	c7 d0       	rcall	.+398    	; 0x79dc <getch>
    784e:	f8 2e       	mov	r15, r24
		newAddress = (newAddress & 0xff) | (getch() << 8);
    7850:	c5 d0       	rcall	.+394    	; 0x79dc <getch>
    7852:	2f 2d       	mov	r18, r15
    7854:	30 e0       	ldi	r19, 0x00	; 0
    7856:	38 2b       	or	r19, r24
#ifdef RAMPZ
		// Transfer top bit to RAMPZ
		RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif

		newAddress += newAddress; // Convert from word address to byte address
    7858:	22 0f       	add	r18, r18
    785a:	33 1f       	adc	r19, r19
		address = newAddress;
    785c:	30 93 4f 03 	sts	0x034F, r19
    7860:	20 93 4e 03 	sts	0x034E, r18
    7864:	85 c0       	rjmp	.+266    	; 0x7970 <proccessCommand+0x16a>
		verifySpace();
	} else if(ch == STK_UNIVERSAL) {
    7866:	86 35       	cpi	r24, 0x56	; 86
    7868:	21 f4       	brne	.+8      	; 0x7872 <proccessCommand+0x6c>
		// UNIVERSAL command is ignored
		getNch(4);
    786a:	84 e0       	ldi	r24, 0x04	; 4
    786c:	c5 df       	rcall	.-118    	; 0x77f8 <getNch>
		putch(0x00);
    786e:	80 e0       	ldi	r24, 0x00	; 0
    7870:	e0 cf       	rjmp	.-64     	; 0x7832 <proccessCommand+0x2c>
	}
	/* Write memory, length is big endian and is in bytes */
	else if(ch == STK_PROG_PAGE) {
    7872:	84 36       	cpi	r24, 0x64	; 100
    7874:	09 f0       	breq	.+2      	; 0x7878 <proccessCommand+0x72>
    7876:	50 c0       	rjmp	.+160    	; 0x7918 <proccessCommand+0x112>
		// PROGRAM PAGE - we support flash programming only, not EEPROM
		uint8_t *bufPtr;
		uint16_t addrPtr;

		getch();			/* getlen() */
    7878:	b1 d0       	rcall	.+354    	; 0x79dc <getch>
		length = getch();
    787a:	b0 d0       	rcall	.+352    	; 0x79dc <getch>
    787c:	80 93 54 03 	sts	0x0354, r24
		getch();
    7880:	ad d0       	rcall	.+346    	; 0x79dc <getch>

		// If we are in RWW section, immediately start page erase
		if(address < NRWWSTART) __boot_page_erase_short((uint16_t)(void *)address);
    7882:	e0 91 4e 03 	lds	r30, 0x034E
    7886:	f0 91 4f 03 	lds	r31, 0x034F
    788a:	e1 15       	cp	r30, r1
    788c:	80 e7       	ldi	r24, 0x70	; 112
    788e:	f8 07       	cpc	r31, r24
    7890:	18 f4       	brcc	.+6      	; 0x7898 <proccessCommand+0x92>
    7892:	83 e0       	ldi	r24, 0x03	; 3
    7894:	87 bf       	out	0x37, r24	; 55
    7896:	e8 95       	spm
    7898:	e1 2c       	mov	r14, r1
    789a:	ff 24       	eor	r15, r15
    789c:	f3 94       	inc	r15

		// While that is going on, read in page contents
		bufPtr = buff;
		do *bufPtr++ = getch();
    789e:	9e d0       	rcall	.+316    	; 0x79dc <getch>
    78a0:	f7 01       	movw	r30, r14
    78a2:	81 93       	st	Z+, r24
    78a4:	7f 01       	movw	r14, r30
		while(--length);
    78a6:	80 91 54 03 	lds	r24, 0x0354
    78aa:	81 50       	subi	r24, 0x01	; 1
    78ac:	80 93 54 03 	sts	0x0354, r24
    78b0:	81 11       	cpse	r24, r1
    78b2:	f5 cf       	rjmp	.-22     	; 0x789e <proccessCommand+0x98>

		// If we are in NRWW section, page erase has to be delayed until now.
		// Todo: Take RAMPZ into account
		if(address >= NRWWSTART) __boot_page_erase_short((uint16_t)(void *)address);
    78b4:	e0 91 4e 03 	lds	r30, 0x034E
    78b8:	f0 91 4f 03 	lds	r31, 0x034F
    78bc:	e1 15       	cp	r30, r1
    78be:	80 e7       	ldi	r24, 0x70	; 112
    78c0:	f8 07       	cpc	r31, r24
    78c2:	18 f0       	brcs	.+6      	; 0x78ca <proccessCommand+0xc4>
    78c4:	83 e0       	ldi	r24, 0x03	; 3
    78c6:	87 bf       	out	0x37, r24	; 55
    78c8:	e8 95       	spm

		// Read command terminator, start reply
		verifySpace();
    78ca:	8e df       	rcall	.-228    	; 0x77e8 <verifySpace>

		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();
    78cc:	07 b6       	in	r0, 0x37	; 55
    78ce:	00 fc       	sbrc	r0, 0
    78d0:	fd cf       	rjmp	.-6      	; 0x78cc <proccessCommand+0xc6>

		// Copy buffer into programming buffer
		bufPtr = buff;
		addrPtr = (uint16_t)(void *)address;
    78d2:	40 91 4e 03 	lds	r20, 0x034E
    78d6:	50 91 4f 03 	lds	r21, 0x034F
    78da:	fa 01       	movw	r30, r20
		// If only a partial page is to be programmed, the erase might not be complete.
		// So check that here
		boot_spm_busy_wait();

		// Copy buffer into programming buffer
		bufPtr = buff;
    78dc:	a0 e0       	ldi	r26, 0x00	; 0
    78de:	b1 e0       	ldi	r27, 0x01	; 1
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			__boot_page_fill_short((uint16_t)(void *)addrPtr, a);
    78e0:	61 e0       	ldi	r22, 0x01	; 1
		bufPtr = buff;
		addrPtr = (uint16_t)(void *)address;
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
    78e2:	8c 91       	ld	r24, X
			a |= (*bufPtr++) << 8;
    78e4:	11 96       	adiw	r26, 0x01	; 1
    78e6:	7c 91       	ld	r23, X
    78e8:	11 97       	sbiw	r26, 0x01	; 1
    78ea:	90 e0       	ldi	r25, 0x00	; 0
    78ec:	97 2b       	or	r25, r23
	while(--count);
	verifySpace();
}


uint8_t proccessCommand()
    78ee:	12 96       	adiw	r26, 0x02	; 2
		ch = SPM_PAGESIZE / 2;
		do {
			uint16_t a;
			a = *bufPtr++;
			a |= (*bufPtr++) << 8;
			__boot_page_fill_short((uint16_t)(void *)addrPtr, a);
    78f0:	0c 01       	movw	r0, r24
    78f2:	67 bf       	out	0x37, r22	; 55
    78f4:	e8 95       	spm
    78f6:	11 24       	eor	r1, r1
			addrPtr += 2;
    78f8:	32 96       	adiw	r30, 0x02	; 2
		} while(--ch);
    78fa:	a0 38       	cpi	r26, 0x80	; 128
    78fc:	81 e0       	ldi	r24, 0x01	; 1
    78fe:	b8 07       	cpc	r27, r24
    7900:	81 f7       	brne	.-32     	; 0x78e2 <proccessCommand+0xdc>

		// Write from programming buffer
		__boot_page_write_short((uint16_t)(void *)address);
    7902:	85 e0       	ldi	r24, 0x05	; 5
    7904:	fa 01       	movw	r30, r20
    7906:	87 bf       	out	0x37, r24	; 55
    7908:	e8 95       	spm
		boot_spm_busy_wait();
    790a:	07 b6       	in	r0, 0x37	; 55
    790c:	00 fc       	sbrc	r0, 0
    790e:	fd cf       	rjmp	.-6      	; 0x790a <proccessCommand+0x104>

#if defined(RWWSRE)
		// Reenable read access to flash
		boot_rww_enable();
    7910:	81 e1       	ldi	r24, 0x11	; 17
    7912:	87 bf       	out	0x37, r24	; 55
    7914:	e8 95       	spm
    7916:	2d c0       	rjmp	.+90     	; 0x7972 <proccessCommand+0x16c>
#endif
	}
	/* Read memory block mode, length is big endian.  */
	else if(ch == STK_READ_PAGE) {
    7918:	84 37       	cpi	r24, 0x74	; 116
    791a:	d1 f4       	brne	.+52     	; 0x7950 <proccessCommand+0x14a>
		// READ PAGE - we only read flash
		getch();			/* getlen() */
    791c:	5f d0       	rcall	.+190    	; 0x79dc <getch>
		length = getch();
    791e:	5e d0       	rcall	.+188    	; 0x79dc <getch>
    7920:	80 93 54 03 	sts	0x0354, r24
		getch();
    7924:	5b d0       	rcall	.+182    	; 0x79dc <getch>

		verifySpace();
    7926:	60 df       	rcall	.-320    	; 0x77e8 <verifySpace>
			__asm__("elpm %0,Z\n":"=r"(result):"z"(address));
			putch(result);
			address++;
		} while(--length);
#else
		do putch(pgm_read_byte_near(address++));
    7928:	e0 91 4e 03 	lds	r30, 0x034E
    792c:	f0 91 4f 03 	lds	r31, 0x034F
    7930:	cf 01       	movw	r24, r30
    7932:	01 96       	adiw	r24, 0x01	; 1
    7934:	90 93 4f 03 	sts	0x034F, r25
    7938:	80 93 4e 03 	sts	0x034E, r24
    793c:	84 91       	lpm	r24, Z
    793e:	3b d0       	rcall	.+118    	; 0x79b6 <putch>
		while(--length);
    7940:	80 91 54 03 	lds	r24, 0x0354
    7944:	81 50       	subi	r24, 0x01	; 1
    7946:	80 93 54 03 	sts	0x0354, r24
    794a:	81 11       	cpse	r24, r1
    794c:	ed cf       	rjmp	.-38     	; 0x7928 <proccessCommand+0x122>
    794e:	11 c0       	rjmp	.+34     	; 0x7972 <proccessCommand+0x16c>
#endif
	}
	/* Get device signature bytes  */
	else if(ch == STK_READ_SIGN) {
    7950:	85 37       	cpi	r24, 0x75	; 117
    7952:	39 f4       	brne	.+14     	; 0x7962 <proccessCommand+0x15c>
		// READ SIGN - return what Avrdude wants to hear
		verifySpace();
    7954:	49 df       	rcall	.-366    	; 0x77e8 <verifySpace>
		putch(SIGNATURE_0);
    7956:	8e e1       	ldi	r24, 0x1E	; 30
    7958:	2e d0       	rcall	.+92     	; 0x79b6 <putch>
		putch(SIGNATURE_1);
    795a:	85 e9       	ldi	r24, 0x95	; 149
    795c:	2c d0       	rcall	.+88     	; 0x79b6 <putch>
		putch(SIGNATURE_2);
    795e:	8f e0       	ldi	r24, 0x0F	; 15
    7960:	68 cf       	rjmp	.-304    	; 0x7832 <proccessCommand+0x2c>
	} else if(ch == STK_LEAVE_PROGMODE) {
    7962:	81 35       	cpi	r24, 0x51	; 81
    7964:	29 f4       	brne	.+10     	; 0x7970 <proccessCommand+0x16a>
		// Adaboot no-wait mod
		//watchdogConfig(WATCHDOG_16MS);
		verifySpace();
    7966:	40 df       	rcall	.-384    	; 0x77e8 <verifySpace>
		putch(STK_OK);
    7968:	80 e1       	ldi	r24, 0x10	; 16
    796a:	25 d0       	rcall	.+74     	; 0x79b6 <putch>
		return(0);
    796c:	80 e0       	ldi	r24, 0x00	; 0
    796e:	04 c0       	rjmp	.+8      	; 0x7978 <proccessCommand+0x172>
	} else {
		// This covers the response to commands like STK_ENTER_PROGMODE
		verifySpace();
    7970:	3b df       	rcall	.-394    	; 0x77e8 <verifySpace>
	}
	putch(STK_OK);
    7972:	80 e1       	ldi	r24, 0x10	; 16
    7974:	20 d0       	rcall	.+64     	; 0x79b6 <putch>
	return(1);
    7976:	81 e0       	ldi	r24, 0x01	; 1
}
    7978:	0f 90       	pop	r0
    797a:	df 91       	pop	r29
    797c:	cf 91       	pop	r28
    797e:	ff 90       	pop	r15
    7980:	ef 90       	pop	r14
    7982:	08 95       	ret

00007984 <serialPoll>:


uint8_t serialPoll()
{
	if(UCSR0A & _BV(RXC0)){
    7984:	80 91 c0 00 	lds	r24, 0x00C0
    7988:	87 ff       	sbrs	r24, 7
    798a:	04 c0       	rjmp	.+8      	; 0x7994 <serialPoll+0x10>
		serialFlashing = TRUE;
    798c:	81 e0       	ldi	r24, 0x01	; 1
    798e:	80 93 52 03 	sts	0x0352, r24
		return(proccessCommand());
    7992:	39 cf       	rjmp	.-398    	; 0x7806 <proccessCommand>
	} else return(1);
}
    7994:	81 e0       	ldi	r24, 0x01	; 1
    7996:	08 95       	ret

00007998 <serialInit>:
#include "pin_defs.h"


void serialInit()
{
	UCSR0A = _BV(U2X0); //Double speed mode USART0
    7998:	82 e0       	ldi	r24, 0x02	; 2
    799a:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    799e:	88 e1       	ldi	r24, 0x18	; 24
    79a0:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    79a4:	86 e0       	ldi	r24, 0x06	; 6
    79a6:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = (uint8_t)((F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1);
    79aa:	80 e1       	ldi	r24, 0x10	; 16
    79ac:	80 93 c4 00 	sts	0x00C4, r24
	DDRD = 0x92;
    79b0:	82 e9       	ldi	r24, 0x92	; 146
    79b2:	8a b9       	out	0x0a, r24	; 10
    79b4:	08 95       	ret

000079b6 <putch>:
}


void putch(uint8_t c)
{
	while(!(UCSR0A & _BV(UDRE0)));
    79b6:	90 91 c0 00 	lds	r25, 0x00C0
    79ba:	95 ff       	sbrs	r25, 5
    79bc:	fc cf       	rjmp	.-8      	; 0x79b6 <putch>
	UDR0 = c;
    79be:	80 93 c6 00 	sts	0x00C6, r24
    79c2:	08 95       	ret

000079c4 <puthex>:
}


void puthex(uint8_t c)
{
	c &= 0xf;
    79c4:	8f 70       	andi	r24, 0x0F	; 15
	if(c > 9) c += 7;
    79c6:	8a 30       	cpi	r24, 0x0A	; 10
    79c8:	08 f0       	brcs	.+2      	; 0x79cc <puthex+0x8>
    79ca:	89 5f       	subi	r24, 0xF9	; 249
	while(!(UCSR0A & _BV(UDRE0)));
    79cc:	90 91 c0 00 	lds	r25, 0x00C0
    79d0:	95 ff       	sbrs	r25, 5
    79d2:	fc cf       	rjmp	.-8      	; 0x79cc <puthex+0x8>
	UDR0 = c + '0';
    79d4:	80 5d       	subi	r24, 0xD0	; 208
    79d6:	80 93 c6 00 	sts	0x00C6, r24
    79da:	08 95       	ret

000079dc <getch>:

uint8_t getch(void)
{
	uint8_t ch;

	while(!(UCSR0A & _BV(RXC0)));
    79dc:	80 91 c0 00 	lds	r24, 0x00C0
    79e0:	87 ff       	sbrs	r24, 7
    79e2:	fc cf       	rjmp	.-8      	; 0x79dc <getch>
	if(!(UCSR0A & _BV(FE0))) {
    79e4:	80 91 c0 00 	lds	r24, 0x00C0
    79e8:	84 ff       	sbrs	r24, 4
		 * expects to be talking to the application, and DON'T reset the
		 * watchdog.  This should cause the bootloader to abort and run
		 * the application "soon", if it keeps happening.  (Note that we
		 * don't care that an invalid char is returned...)
		 */
		watchdogReset();
    79ea:	f6 de       	rcall	.-532    	; 0x77d8 <watchdogReset>
	}
	ch = UDR0;
    79ec:	80 91 c6 00 	lds	r24, 0x00C6

	return ch;
}
    79f0:	08 95       	ret

000079f2 <updateLed>:
uint16_t tick = 0;


void updateLed()
{
	uint16_t nextTimer1 = TCNT1;
    79f2:	80 91 84 00 	lds	r24, 0x0084
    79f6:	90 91 85 00 	lds	r25, 0x0085
	if(nextTimer1 & 0x400) LED_PORT ^= _BV(LED); // Led pin high
    79fa:	92 ff       	sbrs	r25, 2
    79fc:	05 c0       	rjmp	.+10     	; 0x7a08 <updateLed+0x16>
    79fe:	25 b1       	in	r18, 0x05	; 5
    7a00:	30 e2       	ldi	r19, 0x20	; 32
    7a02:	23 27       	eor	r18, r19
    7a04:	25 b9       	out	0x05, r18	; 5
    7a06:	01 c0       	rjmp	.+2      	; 0x7a0a <updateLed+0x18>
	else LED_PORT &= ~_BV(LED); // Led pin low
    7a08:	2d 98       	cbi	0x05, 5	; 5
	if(nextTimer1 < lastTimer1) tick++;
    7a0a:	20 91 55 03 	lds	r18, 0x0355
    7a0e:	30 91 56 03 	lds	r19, 0x0356
    7a12:	82 17       	cp	r24, r18
    7a14:	93 07       	cpc	r25, r19
    7a16:	50 f4       	brcc	.+20     	; 0x7a2c <updateLed+0x3a>
    7a18:	20 91 50 03 	lds	r18, 0x0350
    7a1c:	30 91 51 03 	lds	r19, 0x0351
    7a20:	2f 5f       	subi	r18, 0xFF	; 255
    7a22:	3f 4f       	sbci	r19, 0xFF	; 255
    7a24:	30 93 51 03 	sts	0x0351, r19
    7a28:	20 93 50 03 	sts	0x0350, r18
	lastTimer1 = nextTimer1;
    7a2c:	90 93 56 03 	sts	0x0356, r25
    7a30:	80 93 55 03 	sts	0x0355, r24
    7a34:	08 95       	ret

00007a36 <timedOut>:
}

uint8_t timedOut()
{
	// Never timeout if there is no code in Flash
	if(pgm_read_word(0x0000) == 0xFFFF) return(0);
    7a36:	e0 e0       	ldi	r30, 0x00	; 0
    7a38:	f0 e0       	ldi	r31, 0x00	; 0
    7a3a:	85 91       	lpm	r24, Z+
    7a3c:	94 91       	lpm	r25, Z
    7a3e:	01 96       	adiw	r24, 0x01	; 1
    7a40:	41 f0       	breq	.+16     	; 0x7a52 <timedOut+0x1c>
	if(tick > TIMEOUT) return(1);
    7a42:	81 e0       	ldi	r24, 0x01	; 1
    7a44:	20 91 50 03 	lds	r18, 0x0350
    7a48:	30 91 51 03 	lds	r19, 0x0351
    7a4c:	24 30       	cpi	r18, 0x04	; 4
    7a4e:	31 05       	cpc	r19, r1
    7a50:	08 f4       	brcc	.+2      	; 0x7a54 <timedOut+0x1e>
}

uint8_t timedOut()
{
	// Never timeout if there is no code in Flash
	if(pgm_read_word(0x0000) == 0xFFFF) return(0);
    7a52:	80 e0       	ldi	r24, 0x00	; 0
	if(tick > TIMEOUT) return(1);
	return(0);
}
    7a54:	08 95       	ret

00007a56 <memcpy_P>:
    7a56:	fb 01       	movw	r30, r22
    7a58:	dc 01       	movw	r26, r24
    7a5a:	02 c0       	rjmp	.+4      	; 0x7a60 <memcpy_P+0xa>
    7a5c:	05 90       	lpm	r0, Z+
    7a5e:	0d 92       	st	X+, r0
    7a60:	41 50       	subi	r20, 0x01	; 1
    7a62:	50 40       	sbci	r21, 0x00	; 0
    7a64:	d8 f7       	brcc	.-10     	; 0x7a5c <memcpy_P+0x6>
    7a66:	08 95       	ret

00007a68 <__eerd_byte_m328p>:
    7a68:	f9 99       	sbic	0x1f, 1	; 31
    7a6a:	fe cf       	rjmp	.-4      	; 0x7a68 <__eerd_byte_m328p>
    7a6c:	92 bd       	out	0x22, r25	; 34
    7a6e:	81 bd       	out	0x21, r24	; 33
    7a70:	f8 9a       	sbi	0x1f, 0	; 31
    7a72:	99 27       	eor	r25, r25
    7a74:	80 b5       	in	r24, 0x20	; 32
    7a76:	08 95       	ret

00007a78 <_exit>:
    7a78:	f8 94       	cli

00007a7a <__stop_program>:
    7a7a:	ff cf       	rjmp	.-2      	; 0x7a7a <__stop_program>
